{"version":3,"sources":["utilities/stringFormat.ts"],"names":[],"mappings":";AAAA,gFAAgF;AAChF,IAAM,iBAAiB,GAAW,SAAS,CAAC;AAE5C,+EAA+E;AAC/E,IAAM,YAAY,GAAW,UAAU,CAAC;AAExC;;;GAGG;AACH,sBAAqC,CAAS;IAAE,gBAAgB;SAAhB,WAAgB,CAAhB,sBAAgB,CAAhB,IAAgB;QAAhB,+BAAgB;;IAC9D,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,UAAC,KAAa;QAC3C,IAAM,OAAO,GAAW,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;QAC7D,IAAM,UAAU,GAAW,MAAM,CAAC,OAAO,CAAC,CAAC;QAC3C,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,KAAK,CAAC,CAAC,CAAC;YACzB,8EAA8E;YAC9E,KAAK,CAAC,qBAAmB,OAAO,yDAAoD,CAAG,CAAC,CAAC;QAC3F,CAAC;QAED,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC,CAAC,CAAC;AACL,CAAC;AAXD;8BAWC,CAAA","file":"utilities/stringFormat.js","sourcesContent":["// Regex that finds { and } so they can be removed on a lookup for string format\r\nconst FORMAT_ARGS_REGEX: RegExp = /[\\{\\}]/g;\r\n\r\n// Regex that finds {#} so it can be replaced by the arguments in string format\r\nconst FORMAT_REGEX: RegExp = /\\{\\d+\\}/g;\r\n\r\n/**\r\n * String Format, like C# string format.\r\n * Usage Example: stringFormat(\"hello {0}!\", \"mike\") will return \"hello mike!\"\r\n */\r\nexport default function stringFormat(s: string, ...values: any[]): string { // tslint:disable-line:no-any\r\n  return s.replace(FORMAT_REGEX, (match: string) => {\r\n    const matchId: string = match.replace(FORMAT_ARGS_REGEX, '');\r\n    const matchValue: string = values[matchId];\r\n    if (!matchValue && DEBUG) {\r\n      // If the wrong number of arguments is specified, show an alert in debug mode.\r\n      alert(`Argument number ${matchId} is missing. stringFormat was called with format ${s}`);\r\n    }\r\n\r\n    return matchValue;\r\n  });\r\n}\r\n"],"sourceRoot":"/src"}