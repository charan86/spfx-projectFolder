{"version":3,"sources":["DeveloperTools/Components/DeveloperModules/ManifestManager/ManifestManager.tsx"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;AAEH,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAE/B,qCAAiC,wCAAwC,CAAC,CAAA;AAE1E,6CAAyC,wDAAwD,CAAC,CAAA;AAElG,gCAA4B,mCAAmC,CAAC,CAAA;AAChE,qCAAqE,iCAAiC,CAAC,CAAA;AAEvG,4CAAmB,+BAA+B,CAAC,CAAA;AAEnD,qCAAoB,wBAAwB,CAAC,CAAA;AAO7C;IAA6C,mCAA4C;IAevF;QAfF,iBAqEC;QArDG,iBAAO,CAAC;QAdF,eAAU,GAAc,IAAI,gCAAS,CAAC;YAC5C,MAAM,EAAE,UAAC,IAAyB,IAAK,OAAA,IAAI,CAAC,EAAE,EAAP,CAAO;YAC9C,kBAAkB,EAAE;gBAClB,IAAM,cAAc,GAAwB,KAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,CAAC,CAAwB,CAAC;gBAErG,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;oBACpB,sCAA4B,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBACzD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,sCAA4B,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;gBACjE,CAAC;YACH,CAAC;SACF,CAAC,CAAC;QAkDK,cAAS,GAAe;YAC9B,KAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,8BAAoB,CAAC,mBAAmB;gBACnD,gBAAgB,EAAE,8BAAoB,CAAC,gBAAgB;aACxD,CAAC,CAAC;QACL,CAAC,CAAC;QAnDA,IAAI,CAAC,KAAK,GAAG;YACX,SAAS,EAAE,8BAAoB,CAAC,mBAAmB;YACnD,gBAAgB,EAAE,8BAAoB,CAAC,gBAAgB;SACxD,CAAC;IACJ,CAAC;IAEM,2CAAiB,GAAxB;QACE,8BAAoB,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACnD,CAAC;IAEM,8CAAoB,GAA3B;QACE,8BAAoB,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACtD,CAAC;IAEM,gCAAM,GAAb;QACE,IAAM,gBAAgB,GAAwB,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;QAC1E,IAAM,kBAAkB,GAA2B,gBAAgB;cAC/D,oBAAC,yBAAe,GAAC,QAAQ,EAAE,gBAAiB,EAAG;cAC/C,qBAAC,GAAG,IAAC,SAAS,EAAE,qCAAM,CAAC,2BAA4B;gBACjD,qBAAC,GAAG,SACD,8BAAO,CAAC,kBAAmB,CACxB;aACF,CAAC;QAEX,MAAM,CAAE,qBAAC,GAAG,IAAC,SAAS,EAAE,qCAAM,CAAC,SAAU;YAC/B,qBAAC,GAAG,IAAC,SAAS,EAAE,qCAAM,CAAC,qBAAsB;gBAC3C,oBAAC,kCAAW,GAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,SAAU,EAC5B,OAAO,EAAE,CAAC;wBACR,GAAG,EAAE,IAAI;wBACT,IAAI,EAAE,IAAI;wBACV,SAAS,EAAE,IAAI;wBACf,QAAQ,EAAE,CAAC;wBACX,QAAQ,EAAE,GAAG;qBACd,CAAE,EACH,eAAe,EAAE,KAAM,EACvB,aAAa,EAAE,oCAAa,CAAC,MAAO,EACpC,SAAS,EAAE,IAAI,CAAC,UAAW,EAC3B,MAAM,EAAC,KAAK,EACZ,aAAa,EAAE,oCAAa,CAAC,aAAc,EAAG;aACxD;YACN,qBAAC,GAAG,IAAC,SAAS,EAAE,qCAAM,CAAC,wBAAyB,GAC7C,kBAAmB,CAChB,CACF,CAAC;IACjB,CAAC;IAQH,sBAAC;AAAD,CArEA,AAqEC,CArE4C,KAAK,CAAC,SAAS,GAqE3D;AArED;iCAqEC,CAAA","file":"DeveloperTools/Components/DeveloperModules/ManifestManager/ManifestManager.js","sourcesContent":["/**\r\n * @file ManifestManager.tsx\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n */\r\n\r\nimport * as React from 'react';\r\n\r\nimport ManifestManagerStore from './../../../Stores/ManifestManagerStore';\r\nimport { IManifestStoreEntry } from './../../../../stores/ManifestStore';\r\nimport ManifestManagerActionCreator from './../../../ActionCreators/ManifestManagerActionCreator';\r\n\r\nimport ManifestDetails from './ManifestDetails/ManifestDetails';\r\nimport { DetailsList, SelectionMode, Selection, ConstrainMode } from './../../../DeveloperToolsFabric';\r\n\r\nimport styles from './ManifestManager.module.scss';\r\n\r\nimport strings from './ManifestManager.resx';\r\n\r\nexport interface IManifestManagerState {\r\n  manifests: IManifestStoreEntry[];\r\n  selectedManifest: IManifestStoreEntry;\r\n}\r\n\r\nexport default class ManifestManager extends React.Component<void, IManifestManagerState> {\r\n\r\n  private _selection: Selection = new Selection({\r\n    getKey: (item: IManifestStoreEntry) => item.id,\r\n    onSelectionChanged: () => {\r\n      const selectedModule: IManifestStoreEntry = this._selection.getSelection()[0] as IManifestStoreEntry;\r\n\r\n      if (!selectedModule) {\r\n        ManifestManagerActionCreator.selectManifest(undefined);\r\n      } else {\r\n        ManifestManagerActionCreator.selectManifest(selectedModule.id);\r\n      }\r\n    }\r\n  });\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      manifests: ManifestManagerStore.registeredManifests,\r\n      selectedManifest: ManifestManagerStore.selectedManifest\r\n    };\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    ManifestManagerStore.addListener(this._setState);\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    ManifestManagerStore.removeListener(this._setState);\r\n  }\r\n\r\n  public render(): React.ReactElement<{}> {\r\n    const selectedManifest: IManifestStoreEntry = this.state.selectedManifest;\r\n    const manifestDetailsBox: React.ReactElement<{}> = selectedManifest\r\n      ? <ManifestDetails manifest={selectedManifest} />\r\n      : <div className={styles.noManifestSelectedContainer}>\r\n          <div>\r\n            {strings.noManifestSelected}\r\n          </div>\r\n        </div>;\r\n\r\n    return  <div className={styles.container}>\r\n              <div className={styles.manifestListContainer}>\r\n                <DetailsList  items={this.state.manifests}\r\n                              columns={[{\r\n                                key: 'id',\r\n                                name: 'id',\r\n                                fieldName: 'id',\r\n                                minWidth: 0,\r\n                                maxWidth: 290\r\n                              }]}\r\n                              isHeaderVisible={false}\r\n                              selectionMode={SelectionMode.single}\r\n                              selection={this._selection}\r\n                              setKey='set'\r\n                              constrainMode={ConstrainMode.unconstrained} />\r\n              </div>\r\n              <div className={styles.manifestDetailsContainer}>\r\n                {manifestDetailsBox}\r\n              </div>\r\n            </div>;\r\n  }\r\n\r\n  private _setState: () => void = (): void => {\r\n    this.setState({\r\n      manifests: ManifestManagerStore.registeredManifests,\r\n      selectedManifest: ManifestManagerStore.selectedManifest\r\n    });\r\n  };\r\n}"],"sourceRoot":"/src"}