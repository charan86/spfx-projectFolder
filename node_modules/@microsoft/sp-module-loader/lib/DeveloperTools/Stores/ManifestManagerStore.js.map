{"version":3,"sources":["DeveloperTools/Stores/ManifestManagerStore.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;AAGH,0BAAsB,aAAa,CAAC,CAAA;AAEpC,8BAAmD,8BAA8B,CAAC,CAAA;AAElF,qCAAiC,mCAAmC,CAAC,CAAA;AAErE;IAA0C,wCAAS;IAuBjD;QACE,iBAAO,CAAC;QACR,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACpD,CAAC;IAtBD,sBAAkB,gCAAQ;aAA1B;YACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,SAAS,GAAG,IAAI,oBAAoB,EAAE,CAAC;YAC9C,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IAED,sBAAW,qDAAmB;aAA9B;YACE,IAAM,WAAW,GAA0C,uBAAa,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC;YACnG,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,EAAU,IAAK,OAAA,WAAW,CAAC,EAAE,CAAC,EAAf,CAAe,CAAC,CAAC;QACzE,CAAC;;;OAAA;IAED,sBAAW,kDAAgB;aAA3B;YACE,MAAM,CAAC,uBAAa,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC3E,CAAC;;;OAAA;IASD;;OAEG;IACI,4CAAa,GAApB,UAAqB,MAAe;QAClC,EAAE,CAAC,CAAC,MAAM,YAAY,8BAAoB,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,kBAAkB,CAAC;YACrD,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC;IACH,CAAC;IACH,2BAAC;AAAD,CArCA,AAqCC,CArCyC,mBAAS,GAqClD;AArCY,4BAAoB,uBAqChC,CAAA;AAGD;kBAAe,oBAAoB,CAAC,QAAgC,CAAC","file":"DeveloperTools/Stores/ManifestManagerStore.js","sourcesContent":["/**\r\n * @file ManifestManagerStore.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n */\r\n\r\nimport IAction from '../Actions/IAction';\r\nimport BaseStore from './BaseStore';\r\n\r\nimport ManifestStore, { IManifestStoreEntry } from './../../stores/ManifestStore';\r\n\r\nimport SelectManifestAction from './../Actions/SelectManifestAction';\r\n\r\nexport class ManifestManagerStore extends BaseStore {\r\n\r\n  private static _instance: ManifestManagerStore;\r\n\r\n  public static get instance(): ManifestManagerStore {\r\n    if (!this._instance) {\r\n      this._instance = new ManifestManagerStore();\r\n    }\r\n\r\n    return this._instance;\r\n  }\r\n\r\n  public get registeredManifests(): IManifestStoreEntry[] {\r\n    const manifestMap: { [id: string]: IManifestStoreEntry } = ManifestStore.instance.getManifestMap();\r\n    return (Object.keys(manifestMap)).map((id: string) => manifestMap[id]);\r\n  }\r\n\r\n  public get selectedManifest(): IManifestStoreEntry {\r\n    return ManifestStore.instance.getManifestMap()[this._selectedManifestId];\r\n  }\r\n\r\n  private _selectedManifestId: string;\r\n\r\n  constructor() {\r\n    super();\r\n    this.addProcessActionCallback(this.processAction);\r\n  }\r\n\r\n  /**\r\n   * Processes the action fired\r\n   */\r\n  public processAction(action: IAction): void {\r\n    if (action instanceof SelectManifestAction) {\r\n      this._selectedManifestId = action.selectedManifestId;\r\n      this.emitChange();\r\n    }\r\n  }\r\n}\r\n\r\n// instantiate the store so it can start listening to dispatch events\r\nexport default ManifestManagerStore.instance as ManifestManagerStore; // tslint:disable-line:export-name\r\n"],"sourceRoot":"/src"}