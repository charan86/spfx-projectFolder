/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file DeveloperToolsLoader.ts
 */
"use strict";
var ModuleStore_1 = require('./../stores/ModuleStore');
// Ensure the load-themed-styles loader is in this chunk
require('@microsoft/load-themed-styles');
var DeveloperToolsLoader = (function () {
    function DeveloperToolsLoader() {
        this._developerToolsTabsBacklog = [];
    }
    Object.defineProperty(DeveloperToolsLoader, "instance", {
        get: function () {
            if (!DeveloperToolsLoader._instance) {
                DeveloperToolsLoader._instance = new DeveloperToolsLoader();
            }
            return DeveloperToolsLoader._instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Registers a tab in the developer tools. The developer tools are invoked by pressing "CTRL+SHIFT+~".
     *
     * @param {developerToolsTab} The tab definition.
     *
     * @internal
     */
    DeveloperToolsLoader.prototype.registerDeveloperToolsTab = function (developerToolsTab) {
        if (this._developerTools) {
            this._developerTools.registerDeveloperToolsTab(developerToolsTab);
        }
        else {
            this._developerToolsTabsBacklog.push(developerToolsTab);
        }
    };
    /**
     * Shows/hides the developer tools panel.
     *
     * @internal
     */
    DeveloperToolsLoader.prototype.toggleDeveloperTools = function () {
        var _this = this;
        if (this._developerTools) {
            this._developerTools.toggleDeveloperTools();
        }
        else {
            // If we're building an NPM module, we need to make sure React, Flux, and React-DOM aren't bundled. Instead,
            // we'll load them from node_modules.
            if (NPM_BUILD) {
                // Ensure the fake react, flux, and react-dom modules are included in this chunk
                require.include('react');
                require.include('flux');
                require.include('react-dom');
                /* tslint:disable:no-any */
                var reactPromise = ModuleStore_1.default.instance.npmLoadPackage('react');
                var fluxPromise = ModuleStore_1.default.instance.npmLoadPackage('flux');
                var reactDomPromise = ModuleStore_1.default.instance.npmLoadPackage('react-dom');
                /* tslint:enable:no-any */
                Promise.all([reactPromise, reactDomPromise, fluxPromise])
                    .then(function (results) {
                    /* tslint:disable:typedef */
                    var react = results[0];
                    var reactDom = results[1];
                    var flux = results[2];
                    /* tslint:enable:typedef */
                    _this._injectReactFluxIntoCache(react, reactDom, flux);
                    _this._loadDeveloperTools(!_this._tryFillDevToolsFabric());
                });
            }
            else if (this._tryFillReactFlux()) {
                this._loadDeveloperTools(!this._tryFillDevToolsFabric());
            }
            else {
                require.ensure(['react', 'react-dom', 'flux'], function () {
                    require.ensure(['./DeveloperToolsFabric'], function () {
                        require.ensure(['./DeveloperTools'], function (require) {
                            _this._initializeDeveloperTools(require('./DeveloperTools').default);
                        }, 'developer-tools');
                    }, 'developer-tools-fabric');
                }, 'react-flux');
            }
        }
    };
    DeveloperToolsLoader.prototype._tryFillReactFlux = function () {
        /* tslint:disable:typedef */
        var react = ModuleStore_1.default.instance.getModuleById('react');
        var reactDom = ModuleStore_1.default.instance.getModuleById('react-dom');
        var flux = ModuleStore_1.default.instance.getModuleById('flux');
        /* tslint:enable:typedef */
        if (react && flux && reactDom) {
            this._injectReactFluxIntoCache(react, reactDom, flux);
            return true;
        }
        else {
            return false;
        }
    };
    DeveloperToolsLoader.prototype._tryFillDevToolsFabric = function () {
        var fabric = ModuleStore_1.default.instance.getModuleById('office-ui-fabric-react'); // tslint:disable-line:typedef
        if (fabric) {
            var fabricId = require.resolveWeak('./DeveloperToolsFabric');
            if (!require.cache[fabricId]) {
                require.cache[fabricId] = {
                    exports: fabric
                };
            }
            else {
                require.cache[fabricId].exports = fabric;
            }
            return true;
        }
        else {
            return false;
        }
    };
    DeveloperToolsLoader.prototype._injectReactFluxIntoCache = function (react, reactDom, flux) {
        var reactId = require.resolveWeak('react');
        var reactDomId = require.resolveWeak('react-dom');
        var fluxId = require.resolveWeak('flux');
        // Inject react, react-dom, and flux into the module cache
        if (!require.cache[reactId]) {
            require.cache[reactId] = {
                exports: react
            };
        }
        else {
            require.cache[reactId].exports = react;
        }
        if (!require.cache[reactDomId]) {
            require.cache[reactDomId] = {
                exports: reactDom
            };
        }
        else {
            require.cache[reactDomId].exports = reactDom;
        }
        if (!require.cache[fluxId]) {
            require.cache[fluxId] = {
                exports: flux
            };
        }
        else {
            require.cache[fluxId].exports = flux;
        }
    };
    DeveloperToolsLoader.prototype._loadDeveloperTools = function (loadFabric) {
        var _this = this;
        var loadDeveloperTools = function () {
            __webpack_chunk_load__(/* developer-tools */ 3, function (requireFn) {
                _this._initializeDeveloperTools(requireFn(require.resolveWeak('./DeveloperTools')).default);
            });
        };
        if (loadFabric) {
            __webpack_chunk_load__(/* developer-tools-fabric */ 2, loadDeveloperTools);
        }
        else {
            loadDeveloperTools();
        }
    };
    DeveloperToolsLoader.prototype._initializeDeveloperTools = function (developerToolsClass) {
        var _this = this;
        this._developerTools = developerToolsClass.instance;
        this._developerTools.initialize();
        this._developerToolsTabsBacklog.forEach(function (developerToolsTab) {
            _this._developerTools.registerDeveloperToolsTab(developerToolsTab);
        });
        this._developerTools.showHideDeveloperTools(true);
    };
    return DeveloperToolsLoader;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DeveloperToolsLoader;

//# sourceMappingURL=DeveloperToolsLoader.js.map
