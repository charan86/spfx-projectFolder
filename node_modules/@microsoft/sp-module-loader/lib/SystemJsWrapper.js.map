{"version":3,"sources":["SystemJsWrapper.ts"],"names":[],"mappings":"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","file":"SystemJsWrapper.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file SystemJsWrapper.ts\r\n */\r\n\r\nconst loadSystemPolyfills: boolean = typeof Promise === 'undefined';\r\nif (loadSystemPolyfills) {\r\n  require('raw-script!systemjs/dist/system-polyfills');\r\n}\r\n\r\nconst system: SystemJSLoader.System = require('raw-script!systemjs/dist/system');\r\n\r\nimport {\r\n  IClientSideComponentLoaderConfig,\r\n  IModuleConfig,\r\n  IFrameworkModuleConfig,\r\n  IInternalModuleConfig,\r\n  ILocalizedInternalModuleConfig,\r\n  IPath,\r\n  IStandardLibraryModule,\r\n  standardLibraryModules\r\n} from '@microsoft/sp-module-interfaces';\r\n\r\nimport SPModuleLoaderProvider from './SPModuleLoaderProvider';\r\nimport stringFormat from './utilities/stringFormat';\r\n\r\nimport strings from './SystemJsWrapper.resx';\r\n\r\ninterface IExtendedSystemMetadata extends ESLoader.IModuleMetadata {\r\n  moduleConfig: IModuleConfig;\r\n  manifest: IClientSideComponentLoaderConfig;\r\n  parentManifest: IClientSideComponentLoaderConfig;\r\n}\r\n\r\n/**\r\n * Our wrapper around SystemJS for loading our own modules.\r\n */\r\nexport default class SystemJsWrapper {\r\n  private static _instance: SystemJsWrapper;\r\n\r\n  public static get instance(): SystemJsWrapper {\r\n    if (!this._instance) {\r\n      this._instance = new SystemJsWrapper();\r\n      this._instance._initialize();\r\n    }\r\n\r\n    return this._instance;\r\n  }\r\n\r\n  /**\r\n   * Map from a serial ID to the associated loader config.\r\n   */\r\n  private _manifestMap: Map<string, IClientSideComponentLoaderConfig> =\r\n    new Map<string, IClientSideComponentLoaderConfig>();\r\n\r\n  private _currentLocale: string;\r\n\r\n  /* tslint:disable:no-any */\r\n  private _componentCache: Map<string, Map<string, Promise<any>>> = new Map<string, Map<string, Promise<any>>>();\r\n  /* tslint:enable:no-any */\r\n\r\n  private _parentMap: Map<string, string> = new Map<string, string>();\r\n\r\n  /**\r\n   * Given a loader config, load a module.\r\n   *\r\n   * @param {manifest} A manifest loader config.\r\n   * @param {id} The manifest's ID\r\n   * @returns A promise containing the loaded module.\r\n   */\r\n/* tslint:disable:no-any */\r\n  public loadManifestModules(id: string, manifest: IClientSideComponentLoaderConfig,\r\n    entryName?: string, preloadDependencies: boolean = true): Promise<any> {\r\n\r\n    if (!this._componentCache.has(id)) {\r\n      this._componentCache.set(id, new Map<string, Promise<any>>());\r\n    }\r\n\r\n    const componentModuleCache: Map<string, Promise<any>> = this._componentCache.get(id);\r\n\r\n    if (!componentModuleCache.has(id)) {\r\n      this._manifestMap.set(id, manifest);\r\n      componentModuleCache.set(id, system.import(id));\r\n    }\r\n\r\n    // The manifest may or may not have been loaded with preloadDependencies\r\n    const dependencies: Promise<any>[] = Object.keys(manifest.scriptResources).map((resource: string): Promise<any> => {\r\n      if (resource !== manifest.entryModuleId) {\r\n        // Preload unless shouldNotPreload flag is true\r\n        if (!componentModuleCache.has(resource) && manifest.scriptResources[resource].shouldNotPreload !== true) {\r\n          this._parentMap.set(resource, id);\r\n          const dependency: Promise<any> = system.import(resource);\r\n          componentModuleCache.set(resource, dependency);\r\n          return dependency;\r\n        }\r\n      }\r\n    });\r\n\r\n    return Promise.all([componentModuleCache.get(id)].concat(dependencies)).then((entry: any[]): any => {\r\n      let result: any = entry[0];\r\n      if (entryName) {\r\n        result = result[entryName];\r\n      }\r\n\r\n      if (manifest.exportedModuleName) {\r\n        result = result[manifest.exportedModuleName];\r\n      }\r\n\r\n      return result;\r\n    });\r\n  }\r\n/* tslint:enable:no-any */\r\n\r\n  /**\r\n   * Given a URL, load a script.\r\n   *\r\n   * @param {scriptSrc} The script URL.\r\n   * @param {globalExportsName} (optional) If the script isn't an AMD module and loads a global member on the page,\r\n   *                  specify the global member's name.\r\n   * @return A promise containing the loaded module.\r\n   */\r\n  public loadScript(scriptSrc: string, globalExportsName?: string): Promise<any> { // tslint:disable-line:no-any\r\n    if (globalExportsName) {\r\n      const globalMetaConfig: SystemJSLoader.Config = { // tslint:disable-line:typedef\r\n        meta: {}\r\n      };\r\n\r\n      globalMetaConfig.meta[scriptSrc] = {\r\n        format: 'global',\r\n        exports: globalExportsName\r\n      };\r\n\r\n      system.config(globalMetaConfig);\r\n    }\r\n\r\n    return system.import(scriptSrc);\r\n  }\r\n\r\n  /**\r\n   * Set the current locale.\r\n   *\r\n   * @param {locale} The user's locale.\r\n   */\r\n  public set currentLocale(locale: string) {\r\n    if (locale) {\r\n      locale = locale.toLowerCase();\r\n    }\r\n\r\n    this._currentLocale = locale;\r\n  }\r\n\r\n  private _initialize(): void {\r\n    const pluginName: string = 'sp-module-loader-resolver';\r\n    const placeholderBaseUrl: string = 'https://placeholder-base-url/';\r\n\r\n    /**\r\n     * Resolve a localized module config to a URL.\r\n     */\r\n    const resolveLocalizedModuleConfig: (moduleConfig: ILocalizedInternalModuleConfig) => string | IPath =\r\n      (moduleConfig: ILocalizedInternalModuleConfig) => {\r\n      if (moduleConfig.paths) {\r\n        // Workaround for temporary issue in SPOREL. VSO#238501\r\n        if ('default' in moduleConfig.paths && Object.keys(moduleConfig.paths).length === 1) {\r\n          // IFF only a \"default\" path is provided, use that path.\r\n          return moduleConfig.paths['default'];\r\n        } else if (this._currentLocale) {\r\n          for (const locale in moduleConfig.paths) {\r\n            if (locale && locale.toLowerCase() === this._currentLocale && moduleConfig.paths[locale]) {\r\n              return moduleConfig.paths[locale];\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return moduleConfig.defaultPath;\r\n    };\r\n\r\n    /**\r\n     * Resolve a IModuleConfig to a URL\r\n     *\r\n     * Take a look at the IModuleConfig documentation for more information.\r\n     */\r\n    const resolveModuleConfig: (moduleName: string, moduleConfig: IModuleConfig) => string =\r\n      (moduleName: string, moduleConfig: IModuleConfig) => {\r\n      if (moduleConfig) {\r\n        switch (moduleConfig.type) {\r\n          case 'framework':\r\n            return moduleName;\r\n\r\n          case 'internal':\r\n            return this._resolvePath((moduleConfig as IInternalModuleConfig).path);\r\n\r\n          case 'localized':\r\n            return this._resolvePath(resolveLocalizedModuleConfig(moduleConfig as ILocalizedInternalModuleConfig));\r\n\r\n          case null: // tslint:disable-line:no-null-keyword\r\n          case undefined:\r\n          default: // tslint:disable-line:no-switch-case-fall-through\r\n            return moduleName;\r\n        }\r\n      } else {\r\n        return moduleName;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * We need to keep track of each imported module's parent module so we can resolve its manifest. This\r\n     * small wrapper around the system normalize function records the parent name of each module because that field\r\n     * doesn't get passed to the loader.\r\n     */\r\n    const self: SystemJsWrapper = this;\r\n    const oldNormalize: (name: string, parentName: string, parentAddress: string) => string = system.normalize;\r\n    system.normalize = function(name: string, parentName: string, parentAddress: string): string {\r\n\r\n      // parentName           == \"https://baseURL/4d5eb168-6729-49a8-aec7-0e397f486b6e\"\r\n      // normalizedParentName == \"4d5eb168-6729-49a8-aec7-0e397f486b6e\"\r\n      const normalizedParentName: string =\r\n        (parentName &&\r\n         parentName.length > placeholderBaseUrl.length &&\r\n         parentName.substr(0, placeholderBaseUrl.length) === placeholderBaseUrl)\r\n          ? parentName.substr(placeholderBaseUrl.length)\r\n          : parentName;\r\n\r\n      // @todo VSO #212246: this naive mapping strategy has several issues, replace with more robust solution\r\n      let parent: string = self._parentMap.get(name) || normalizedParentName;\r\n      while (parent && !self._manifestMap.has(parent)) {\r\n        parent = self._parentMap.get(parent);\r\n      }\r\n      self._parentMap.set(name, parent);\r\n\r\n      return oldNormalize.call(this, name, parentName, parentAddress);\r\n    };\r\n\r\n    const loader: ESLoader.ICustomLoader = {\r\n      /**\r\n       * This step's purpose is to reolve a resource's name to its location. There are three different types of resource\r\n       * references in our manifest schema, and there are four different types of address resolutions:\r\n       * - If we pass a URL directly into this function, just return the URL. This means that we aren't loading a\r\n       *    manifest.\r\n       * - If we resolve to an internal module, pass the path and fetch will load that\r\n       * - If we resolve a localized module, pick the current locale (or default) and pass the path to fetch like\r\n       *    an internal module\r\n       * - If we resolve an framework module, pass the name to fetch and let fetch find it by name\r\n       */\r\n      locate: (module: ESLoader.IModule): string => {\r\n        const moduleName: string = (module.address.indexOf(placeholderBaseUrl) === 0)\r\n          ? module.address.substring(placeholderBaseUrl.length)\r\n          : module.address;\r\n\r\n        // Get the manifest either by the identifier that was passed to SystemJS, or if this is a child dependency,\r\n        // resolve the parent name and find the manifest based on that.\r\n        const parentName: string = this._parentMap.get(moduleName);\r\n        let manifest: IClientSideComponentLoaderConfig = this._manifestMap.get(moduleName);\r\n        let moduleConfig: IModuleConfig;\r\n        if (manifest) {\r\n          moduleConfig = manifest.scriptResources[manifest.entryModuleId];\r\n        } else if (parentName) {\r\n          manifest = this._manifestMap.get(parentName);\r\n          moduleConfig = manifest.scriptResources[moduleName];\r\n        }\r\n\r\n        if (!moduleConfig) {\r\n          console.log(stringFormat(strings.unableToResolveConfigError, moduleName));\r\n        }\r\n\r\n        // Populate some important properties we need to persist in the SystemJS module object\r\n        module.name = moduleName;\r\n        const metadata: IExtendedSystemMetadata = module.metadata as IExtendedSystemMetadata;\r\n        metadata.manifest = manifest;\r\n        metadata.moduleConfig = moduleConfig;\r\n\r\n        // Resolve the path or name.\r\n        return resolveModuleConfig(moduleName, moduleConfig);\r\n      },\r\n\r\n      /**\r\n       * This step's purpose is to go out and get the module that \"locate\" found. There are three different core\r\n       * scenarios in this function:\r\n       * - The simplest is if this function recieves a path or a full URL. If it recieves a path, the\r\n       *    internalModuleBaseUrls from the manifest is prepended. Now with a full URL, we fall through to the OOB\r\n       *    SystemJS scriptLoad fetch step.\r\n       * - If we recieve a module name that we have bundled with the loader (react, flux, etc), we'll have webpack load\r\n       *    that module and return a promise that resolves to a SystemJS module containing the requested object.\r\n       *    NOTE: this method will go away when we support bundling multiple modules in a single manifest.\r\n       * - If we recieve a module name that resolves to one of the standard modules with an associated manifest, we'll\r\n       *    load that manifest using the same pipeline that we use to load any other manifest.\r\n       */\r\n      fetch: (module: ESLoader.IModule): Promise<{}> => {\r\n        const metadata: IExtendedSystemMetadata = module.metadata as IExtendedSystemMetadata;\r\n        let address: string = module.address;\r\n\r\n        // Check if we're looking at an framework moduleConfig\r\n        if (metadata.moduleConfig && metadata.moduleConfig.type === 'framework') {\r\n          const moduleConfig: IFrameworkModuleConfig = metadata.moduleConfig as IFrameworkModuleConfig;\r\n\r\n          const standardLibraryModule: IStandardLibraryModule = standardLibraryModules[address];\r\n          if (standardLibraryModule) {\r\n            // Special case where the module loader is an external package\r\n            if (address === '@microsoft/sp-module-loader') {\r\n              // Grab instance module to ensure we can hand exactly the same interface to packages were built against\r\n              return Promise.resolve({ module: require('./index'), match: (): string[] => undefined });\r\n            }\r\n\r\n            try {\r\n              return SPModuleLoaderProvider.instance.loadStandardLibraryModule(standardLibraryModule, address)\r\n                .then((loadedModule: Object): Object => {\r\n                  // Wrap the loaded module so it falls through the rest of SystemJS\r\n                  return { module: loadedModule, match: (): string[] => undefined };\r\n                });\r\n            } catch (e) {\r\n              // Unable to load this manifest, fall through to path\r\n            }\r\n          }\r\n\r\n          // If we make it here, we weren't able to load the module by its manifest, so let's fall back to the path\r\n          //   provided in the manfiest\r\n          if (moduleConfig.failoverPath) {\r\n            address = this._resolvePath(moduleConfig.failoverPath);\r\n          } else {\r\n            throw new Error(stringFormat(strings.invalidFrameworkModuleError, module.address));\r\n          }\r\n        }\r\n\r\n        // Fall back to the default systemJS loader if we make it here\r\n        metadata.scriptLoad = true;\r\n        metadata.loaderModule = undefined;\r\n        metadata.loader = undefined;\r\n\r\n        // Prepend the base URL if this isn't a fully-qualified URL.\r\n        if (!module.address.match(/^https?\\:\\/\\//)) {\r\n          // Replace this with shared URL concatenation logic. VSO#249681\r\n          const moduleBaseUrl: string =\r\n            (metadata.manifest.internalModuleBaseUrls[0] || placeholderBaseUrl).replace(/\\/+$/, '');\r\n          module.address = `${moduleBaseUrl}/${address}`;\r\n        }\r\n\r\n        let modulesToLoad: Promise<{}>[] = [];\r\n\r\n        // If this is a non-AMD module, inject dependency and globalName information\r\n        const internalModuleLoaderConfig: IInternalModuleConfig = metadata.moduleConfig as IInternalModuleConfig;\r\n        if (metadata.moduleConfig && internalModuleLoaderConfig.globalName) {\r\n          // Load the script via XHR so we can execute in a sandbox\r\n          metadata.scriptLoad = false;\r\n\r\n          // @todo VSO #246501: load most externals scripts into a semi sandboxed/railed environment,\r\n          // which will neccesitate the use of XHR.\r\n          // Configure SystemJS to load this module correctly\r\n          module.metadata.scriptLoad = true;\r\n          module.metadata.format = 'global';\r\n          module.metadata.exports = internalModuleLoaderConfig.globalName;\r\n\r\n          // Manually ensure dependencies are loaded\r\n          modulesToLoad = (internalModuleLoaderConfig.globalDependencies || []).map((dependencyName: string) => {\r\n            return system.import(dependencyName);\r\n          });\r\n        }\r\n\r\n        // Call the OOB SystemJS fetch code.\r\n        modulesToLoad.unshift(system.fetch(module));\r\n        const loadNecessaryModules: Promise<{}[]> = Promise.all(modulesToLoad);\r\n\r\n        return loadNecessaryModules.then((loadedModules: {}[]) => {\r\n          return loadedModules[0];\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Not doing anything here - just passing the source module through.\r\n       */\r\n      translate: (module: ESLoader.IModule): {} => {\r\n        return module.source.module;\r\n      },\r\n\r\n      /**\r\n       * Not doing anything here - just passing the source module through.\r\n       */\r\n      instantiate: (module: ESLoader.IModule): {} => {\r\n        return module.source.module;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Create a default SystemJS config that passes everything to our loader.\r\n     */\r\n    const systemConfig: {} = {\r\n      baseURL: placeholderBaseUrl,\r\n      defaultJsExtensions: false,\r\n      meta: {\r\n        '*': {\r\n          loader: pluginName,\r\n          scriptLoad: true\r\n        }\r\n      }\r\n    };\r\n\r\n    // Load the loader as a system module and then set the system config. We need to do this is this order, otherwise\r\n    // SystemJS will try to load our loader with itself, and will throw.\r\n    system.set(pluginName, system.newModule(loader));\r\n    system.config(systemConfig);\r\n  }\r\n\r\n  /**\r\n   * Resolve a path to the min or debug version of a script. Currently only min versions are supported.\r\n   */\r\n  private _resolvePath(path: string | IPath): string {\r\n    if (typeof path === 'string') {\r\n      return path as string;\r\n    } else {\r\n      return path.default;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}