/**
 * @copyright Microsoft Corporation. All rights reserved.
 */
"use strict";
var UrlQueryParameterCollection_1 = require('./UrlQueryParameterCollection');
/**
 * NOT FOR USE BY THIRD PARTY DEVELOPERS
 *
 * This class supports Microsoft's internal deployment workflow.
 * For more information, see https://microsoft.sharepoint.com/teams/odsp/_layouts/OneNote.aspx
 * ?id=/teams/odsp/Shared%20Documents/MI-6%20Team/MI-6%20Team/Global/SPO%20Flighting
 * @internal
 * @internalremarks SPFlight is being re-exported by sp-client-base and should be imported from there.
 */
var SPFlight = (function () {
    function SPFlight() {
    }
    /**
     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
     * The application code should not call it directly.
     */
    SPFlight.initialize = function (flights) {
        this._enabledFlightsMap = flights || [];
        /**
         * If DEBUG then parse the 'debugFlights' query string parameter for any flights to enable for
         * the session. 'debugFlights' is expected to be a comma separated list. We store the flights as given
         * to avoid needing to do any bitmask conversions during translation and just check the
         * feature ID directly.
         */
        if (DEBUG) {
            try {
                var queryParams = new UrlQueryParameterCollection_1.default(window.location.href);
                var debugFlights = queryParams.getValue('debugFlights');
                if (debugFlights) {
                    this._debugFlights = debugFlights.split(',').map(function (value) { return parseInt(value, 10); });
                }
            }
            catch (error) {
                // If an exception is thrown, we'll log the error and clear _debugFlights
                this._debugFlights = [];
                console.log("Error parsing debugFlights query string parameter: " + error);
            }
        }
    };
    /**
     * NOT FOR USE BY THIRD PARTY DEVELOPERS
     *
     * This function will determine if a flight is enabled in the global list.
     */
    SPFlight.isEnabled = function (flight) {
        if (!flight || flight < 0) {
            return false;
        }
        // If DEBUG then we respect the set of debug flights before the environment flights
        if (DEBUG && this._debugFlights.indexOf(flight) !== -1) {
            return true;
        }
        // Determines which set of bitMasks should be used to determine if a flight is enabled.
        /* tslint:disable:no-bitwise */
        var enabledFlightsIndex = flight >> 5;
        if (enabledFlightsIndex < 0 || enabledFlightsIndex >= this._enabledFlightsMap.length) {
            return false;
        }
        // Masks the flight number and determines if the flight is turned on within that mask.
        var bitMask = 1 << (flight & 31);
        return (this._enabledFlightsMap[enabledFlightsIndex] & bitMask) !== 0;
        /* tslint:enable:no-bitwise */
    };
    /**
     * List of SharePoint flight feature IDs. Populated through the debugFlights query string parameter.
     */
    SPFlight._debugFlights = [];
    /**
     * Array of bits (indexed by flight number, where 1 means that flight is enabled).
     */
    SPFlight._enabledFlightsMap = [];
    return SPFlight;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPFlight;

//# sourceMappingURL=SPFlight.js.map
