{"version":3,"sources":["staticLinks/SPFlight.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH,4CAAwC,+BAA+B,CAAC,CAAA;AAExE;;;;;;;;GAQG;AACH;IAAA;IAmEA,CAAC;IAvDC;;;OAGG;IACW,mBAAU,GAAxB,UAAyB,OAAiB;QACxC,IAAI,CAAC,kBAAkB,GAAG,OAAO,IAAI,EAAE,CAAC;QAExC;;;;;WAKG;QACH,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,IAAI,CAAC;gBACH,IAAM,WAAW,GAAgC,IAAI,qCAA2B,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACvG,IAAM,YAAY,GAAW,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;gBAClE,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACjB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAC,KAAK,IAAO,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/F,CAAC;YACH,CAAE;YAAA,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,yEAAyE;gBACzE,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;gBACxB,OAAO,CAAC,GAAG,CAAC,wDAAsD,KAAO,CAAC,CAAC;YAC7E,CAAC;QACH,CAAC;IACH,CAAC;IAED;;;;OAIG;IACW,kBAAS,GAAvB,UAAwB,MAAc;QACpC,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,mFAAmF;QACnF,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,uFAAuF;QACvF,+BAA+B;QAC/B,IAAM,mBAAmB,GAAW,MAAM,IAAI,CAAC,CAAC;QAChD,EAAE,CAAC,CAAC,mBAAmB,GAAG,CAAC,IAAI,mBAAmB,IAAI,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;YACnF,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,sFAAsF;QACtF,IAAM,OAAO,GAAW,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;QAC3C,MAAM,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;QACtE,8BAA8B;IAChC,CAAC;IAhED;;OAEG;IACY,sBAAa,GAAa,EAAE,CAAC;IAE5C;;OAEG;IACY,2BAAkB,GAAa,EAAE,CAAC;IAyDnD,eAAC;AAAD,CAnEA,AAmEC,IAAA;AAnED;0BAmEC,CAAA","file":"staticLinks/SPFlight.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport UrlQueryParameterCollection from './UrlQueryParameterCollection';\r\n\r\n/**\r\n * NOT FOR USE BY THIRD PARTY DEVELOPERS\r\n *\r\n * This class supports Microsoft's internal deployment workflow.\r\n * For more information, see https://microsoft.sharepoint.com/teams/odsp/_layouts/OneNote.aspx\r\n * ?id=/teams/odsp/Shared%20Documents/MI-6%20Team/MI-6%20Team/Global/SPO%20Flighting\r\n * @internal\r\n * @internalremarks SPFlight is being re-exported by sp-client-base and should be imported from there.\r\n */\r\nexport default class SPFlight {\r\n\r\n  /**\r\n   * List of SharePoint flight feature IDs. Populated through the debugFlights query string parameter.\r\n   */\r\n  private static _debugFlights: number[] = [];\r\n\r\n  /**\r\n   * Array of bits (indexed by flight number, where 1 means that flight is enabled).\r\n   */\r\n  private static _enabledFlightsMap: number[] = [];\r\n\r\n  /**\r\n   * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.\r\n   * The application code should not call it directly.\r\n   */\r\n  public static initialize(flights: number[]): void {\r\n    this._enabledFlightsMap = flights || [];\r\n\r\n    /**\r\n     * If DEBUG then parse the 'debugFlights' query string parameter for any flights to enable for\r\n     * the session. 'debugFlights' is expected to be a comma separated list. We store the flights as given\r\n     * to avoid needing to do any bitmask conversions during translation and just check the\r\n     * feature ID directly.\r\n     */\r\n    if (DEBUG) {\r\n      try {\r\n        const queryParams: UrlQueryParameterCollection = new UrlQueryParameterCollection(window.location.href);\r\n        const debugFlights: string = queryParams.getValue('debugFlights');\r\n        if (debugFlights) {\r\n          this._debugFlights = debugFlights.split(',').map((value) => { return parseInt(value, 10); });\r\n        }\r\n      } catch (error) {\r\n        // If an exception is thrown, we'll log the error and clear _debugFlights\r\n        this._debugFlights = [];\r\n        console.log(`Error parsing debugFlights query string parameter: ${error}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * NOT FOR USE BY THIRD PARTY DEVELOPERS\r\n   *\r\n   * This function will determine if a flight is enabled in the global list.\r\n   */\r\n  public static isEnabled(flight: number): boolean {\r\n    if (!flight || flight < 0) {\r\n      return false;\r\n    }\r\n\r\n    // If DEBUG then we respect the set of debug flights before the environment flights\r\n    if (DEBUG && this._debugFlights.indexOf(flight) !== -1) {\r\n      return true;\r\n    }\r\n\r\n    // Determines which set of bitMasks should be used to determine if a flight is enabled.\r\n    /* tslint:disable:no-bitwise */\r\n    const enabledFlightsIndex: number = flight >> 5;\r\n    if (enabledFlightsIndex < 0 || enabledFlightsIndex >= this._enabledFlightsMap.length) {\r\n        return false;\r\n    }\r\n\r\n    // Masks the flight number and determines if the flight is turned on within that mask.\r\n    const bitMask: number = 1 << (flight & 31);\r\n    return (this._enabledFlightsMap[enabledFlightsIndex] & bitMask) !== 0;\r\n    /* tslint:enable:no-bitwise */\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}