{"version":3,"sources":["SPModuleLoader.ts"],"names":[],"mappings":"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","file":"SPModuleLoader.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file SPModuleLoader.ts\r\n */\r\n\r\nrequire('set-webpack-public-path!');\r\n\r\nimport * as Combokeys from 'combokeys';\r\n\r\nimport {\r\n  IClientSideComponentManifest,\r\n\r\n  IBundleReference,\r\n  IStandardLibraryModule,\r\n  standardLibraryModules\r\n} from '@microsoft/sp-module-interfaces';\r\n\r\n// Keep DeveloperToolsLoader at the top to keep the chunks ordered correctly\r\nimport DeveloperToolsLoader from './DeveloperTools/DeveloperToolsLoader';\r\nimport { IDeveloperToolsTab } from './DeveloperTools/IDeveloperToolsTab';\r\nimport SystemJsWrapper from './SystemJsWrapper';\r\nimport ManifestStore from './stores/ManifestStore';\r\nimport ModuleStore from './stores/ModuleStore';\r\nimport DebugManifestProvider from './DebugManifestProvider';\r\nimport SPFlight from './staticLinks/SPFlight';\r\n\r\nimport stringFormat from './utilities/stringFormat';\r\nimport strings from './SPModuleLoader.resx';\r\n\r\nconst basePlatformPackageName: string = '@microsoft/sp-client-preview';\r\n\r\nexport interface IPartialSpPageContextInfo {\r\n  currentUICultureName: string;\r\n  ExpFeatures: number[];\r\n}\r\n\r\nexport interface IApplicationPreloadedData {\r\n  clientSideApplicationId: string;\r\n  clientSideApplicationManifest: IClientSideComponentManifest;\r\n  manifests: IClientSideComponentManifest[];\r\n  spPageContextInfo: IPartialSpPageContextInfo;\r\n}\r\n\r\nlet _allowDebug: boolean = undefined;\r\nexport function ensureDebugAllowed(ask: boolean = true): boolean {\r\n  if (!ask || _allowDebug !== undefined) {\r\n    return !!_allowDebug;\r\n  } else {\r\n    // Inform the user that they might be loading debug manifests\r\n    _allowDebug = confirm(strings.debugManifestLoadingWarning);\r\n    return _allowDebug;\r\n  }\r\n}\r\n\r\n/**\r\n * The global module loader for SP client-side applications and webparts.\r\n *\r\n * This is an API that lives in a global variable on the window, similar to how systemJS works.\r\n *\r\n * @public\r\n */\r\nexport default class SPModuleLoader {\r\n  private static _headElement: HTMLHeadElement;\r\n\r\n  // Initialization\r\n\r\n  constructor() {\r\n    // Watching for hotkeys on the whole document.\r\n    const fullWindowCombokeys: Combokeys.Combokeys = new Combokeys(document.documentElement);\r\n\r\n    // Bind the debugger to \"ctrl+shift+`\"\r\n    fullWindowCombokeys.bind('ctrl+shift+`', (): void => DeveloperToolsLoader.instance.toggleDeveloperTools());\r\n\r\n    if (!SPModuleLoader._headElement) {\r\n      SPModuleLoader._headElement = document.getElementsByTagName('head')[0];\r\n    }\r\n  }\r\n\r\n  public initialize(preloadedData: IApplicationPreloadedData): Promise<void> {\r\n    return new Promise<void>((resolve: () => void) => {\r\n        ManifestStore.instance.populateManifests(preloadedData);\r\n        this._loadDebugManifests().then(() => {\r\n            if (preloadedData && preloadedData.spPageContextInfo) {\r\n              SystemJsWrapper.instance.currentLocale = preloadedData.spPageContextInfo.currentUICultureName;\r\n            }\r\n\r\n            resolve();\r\n          });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is called by the page scripts to start loading the framework. Do not call it from your own code.\r\n   */\r\n  /* tslint:disable:no-any */\r\n  public start(preloadedData: IApplicationPreloadedData): Promise<any> {\r\n    if (preloadedData && preloadedData.spPageContextInfo) {\r\n      SPFlight.initialize(preloadedData.spPageContextInfo.ExpFeatures);\r\n    }\r\n\r\n    const result: Promise<any> = new Promise<any>((resolve: (value: any) => void,\r\n                                                   reject: (error: Error) => void): void => {\r\n  /* tslint:enable:no-any */\r\n      this.initialize(preloadedData).then(() => {\r\n        if (preloadedData) {\r\n          const applicationManifestId: string = preloadedData.clientSideApplicationId\r\n            ? preloadedData.clientSideApplicationId\r\n            : (preloadedData.clientSideApplicationManifest\r\n              ? preloadedData.clientSideApplicationManifest.id\r\n              : undefined);\r\n\r\n          const manifest: IClientSideComponentManifest = ManifestStore.instance.getManifestById(applicationManifestId);\r\n          if (manifest) {\r\n            const platformModule: IStandardLibraryModule = standardLibraryModules[basePlatformPackageName];\r\n\r\n            let loadingComplete: boolean = false;\r\n            Promise.all([\r\n              // Load the platform in addition to the application\r\n              this.loadStandardLibraryModule(platformModule, basePlatformPackageName),\r\n              SystemJsWrapper.instance.loadManifestModules(manifest.id, manifest.loaderConfig)\r\n            ])\r\n              .then((modules: any[]) => { // tslint:disable-line:no-any\r\n                loadingComplete = true;\r\n\r\n                const platform: any = modules[0]; // tslint:disable-line:no-any\r\n                const application: {} = modules[1];\r\n\r\n                if (!platform || !application) {\r\n                  reject(new Error(stringFormat(strings.platformOrApplicationFailedToLoadError,\r\n                                                basePlatformPackageName,\r\n                                                manifest.loaderConfig.entryModuleId)));\r\n                } else {\r\n                  platform._spShell.start(application, preloadedData)\r\n                    .then((application: any) => resolve(application)) // tslint:disable-line:no-any\r\n                    .catch((error: Error) => {\r\n                      console.error(stringFormat(strings.applicationFailedToInitializeError, error));\r\n                      reject(error);\r\n                  });\r\n                }\r\n\r\n                // @todo VSO #210443: preload WebPart manifests\r\n              }).catch((e) => {\r\n                if (!loadingComplete) {\r\n                  console.error(stringFormat(strings.applicationFailedToLoadError,\r\n                                             manifest.loaderConfig.entryModuleId,\r\n                                             e));\r\n                }\r\n\r\n                reject(e);\r\n              });\r\n          } else {\r\n            reject(new Error(stringFormat(strings.invalidManifestError, applicationManifestId)));\r\n          }\r\n        } else {\r\n          reject(new Error(strings.invaliPreloadedDataError));\r\n        }\r\n      });\r\n    });\r\n\r\n    result.catch((error: Error) => {\r\n      // Log and re-throw errors\r\n      console.error(error);\r\n      throw error;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  // Public API\r\n\r\n  /**\r\n   * Given a URL, load a script.\r\n   *\r\n   * @param scriptSource      - The script URL.\r\n   * @param globalExportsName - If the script isn't an AMD mdoule and loads a global member on the page,\r\n   *                              specify the global member's name.\r\n   * @returns                   A promise containing the loaded module.\r\n   */\r\n  public loadScript(scriptSource: string, globalExportsName?: string): Promise<any> { // tslint:disable-line:no-any\r\n    return SystemJsWrapper.instance.loadScript(scriptSource, globalExportsName);\r\n  }\r\n\r\n  /**\r\n   * Loads a module from a manifest.\r\n   *\r\n   * @param manifest - Manifest of the module to load.\r\n   * @returns          A promise containing the loaded module.\r\n   */\r\n  public loadModule(manifest: IClientSideComponentManifest): Promise<any> { // tslint:disable-line:no-any\r\n    return this._internalLoadModule(manifest);\r\n  }\r\n\r\n  /**\r\n   * Resolve a component id and version, and load it.\r\n   *\r\n   * @param id      - The id of the component to load.\r\n   * @param version - The version of the component to load. If version is not defined, the method\r\n   *                    will load the last version of the component.\r\n   * @returns         A promise containing the loaded module.\r\n   */\r\n  public loadModuleById(id: string, version?: string): Promise<any> { // tslint:disable-line:no-any\r\n    return this._internalLoadModule([{\r\n      id: id\r\n    }]);\r\n  }\r\n\r\n  /**\r\n   * Loads additional manifests into the manifest store, updating existing manifests.\r\n   *\r\n   * @param manifests         - The manifests to load into the store.\r\n   * @param overwriteExisting - If true, overwrite the stored manifest with the provided ones\r\n   */\r\n  public importManifests(manifests: IClientSideComponentManifest[], overwriteExisting: boolean = false): void {\r\n    ManifestStore.instance.importManifests(manifests, overwriteExisting);\r\n  }\r\n\r\n  /**\r\n   * Get all registered manifests.\r\n   *\r\n   * @returns All registered manifests.\r\n   */\r\n  public getManifests(): IClientSideComponentManifest[] {\r\n    return ManifestStore.instance.getAllManifests();\r\n  }\r\n\r\n  /**\r\n   * Inserts a <link ... /> tag for a stylesheet.\r\n   *\r\n   * @param url - The CSS file URL.\r\n   */\r\n  public loadCss(url: string): void {\r\n    const linkTag: HTMLLinkElement = document.createElement('link');\r\n    linkTag.rel = 'stylesheet';\r\n    linkTag.type = 'text/css';\r\n    linkTag.href = url;\r\n\r\n    SPModuleLoader._headElement.appendChild(linkTag);\r\n  }\r\n\r\n  // Internal methods\r\n\r\n  /**\r\n   * If manifests from localhost haven't already been loaded, force them to load without prompting the user.\r\n   *\r\n   * @returns A promise that is fulfilled when the manifests are loaded.\r\n   *\r\n   * @internal\r\n   */\r\n  public forceLocalManifests(): Promise<void> {\r\n    return this._loadDebugManifests(true, true, ['https://localhost:4321/temp/manifests.js',\r\n                                                 'http://localhost:4321/temp/manifests.js']);\r\n  }\r\n\r\n  /**\r\n   * Get the component manifest by id.\r\n   *\r\n   * @param id - GUID id of the component.\r\n   *\r\n   * @internal\r\n   */\r\n  public getManifestById(id: string, version?: string): IClientSideComponentManifest {\r\n    return ManifestStore.instance.getManifestById(id);\r\n  }\r\n\r\n  /**\r\n   * Registers a tab in the developer tools. The developer tools are invoked by pressing \"CTRL+SHIFT+~\".\r\n   *\r\n   * @param developerToolsTab - The tab definition.\r\n   *\r\n   * @internal\r\n   */\r\n  public registerDeveloperToolsTab(developerToolsTab: IDeveloperToolsTab): void {\r\n    DeveloperToolsLoader.instance.registerDeveloperToolsTab(developerToolsTab);\r\n  }\r\n\r\n  // Methods to be deprecated\r\n\r\n  /**\r\n   * If debug manfiests haven't already been loaded, force them to load without prompting the user.\r\n   *\r\n   * @returns A promise that is fulfilled when the manifests are loaded.\r\n   *\r\n   * @deprecated\r\n   */\r\n  public forceLoadDebugManifests(): Promise<void> {\r\n    return this.forceLocalManifests();\r\n  }\r\n\r\n  /**\r\n   * Load a manifest, or resolve a manifest ID and load it.\r\n   *\r\n   * @param idOrManifest - The ID of a manifest, the manifest payload, or an array of IDs. In the case of an array\r\n   *                        of IDs, all of the IDs are considered equally valid, so pick the first one that's resolvable\r\n   *                        to a manifest.\r\n   * @returns A promse containing the loaded module.\r\n   *\r\n   * @deprecated\r\n   */\r\n  public loadManifestModules(idOrManifest: string | IClientSideComponentManifest):\r\n      Promise<any> { // tslint:disable-line:no-any\r\n    if (typeof idOrManifest === 'string') {\r\n      return this.loadModuleById(idOrManifest as string);\r\n    } else {\r\n      return this.loadModule(idOrManifest as IClientSideComponentManifest);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load a standard library manifest.\r\n   *\r\n   * @param standardLibraryModule - The standard library module object.\r\n   * @returns A promse containing the loaded module.\r\n   */\r\n  public loadStandardLibraryModule(standardLibraryModule: IStandardLibraryModule,\r\n                                   moduleName: string): Promise<any> { // tslint:disable-line:no-any\r\n    let resultPromise: Promise<any>; // tslint:disable-line:no-any\r\n    if (NPM_BUILD) {\r\n      // Special case for NPM modules to resolve React, React-DOM, and Flux\r\n      resultPromise = ModuleStore.instance.npmLoadPackage(moduleName);\r\n    }\r\n\r\n    if (!NPM_BUILD || !resultPromise) {\r\n      const references: IBundleReference[] =\r\n        [standardLibraryModule.bundleReference].concat(standardLibraryModule.aliases || []);\r\n\r\n      resultPromise = this._internalLoadModule(references);\r\n    }\r\n\r\n    return resultPromise.then((module: any) => { // tslint:disable-line:no-any\r\n      ModuleStore.instance.storeModuleById(moduleName, module);\r\n      return module;\r\n    });\r\n  }\r\n\r\n  private _loadDebugManifests(noPrompt: boolean = false,\r\n                              noCache: boolean = false,\r\n                              alternativeManifestsFiles?: string[]): Promise<void> {\r\n    if (noPrompt) {\r\n      _allowDebug = true;\r\n    }\r\n\r\n    return DebugManifestProvider.instance.getDebugManifests(noCache, alternativeManifestsFiles).then(\r\n      (debugManifests: { [id: string]: IClientSideComponentManifest }) => {\r\n        ManifestStore.instance.populateDebugManifests(debugManifests);\r\n        ensureDebugAllowed(debugManifests && Object.keys(debugManifests).length > 0);\r\n      });\r\n  }\r\n\r\n  private _internalLoadModule(referenceOrManifest: IBundleReference[] | IClientSideComponentManifest):\r\n      Promise<any> { // tslint:disable-line:no-any\r\n    const references: IBundleReference[] = referenceOrManifest as IBundleReference[];\r\n    let manifest: IClientSideComponentManifest;\r\n    let entryName: string;\r\n    if (references.length) {\r\n      // We have an array of manifests, so find the first one that matches\r\n      for (const reference of references) {\r\n        manifest = ManifestStore.instance.getManifestById(reference.id);\r\n        if (manifest) {\r\n          entryName = reference.entryName;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      manifest = referenceOrManifest as IClientSideComponentManifest;\r\n    }\r\n\r\n    if (manifest) {\r\n      return SystemJsWrapper.instance.loadManifestModules(manifest.id, manifest.loaderConfig, entryName);\r\n    } else {\r\n      throw new Error(stringFormat(strings.manifestNotFoundError, JSON.stringify(referenceOrManifest)));\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}