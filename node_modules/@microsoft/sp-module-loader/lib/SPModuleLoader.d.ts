import { IClientSideComponentManifest, IStandardLibraryModule } from '@microsoft/sp-module-interfaces';
import { IDeveloperToolsTab } from './DeveloperTools/IDeveloperToolsTab';
export interface IPartialSpPageContextInfo {
    currentUICultureName: string;
    ExpFeatures: number[];
}
export interface IApplicationPreloadedData {
    clientSideApplicationId: string;
    clientSideApplicationManifest: IClientSideComponentManifest;
    manifests: IClientSideComponentManifest[];
    spPageContextInfo: IPartialSpPageContextInfo;
}
export declare function ensureDebugAllowed(ask?: boolean): boolean;
/**
 * The global module loader for SP client-side applications and webparts.
 *
 * This is an API that lives in a global variable on the window, similar to how systemJS works.
 *
 * @public
 */
export default class SPModuleLoader {
    private static _headElement;
    constructor();
    initialize(preloadedData: IApplicationPreloadedData): Promise<void>;
    /**
     * This is called by the page scripts to start loading the framework. Do not call it from your own code.
     */
    start(preloadedData: IApplicationPreloadedData): Promise<any>;
    /**
     * Given a URL, load a script.
     *
     * @param scriptSource      - The script URL.
     * @param globalExportsName - If the script isn't an AMD mdoule and loads a global member on the page,
     *                              specify the global member's name.
     * @returns                   A promise containing the loaded module.
     */
    loadScript(scriptSource: string, globalExportsName?: string): Promise<any>;
    /**
     * Loads a module from a manifest.
     *
     * @param manifest - Manifest of the module to load.
     * @returns          A promise containing the loaded module.
     */
    loadModule(manifest: IClientSideComponentManifest): Promise<any>;
    /**
     * Resolve a component id and version, and load it.
     *
     * @param id      - The id of the component to load.
     * @param version - The version of the component to load. If version is not defined, the method
     *                    will load the last version of the component.
     * @returns         A promise containing the loaded module.
     */
    loadModuleById(id: string, version?: string): Promise<any>;
    /**
     * Loads additional manifests into the manifest store, updating existing manifests.
     *
     * @param manifests         - The manifests to load into the store.
     * @param overwriteExisting - If true, overwrite the stored manifest with the provided ones
     */
    importManifests(manifests: IClientSideComponentManifest[], overwriteExisting?: boolean): void;
    /**
     * Get all registered manifests.
     *
     * @returns All registered manifests.
     */
    getManifests(): IClientSideComponentManifest[];
    /**
     * Inserts a <link ... /> tag for a stylesheet.
     *
     * @param url - The CSS file URL.
     */
    loadCss(url: string): void;
    /**
     * If manifests from localhost haven't already been loaded, force them to load without prompting the user.
     *
     * @returns A promise that is fulfilled when the manifests are loaded.
     *
     * @internal
     */
    forceLocalManifests(): Promise<void>;
    /**
     * Get the component manifest by id.
     *
     * @param id - GUID id of the component.
     *
     * @internal
     */
    getManifestById(id: string, version?: string): IClientSideComponentManifest;
    /**
     * Registers a tab in the developer tools. The developer tools are invoked by pressing "CTRL+SHIFT+~".
     *
     * @param developerToolsTab - The tab definition.
     *
     * @internal
     */
    registerDeveloperToolsTab(developerToolsTab: IDeveloperToolsTab): void;
    /**
     * If debug manfiests haven't already been loaded, force them to load without prompting the user.
     *
     * @returns A promise that is fulfilled when the manifests are loaded.
     *
     * @deprecated
     */
    forceLoadDebugManifests(): Promise<void>;
    /**
     * Load a manifest, or resolve a manifest ID and load it.
     *
     * @param idOrManifest - The ID of a manifest, the manifest payload, or an array of IDs. In the case of an array
     *                        of IDs, all of the IDs are considered equally valid, so pick the first one that's resolvable
     *                        to a manifest.
     * @returns A promse containing the loaded module.
     *
     * @deprecated
     */
    loadManifestModules(idOrManifest: string | IClientSideComponentManifest): Promise<any>;
    /**
     * Load a standard library manifest.
     *
     * @param standardLibraryModule - The standard library module object.
     * @returns A promse containing the loaded module.
     */
    loadStandardLibraryModule(standardLibraryModule: IStandardLibraryModule, moduleName: string): Promise<any>;
    private _loadDebugManifests(noPrompt?, noCache?, alternativeManifestsFiles?);
    private _internalLoadModule(referenceOrManifest);
}
