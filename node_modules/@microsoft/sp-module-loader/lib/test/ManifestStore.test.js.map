{"version":3,"sources":["test/ManifestStore.test.ts"],"names":[],"mappings":";AAAA,8BAA0B,yBAAyB,CAAC,CAAA;AAEpD,QAAO,iBAAiB,CAAC,CAAA;AAEzB,IAAM,MAAM,GAAsB,IAAI,CAAC,MAAM,CAAC;AAE9C,QAAQ,CAAC,qBAAqB,EAAE;IAE9B,QAAQ,CAAC,4BAA4B,EAAE;QACrC,IAAM,cAAc,GAAW,sCAAsC,CAAC;QACtE,IAAM,iBAAiB,GAAW,cAAc,CAAC;QAEjD,2BAA2B;QAC3B,IAAM,eAAe,GAAoC;YACzD,0BAA0B;YACxB,eAAe,EAAE,CAAC;YAClB,aAAa,EAAE,SAAS;YACxB,EAAE,EAAE,cAAc;YAClB,KAAK,EAAE,iBAAiB;YACxB,OAAO,EAAE,OAAO;YAChB,YAAY,EAAE;gBACZ,sBAAsB,EAAE,CAAE,kBAAkB,CAAE;gBAC9C,aAAa,EAAE,aAAa;gBAC5B,eAAe,EAAE,EAAE;aACpB;YACD,oBAAoB,EAAE,EAAE;SACzB,CAAC;QAEF,MAAM,CAAC;YACL,uBAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,eAAe,CAAC,EAAE,IAAI,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,UAAC,IAAe;YAClD,IAAM,eAAe,GAAiC,uBAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAC7G,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAC1C,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uBAAuB,EAAE,UAAC,IAAe;YAC1C,IAAM,eAAe,GAAiC,uBAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAC7G,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;YACvD,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE;QACnC,IAAM,eAAe,GAAW,sCAAsC,CAAC;QACvE,IAAM,kBAAkB,GAAW,eAAe,CAAC;QAEnD,2BAA2B;QAC3B,IAAM,eAAe,GAAoC;YACzD,0BAA0B;YACxB,eAAe,EAAE,CAAC;YAClB,aAAa,EAAE,SAAS;YACxB,EAAE,EAAE,eAAe;YACnB,KAAK,EAAE,kBAAkB;YACzB,OAAO,EAAE,OAAO;YAChB,YAAY,EAAE;gBACZ,sBAAsB,EAAE,CAAE,kBAAkB,CAAE;gBAC9C,aAAa,EAAE,aAAa;gBAC5B,eAAe,EAAE,EAAE;aACpB;YACD,oBAAoB,EAAE,EAAE;SACzB,CAAC;QAEF,MAAM,CAAC;YACL,uBAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,eAAe,CAAC,EAAE,IAAI,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,UAAC,IAAe;YACnD,IAAM,eAAe,GAAiC,uBAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;YAC9G,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAC3C,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uBAAuB,EAAE,UAAC,IAAe;YAC1C,IAAM,eAAe,GAAiC,uBAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;YAC9G,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;YACxD,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"test/ManifestStore.test.js","sourcesContent":["import ManifestStore from '../stores/ManifestStore';\r\nimport { IClientSideComponentManifest, IClientSideWebPartManifest } from '@microsoft/sp-module-interfaces';\r\nimport 'es6-collections';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('ManifestStore tests', () => {\r\n\r\n  describe('Adding a built-in manifest', () => {\r\n    const imageWebPartId: string = 'd1d91016-032f-456d-98a4-721247c305e8';\r\n    const imageWebPartAlias: string = 'ImageWebpart';\r\n\r\n    /* tslint:disable:no-any */\r\n    const webpartManifest: IClientSideWebPartManifest<any> = {\r\n    /* tslint:enable:no-any */\r\n      manifestVersion: 2,\r\n      componentType: 'WebPart',\r\n      id: imageWebPartId,\r\n      alias: imageWebPartAlias,\r\n      version: '0.0.1',\r\n      loaderConfig: {\r\n        internalModuleBaseUrls: [ 'https://cdn.net/' ],\r\n        entryModuleId: 'main.bundle',\r\n        scriptResources: {}\r\n      },\r\n      preconfiguredEntries: []\r\n    };\r\n\r\n    before(() => {\r\n      ManifestStore.instance.importManifests([webpartManifest], true);\r\n    });\r\n\r\n    it('should get isInternal as true', (done: MochaDone) => {\r\n      const fetchedManifest: IClientSideComponentManifest = ManifestStore.instance.getManifestById(imageWebPartId);\r\n      assert.isTrue(fetchedManifest.isInternal);\r\n      done();\r\n    });\r\n\r\n    it('should get alias back', (done: MochaDone) => {\r\n      const fetchedManifest: IClientSideComponentManifest = ManifestStore.instance.getManifestById(imageWebPartId);\r\n      assert.equal(fetchedManifest.alias, imageWebPartAlias);\r\n      done();\r\n    });\r\n  });\r\n\r\n  describe('Adding a custom manifest', () => {\r\n    const customWebPartId: string = '00000000-0000-0000-0000-000000000000';\r\n    const customWebPartAlias: string = 'CustomWebpart';\r\n\r\n    /* tslint:disable:no-any */\r\n    const webpartManifest: IClientSideWebPartManifest<any> = {\r\n    /* tslint:enable:no-any */\r\n      manifestVersion: 2,\r\n      componentType: 'WebPart',\r\n      id: customWebPartId,\r\n      alias: customWebPartAlias,\r\n      version: '0.0.1',\r\n      loaderConfig: {\r\n        internalModuleBaseUrls: [ 'https://cdn.net/' ],\r\n        entryModuleId: 'main.bundle',\r\n        scriptResources: {}\r\n      },\r\n      preconfiguredEntries: []\r\n    };\r\n\r\n    before(() => {\r\n      ManifestStore.instance.importManifests([webpartManifest], true);\r\n    });\r\n\r\n    it('should get isInternal as false', (done: MochaDone) => {\r\n      const fetchedManifest: IClientSideComponentManifest = ManifestStore.instance.getManifestById(customWebPartId);\r\n      assert.isFalse(fetchedManifest.isInternal);\r\n      done();\r\n    });\r\n\r\n    it('should get alias back', (done: MochaDone) => {\r\n      const fetchedManifest: IClientSideComponentManifest = ManifestStore.instance.getManifestById(customWebPartId);\r\n      assert.equal(fetchedManifest.alias, customWebPartAlias);\r\n      done();\r\n    });\r\n  });\r\n});"],"sourceRoot":"/src"}