/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file ModuleStore.ts
 */
"use strict";
var SPModuleLoaderProvider_1 = require('./../SPModuleLoaderProvider');
var ModuleStore = (function () {
    function ModuleStore() {
        this._moduleMap = new Map(); // tslint:disable-line:no-any
    }
    Object.defineProperty(ModuleStore, "instance", {
        get: function () {
            if (!ModuleStore._instance) {
                ModuleStore._instance = new ModuleStore();
            }
            return ModuleStore._instance;
        },
        enumerable: true,
        configurable: true
    });
    ModuleStore.prototype.getModuleById = function (id) {
        return this._moduleMap.get(id);
    };
    ModuleStore.prototype.storeModuleById = function (id, module) {
        if (!this._moduleMap.has(id)) {
            this._moduleMap.set(id, module);
        }
    };
    /**
     * This function contains some magic to load special packages (React, React-DOM, and Flux) while we're serving
     *  from a local workbench without bunding any of them. This function shouldn't be used in any context other
     *  than the local workbench and for specific packages.
     */
    ModuleStore.prototype.npmLoadPackage = function (packageName) {
        if (NPM_BUILD) {
            var url = require('url');
            var relativeReactUrl = '__RELATIVE_REACT_PATH__';
            var relativeFluxUrl = '__RELATIVE_FLUX_PATH__';
            if (relativeReactUrl === '__RELATIVE_' + 'REACT_PATH__' ||
                relativeFluxUrl === '__RELATIVE_' + 'FLUX_PATH__') {
                // If the package hasn't been installed (i.e. - it's NPMX linked), don't try to load from incorrect paths
                return undefined;
            }
            var reactUrl = url.resolve(__webpack_public_path__, relativeReactUrl);
            var fluxUrl = url.resolve(__webpack_public_path__, relativeFluxUrl);
            // Stick these on the ModuleStore object
            /* tslint:disable:no-any */
            var staticContainer = ModuleStore;
            /* tslint:enable:no-any */
            if (!staticContainer._reactPromise) {
                staticContainer._reactPromise = SPModuleLoaderProvider_1.default.instance.loadScript(reactUrl);
            }
            if (!staticContainer._fluxPromise) {
                staticContainer._fluxPromise = SPModuleLoaderProvider_1.default.instance.loadScript(fluxUrl);
            }
            switch (packageName) {
                case 'react':
                    return staticContainer._reactPromise;
                case 'react-dom':
                    /* tslint:disable-next-line:no-any */
                    return staticContainer._reactPromise.then(function (react) { return react.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; });
                case 'flux':
                    return staticContainer._fluxPromise;
                default:
                    break;
            }
        }
        return undefined;
    };
    return ModuleStore;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ModuleStore;

//# sourceMappingURL=ModuleStore.js.map
