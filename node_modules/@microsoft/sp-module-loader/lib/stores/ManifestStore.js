/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file ManifestStore.ts
 */
"use strict";
var SPModuleLoader_1 = require('./../SPModuleLoader');
/**
 * This class maintains a cache of the manifests on the current page.
 */
var ManifestStore = (function () {
    function ManifestStore() {
        this._manifests = new Map();
    }
    Object.defineProperty(ManifestStore, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new ManifestStore();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Populate the manifest store with the preloaded manifests.
     *
     * @param {preloadedData} The preloaded data
     */
    ManifestStore.prototype.populateManifests = function (preloadedData) {
        if (preloadedData) {
            if (preloadedData.clientSideApplicationManifest) {
                this._addManifest(preloadedData.clientSideApplicationManifest, true);
            }
            if (preloadedData.manifests && preloadedData.manifests.length) {
                this.importManifests(preloadedData.manifests, true);
            }
        }
        /* tslint:disable-next-line:no-any */
        var globalManifests = window.g_webPartManifests;
        if (globalManifests && globalManifests.length) {
            this.importManifests(globalManifests, true);
        }
    };
    /**
     * Populate the manifest store with debug manifests.
     *
     * @param {manifests} A dictionary of debug manifests.
     */
    ManifestStore.prototype.populateDebugManifests = function (manifests) {
        if (manifests) {
            for (var id in manifests) {
                if (!this._manifests.get(id)) {
                    this._manifests.set(id, {
                        id: id,
                        manifest: undefined
                    });
                }
                this._manifests.get(id).debugManifest = manifests[id];
            }
        }
    };
    /**
     * Return a manifest by its ID. Only return a debug manifest is debug is allowed. If a manifest isn't found by
     * the provided ID, return undefined.
     *
     * @param {id} The ID of the manifest to retrieve.
     * @param {allowDebug} If true, return a debug manifest if one exists.
     * @returns The retrieved manifest, or undefined if one could not be found.
     */
    ManifestStore.prototype.getManifestById = function (id) {
        var manifestEntry = this._manifests.get(id);
        return this._getManifestFromStoreEntry(manifestEntry);
    };
    /**
     * Get all registered manifest objects.
     *
     * @returns The registered manifest objects.
     */
    ManifestStore.prototype.getAllManifests = function () {
        var _this = this;
        var result = [];
        this._manifests.forEach(function (manifestEntry) {
            var manifest = _this._getManifestFromStoreEntry(manifestEntry);
            if (manifest) {
                result.push(manifest);
            }
        });
        return result;
    };
    /**
     * Returns a map of manifest IDs to manfiests.
     *
     * @return {{ [key: string]: IManifestStoreEntry }}: A map of manifest IDs to manfiests.
     */
    ManifestStore.prototype.getManifestMap = function () {
        var result = {};
        this._manifests.forEach(function (value, key) { return result[key] = value; });
        return result;
    };
    /**
     * Loads additional manifests into the manifest store, updating existing manifests.
     *
     * @param {manifests} The manifests to load into the store.
     */
    ManifestStore.prototype.importManifests = function (manifests, overwriteExisting) {
        var _this = this;
        manifests.forEach(function (manifest) { return _this._addManifest(manifest, overwriteExisting); });
    };
    ManifestStore.prototype._getManifestFromStoreEntry = function (manifestEntry) {
        var allowDebug = SPModuleLoader_1.ensureDebugAllowed(false);
        if (manifestEntry) {
            if (allowDebug && manifestEntry.debugManifest) {
                return manifestEntry.debugManifest;
            }
            else {
                return manifestEntry.manifest;
            }
        }
        else {
            return undefined;
        }
    };
    ManifestStore.prototype._addManifest = function (manifest, overwriteExisting) {
        var existingEntry = this._manifests.get(manifest.id);
        this._enhanceManifest(manifest);
        if (existingEntry) {
            if (overwriteExisting || !existingEntry.manifest) {
                existingEntry.manifest = manifest;
            }
        }
        else {
            this._manifests.set(manifest.id, { id: manifest.id, manifest: manifest });
        }
    };
    // @TODO VSO#248541: remove this when server side change is in.
    ManifestStore.prototype._enhanceManifest = function (manifest) {
        var alias = ManifestStore._internalManifestMap[manifest.id];
        if (alias) {
            manifest.isInternal = true;
            if (!manifest.alias) {
                manifest.alias = alias;
            }
        }
        else {
            manifest.isInternal = false;
        }
    };
    // @TODO VSO#248541: remove this when server side change is in.
    // sorted by GUID order./
    ManifestStore._internalManifestMap = {
        '02a01e42-69ab-403d-8a16-acd128661f8e': 'OfficeUIFabricReact',
        '0ef418ba-5d19-4ade-9db0-b339873291d0': 'NewsfeedWebPart',
        '1c6c9123-7aac-41f3-a376-3caea41ed83f': 'SPModuleLoader',
        '1c4541f7-5c31-41aa-9fa8-fbc9dc14c0a8': 'SPPageContext',
        '243166f5-4dc3-4fe2-9df2-a7971b546a0a': 'ClientWebPart',
        '275c0095-a77e-4f6d-a2a0-6a7626911518': 'EmbeddedVideoWebPart',
        '31e9537e-f9dc-40a4-8834-0e3b7df418bc': 'YammerEmbedWebPart',
        '3be745e0-eb4e-4a48-8a39-fdf10af0ac79': 'QuickLinksWebPart',
        '4268b5b2-0ad2-11e6-b512-3e1d05defe78': 'EventsWebPart',
        '490d7c76-1824-45b2-9de3-676421c997fa': 'ContentEmbedWebPart',
        '4d5eb168-6729-49a8-aec7-0e397f486b6e': 'SPClientPreview',
        '4df9bb86-ab0a-4aab-ab5f-48bf167048fb': 'SPApplicationBase',
        '58fcd18b-e1af-4b0a-b23b-422c2c52d5a2': 'PowerBIReportEmbedWebPart',
        '6410b3b6-d440-4663-8744-378976dc041e': 'LinkPreviewWebPart',
        '6676088b-e28e-4a90-b9cb-d0d0303cd2eb': 'GroupCalendarWebPart',
        '6aeaab4a-4d96-47fe-a0c2-9e063a2efda4': 'ReactFlux',
        '73e1dc6c-8441-42cc-ad47-4bd3659f8a3a': 'SPLodashSubset',
        '8494e7d7-6b99-47b2-a741-59873e42f16f': 'SPComponentUtilities',
        '85093aa7-8c12-4683-91aa-47cd5e2654db': 'SPCanvas',
        '8be81a5c-af38-4bb2-af97-afa3b64dfbed': 'WebPartWorkbench',
        '91a50c94-865f-4f5c-8b4e-e49659e69772': 'QuickChartWebPart',
        '974a7777-0990-4136-8fa6-95d80114c2e0': 'SPWebPartBase',
        'a5df8fdf-b508-4b66-98a6-d83bc2597f63': 'NewsreelWebPart',
        'a81a5cf6-c9ad-4a0a-85aa-68c03d2d22a2': 'SPFilepicker',
        'a8c07ea7-3ee8-4376-8afa-e0c5098615eb': 'ClientBaseLodashOdspUtilities',
        'af59c2b3-2da7-41fd-8b72-3939817960af': 'SPClientBase',
        'af8be689-990e-492a-81f7-ba3e4cd3ed9c': 'ImageGalleryWebPart',
        'b6917cb1-93a0-4b97-a84d-7cf49975d4ec': 'PublishingPage',
        'b7dd04e1-19ce-4b24-9132-b60a1c2b910d': 'DocumentEmbedWebPart',
        'c07208f0-ea3b-4c1a-9965-ac1b825211a6': 'SPHttp',
        'c70391ea-0b10-4ee9-b2b4-006d3fcad0cd': 'PinnedItemsWebPart',
        'c83d5509-ccd5-4c67-919f-2440f237927a': 'I18nUtilities',
        'cc2cc925-b5be-41bb-880a-f0f8030c6aff': 'OdspUtilitiesBundle',
        'd1d91016-032f-456d-98a4-721247c305e8': 'ImageWebPart',
        'daf0b71c-6de8-4ef7-b511-faae7c388708': 'ContentRollupWebPart',
        'e377ea37-9047-43b9-8cdb-a761be2f8e09': 'BingMapWebPart',
        'e990b1eb-5816-42ed-afc5-4c8568db1196': 'WorldClockWebPart',
        'eb4b666b-5c29-4dad-9a99-23613f21a2b7': 'ClassicPageWebPartApplication',
        'eb95c819-ab8f-4689-bd03-0c2d65d47b1f': 'SiteActivityWebPart',
        'f97266fb-ccb7-430e-9384-4124d05295d3': 'Decorators'
    };
    return ManifestStore;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ManifestStore;

//# sourceMappingURL=ManifestStore.js.map
