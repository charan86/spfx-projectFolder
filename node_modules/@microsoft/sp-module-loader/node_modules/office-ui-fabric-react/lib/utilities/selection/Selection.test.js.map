{"version":3,"sources":["utilities/selection/Selection.test.ts"],"names":[],"mappings":"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","file":"utilities/selection/Selection.test.js","sourcesContent":["let { expect } = chai;\n\nimport { Selection, IObjectWithKey } from './index';\n\nlet setA = [ { key: 'a' }, { key: 'b' }, { key: 'c' } ];\nlet setB = [ { key: 'a' }, { key: 'd' }, { key: 'b' } ];\n\ndescribe('Selection', () => {\n\n  it('fires change events only when selection changes occur', () => {\n    let changeCount = 0;\n    let selection = new Selection({ onSelectionChanged: () => changeCount++ });\n\n    selection.setItems(setA, false);\n    expect(changeCount).equals(0, 'after setting set a');\n\n    selection.setKeySelected('a', true, true);\n    selection.setKeySelected('a', true, true);\n    selection.setIndexSelected(0, true, true);\n    expect(changeCount).equals(1, 'after selecting item a');\n\n    // Switch to set b, which also contains item a, in the same position. No change event should occur.\n    selection.setItems(setB, false);\n    expect(changeCount).equals(1, 'after switching to set b');\n\n    // Select b\n    selection.setKeySelected('b', true, true);\n    expect(changeCount).equals(2, 'after selecting b');\n\n    // Change back to set a, which has item b in a different index.\n    selection.setItems(setA, false);\n    expect(changeCount).equals(3, 'after changing back to set a');\n\n    // Change to set b, but clear it.\n    selection.setItems(setB, true);\n    expect(changeCount).equals(4, 'after switching to set b and clearing');\n\n    // Select an item in set b that doesn't exist in set a, then switch to set a.\n    selection.setKeySelected('d', true, true);\n    selection.setItems(setA, false);\n    expect(changeCount).equals(6, 'after selecting c and switching to set a');\n\n    // Select an item, clear, clear again.\n    selection.setAllSelected(true);\n    selection.setAllSelected(true);\n    selection.setAllSelected(false);\n    selection.setAllSelected(false);\n    expect(changeCount).equals(8, 'after selecting all 2 times and clearing 2 times');\n\n    selection.setIndexSelected(0, true, true);\n    selection.selectToIndex(2, true);\n    expect(changeCount).equals(10, 'after range selecting from 0 to 2');\n  });\n\n  it('returns false on isAllSelected when no items are selectable', () => {\n    let changeEvents = 0;\n    let selection = new Selection({\n      canSelectItem: (item: IObjectWithKey) => false,\n      onSelectionChanged: () => changeEvents++\n    });\n\n    selection.setItems(setA);\n\n    expect(selection.isAllSelected()).to.equal(false, 'isAllSelected was not false after initialization');\n\n    selection.setAllSelected(true);\n\n    expect(selection.isAllSelected()).to.equal(false, 'isAllSelected was not false after trying to select all the unselectables');\n\n    expect(changeEvents).to.equal(0, 'changeEvents were not 0');\n  });\n\n  it ('resets unselectable count on setting new items', () => {\n    let canSelect = false;\n    let selection = new Selection({\n      canSelectItem: (item: IObjectWithKey) => canSelect\n    });\n\n    selection.setItems(setA);\n    expect(selection.isAllSelected()).to.equal(false, 'isAllSelected was not false after initialization');\n    selection.setAllSelected(true);\n    expect(selection.isAllSelected()).to.equal(false, 'isAllSelected was not false after trying to select all the unselectables');\n\n    canSelect = true;\n    selection.setItems(setA);\n    selection.setAllSelected(true);\n    expect(selection.isAllSelected()).to.equal(true, 'isAllSelected was not false after trying to select all the unselectables');\n  });\n\n});"],"sourceRoot":"/src"}