{"version":3,"sources":["utilities/dom.test.ts"],"names":[],"mappings":";AAAA,oBAEO,OAAO,CAAC,CAAA;AAEP,wBAAM,CAAU;AAExB,IAAI,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAClD,IAAI,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAClD,IAAI,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC9C,IAAI,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAE7C,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AAEhC,QAAQ,CAAC,iBAAiB,EAAE;IAC1B,EAAE,CAAC,kBAAkB,EAAE;QACrB,MAAM,CAAC,qBAAe,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE;QAC5C,MAAM,CAAC,qBAAe,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;QACrC,MAAM,CAAC,qBAAe,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE;QACtC,MAAM,CAAC,qBAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE;QAC3C,MAAM,CAAC,qBAAe,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,WAAW,EAAE;IACpB,EAAE,CAAC,+CAA+C,EAAE;QAClD,IAAI,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAI,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAClD,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QACnC,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAEhC,MAAM,CAAC,eAAS,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,CAAC,eAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"utilities/dom.test.js","sourcesContent":["import {\n  elementContains, getParent\n} from './dom';\n\nconst { expect } = chai;\n\nlet unattachedSvg = document.createElement('svg');\nlet unattachedDiv = document.createElement('div');\nlet parentDiv = document.createElement('div');\nlet childDiv = document.createElement('div');\n\nparentDiv.appendChild(childDiv);\n\ndescribe('elementContains', () => {\n  it('can find a child', () => {\n    expect(elementContains(parentDiv, childDiv)).equals(true);\n  });\n\n  it('can return false on an unattached child', () => {\n    expect(elementContains(parentDiv, unattachedDiv)).equals(false);\n  });\n\n  it('can return false on a null child', () => {\n    expect(elementContains(parentDiv, null)).equals(false);\n  });\n\n  it('can return false on a null parent', () => {\n    expect(elementContains(null, null)).equals(false);\n  });\n\n  it('can return false when parent is an svg', () => {\n    expect(elementContains(unattachedSvg, unattachedDiv)).equals(false);\n  });\n});\n\ndescribe('getParent', () => {\n  it('returns correct parent for inner SVG elements', () => {\n    let childSvg = document.createElement('svg');\n    let svgRectangle = document.createElement('rect');\n    childSvg.appendChild(svgRectangle);\n    parentDiv.appendChild(childSvg);\n\n    expect(getParent(svgRectangle)).equals(childSvg);\n    expect(getParent(childSvg)).equals(parentDiv);\n  });\n});\n"],"sourceRoot":"/src"}