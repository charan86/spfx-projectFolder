{"version":3,"sources":["utilities/decorators/withViewport.tsx"],"names":[],"mappings":"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","file":"utilities/decorators/withViewport.js","sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent } from '../../utilities/scroll';\nimport { getRect } from '../../utilities/dom';\n\nexport interface IViewport {\n  width: number;\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\nconst RESIZE_DELAY = 500;\n\nexport function withViewport<P extends { viewport?: IViewport }, S>(ComposedComponent: (new (props: P, ...args: any[]) => React.Component<P, S>)): any {\n\n  return class WithViewportComponent extends BaseDecorator<P, IWithViewportState> {\n\n    public refs: {\n      [key: string]: React.ReactInstance;\n    };\n\n    constructor() {\n      super();\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0\n        }\n      };\n    }\n\n    public componentDidMount() {\n      this._onAsyncResize = this._async.debounce(\n        this._onAsyncResize,\n        RESIZE_DELAY,\n        {\n          leading: false\n        });\n\n      this._events.on(window, 'resize', this._onAsyncResize);\n      this._updateViewport();\n    }\n\n    public componentWillUnmount() {\n      this._events.dispose();\n    }\n\n    public render() {\n      let { viewport } = this.state;\n      let isViewportVisible = viewport.width > 0 && viewport.height > 0;\n\n      return (\n        <div className='ms-Viewport' ref='root' style={ { minWidth: 1, minHeight: 1 } }>\n          { isViewportVisible && (\n            <ComposedComponent ref={ this._updateComposedComponentRef } viewport={ viewport } { ...this.props } />\n          ) }\n        </div>\n      );\n    }\n\n    public forceUpdate() {\n      this._updateViewport(true);\n    }\n\n    private _onAsyncResize() {\n      this._updateViewport();\n    }\n\n    private _updateViewport(withForceUpdate?: boolean) {\n      let { viewport } = this.state;\n      let viewportElement = (this.refs as any).root;\n      let scrollElement = findScrollableParent(viewportElement);\n      let scrollRect = getRect(scrollElement);\n      let clientRect = getRect(viewportElement);\n      let updateComponent = () => {\n        if (withForceUpdate && this._composedComponentInstance) {\n          this._composedComponentInstance.forceUpdate();\n        }\n      };\n\n      let isSizeChanged = (\n        clientRect.width !== viewport.width ||\n        scrollRect.height !== viewport.height);\n\n      if (isSizeChanged) {\n        this.setState({\n          viewport: {\n            width: clientRect.width,\n            height: scrollRect.height\n          }\n        }, updateComponent);\n      } else {\n        updateComponent();\n      }\n    }\n  };\n}\n"],"sourceRoot":"/src"}