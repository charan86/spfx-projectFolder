{"version":3,"sources":["utilities/hoist.ts"],"names":[],"mappings":";AAAA,IAAM,0BAA0B,GAAG;IACjC,UAAU;IACV,QAAQ;IACR,oBAAoB;IACpB,mBAAmB;IACnB,2BAA2B;IAC3B,uBAAuB;IACvB,qBAAqB;IACrB,oBAAoB;IACpB,sBAAsB;CACvB,CAAC;AAEF;;;GAGG;AACH,sBAA6B,WAAW,EAAE,MAAM,EAAE,UAAuC;IAAvC,0BAAuC,GAAvC,uCAAuC;IACvF,IAAI,OAAO,GAAa,EAAE,CAAC;IAC3B;QACE,EAAE,CAAC,CACD,OAAO,MAAM,CAAC,UAAU,CAAC,KAAK,UAAU;YACxC,WAAW,CAAC,UAAU,CAAC,KAAK,SAAS;YACrC,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CACvD,CAAC,CAAC,CAAC;YACD,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACzB,2CAA2C;YAC3C,WAAW,CAAC,UAAU,CAAC,GAAG,cAAc,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAEzF,CAAC;;IAVH,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,MAAM,CAAC;;KAW7B;IAED,MAAM,CAAC,OAAO,CAAC;AACjB,CAAC;AAhBe,oBAAY,eAgB3B,CAAA;AAED;;;;GAIG;AACH,wBAA+B,MAAc,EAAE,WAAqB;IAClE,WAAW;SACR,OAAO,CAAC,UAAC,UAAU,IAAK,OAAA,OAAO,MAAM,CAAC,UAAU,CAAC,EAAzB,CAAyB,CAAC,CAAC;AACxD,CAAC;AAHe,sBAAc,iBAG7B,CAAA","file":"utilities/hoist.js","sourcesContent":["const REACT_LIFECYCLE_EXCLUSIONS = [\n  'setState',\n  'render',\n  'componentWillMount',\n  'componentDidMount',\n  'componentWillReceiveProps',\n  'shouldComponentUpdate',\n  'componentWillUpdate',\n  'componentDidUpdate',\n  'componentWillUnmount'\n];\n\n/**\n * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.\n * @returns {string[]} An array of names of methods that were hoisted.\n */\nexport function hoistMethods(destination, source, exclusions = REACT_LIFECYCLE_EXCLUSIONS): string[] {\n  let hoisted: string[] = [];\n  for (let methodName in source) {\n    if (\n      typeof source[methodName] === 'function' &&\n      destination[methodName] === undefined &&\n      (!exclusions || exclusions.indexOf(methodName) === -1)\n    ) {\n      hoisted.push(methodName);\n      /* tslint:disable:no-function-expression */\n      destination[methodName] = function () { source[methodName].apply(source, arguments); };\n      /* tslint:enable */\n    }\n  }\n\n  return hoisted;\n}\n\n/**\n * Provides a method for convenience to unhoist hoisted methods.\n * @param {Object} source The source object upon which methods were hoisted.\n * @param {string[]} methodNames An array of method names to unhoist.\n */\nexport function unhoistMethods(source: Object, methodNames: string[]): void {\n  methodNames\n    .forEach((methodName) => delete source[methodName]);\n}\n"],"sourceRoot":"/src"}