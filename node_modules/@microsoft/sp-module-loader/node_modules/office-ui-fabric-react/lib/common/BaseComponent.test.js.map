{"version":3,"sources":["common/BaseComponent.test.tsx"],"names":[],"mappings":";;;;;;AAAA,uCAAuC;AACvC,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sCAAsC;AAEtC,IAAY,cAAc,WAAM,yBAAyB,CAAC,CAAA;AAC1D,8BAA8B,iBAAiB,CAAC,CAAA;AAE1C,wBAAM,EAAE,oBAAM,CAAU;AAE9B,IAAI,gBAAgB,GAAG,6BAAa,CAAC,OAAO,CAAC;AAE7C;IAA4B,iCAAqB;IAAjD;QAA4B,8BAAqB;IAyCjD,CAAC;IAvCQ,0CAAkB,GAAzB;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,yCAAiB,GAAxB;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,6CAAqB,GAA5B;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,2CAAmB,GAA1B;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,iDAAyB,GAAhC;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,8BAAM,GAAb;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,0CAAkB,GAAzB;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,4CAAoB,GAA3B;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEO,sCAAc,GAAtB;QACE,IAAI,GAAG,GAAe,IAAI,CAAC;QAE3B,iBAAiB;QACjB,GAAG,EAAE,CAAC;IACR,CAAC;IACH,oBAAC;AAAD,CAzCA,AAyCC,CAzC2B,6BAAa,GAyCxC;AAED,QAAQ,CAAC,eAAe,EAAE;IACxB,SAAS,CAAC;QACR,6BAAa,CAAC,OAAO,GAAG,gBAAgB,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,aAAa,CAAC,oBAAoB,CAAC,CAAC;IACpC,aAAa,CAAC,mBAAmB,CAAC,CAAC;IACnC,aAAa,CAAC,uBAAuB,CAAC,CAAC;IACvC,aAAa,CAAC,qBAAqB,CAAC,CAAC;IACrC,aAAa,CAAC,2BAA2B,CAAC,CAAC;IAC3C,aAAa,CAAC,QAAQ,CAAC,CAAC;IACxB,aAAa,CAAC,oBAAoB,CAAC,CAAC;IACpC,aAAa,CAAC,sBAAsB,CAAC,CAAC;IAEtC,EAAE,CAAC,kBAAkB,EAAE;QACrB;YAAkB,uBAAqB;YAAvC;gBAAkB,8BAAqB;YAMvC,CAAC;YAHQ,oBAAM,GAAb;gBACE,MAAM,CAAC,qBAAC,GAAG,IAAC,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAG,EAAG,CAAC;YAClD,CAAC;YACH,UAAC;QAAD,CANA,AAMC,CANiB,6BAAa,GAM9B;QAED,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,GAAG,OAAG,CACD,CAAC;QAET,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;IAClC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,uBAAuB,UAAU;IAC/B,EAAE,CAAC,+BAA6B,UAAU,eAAY,EAAE;QACtD,IAAI,gBAAgB,GAAG,IAAI,CAAC;QAE5B,6BAAa,CAAC,OAAO,GAAG,UAAC,YAAY,EAAE,EAAE,IAAK,OAAA,gBAAgB,GAAG,YAAY,EAA/B,CAA+B,CAAC;QAE9E,IAAI,CAAC,GAAG,IAAI,aAAa,EAAE,CAAC;QAE5B,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;QAEhB,MAAM,CAAC,gBAAgB,KAAK,IAAI,EAAE,2BAA2B,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;AACL,CAAC","file":"common/BaseComponent.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\n\nimport * as ReactTestUtils from 'react-addons-test-utils';\nimport { BaseComponent } from './BaseComponent';\n\nlet { assert, expect } = chai;\n\nlet _originalOnError = BaseComponent.onError;\n\nclass TestComponent extends BaseComponent<{}, {}> {\n\n  public componentWillMount(): void {\n    this._createNullRef();\n  }\n\n  public componentDidMount(): void {\n    this._createNullRef();\n  }\n\n  public shouldComponentUpdate(): void {\n    this._createNullRef();\n  }\n\n  public componentWillUpdate(): void {\n    this._createNullRef();\n  }\n\n  public componentWillReceiveProps(): void {\n    this._createNullRef();\n  }\n\n  public render(): JSX.Element {\n    this._createNullRef();\n    return null;\n  }\n\n  public componentDidUpdate(): void {\n    this._createNullRef();\n  }\n\n  public componentWillUnmount(): void {\n    this._createNullRef();\n  }\n\n  private _createNullRef() {\n    let foo: () => void = null;\n\n    // Calling a null\n    foo();\n  }\n}\n\ndescribe('BaseComponent', () => {\n  afterEach(() => {\n    BaseComponent.onError = _originalOnError;\n  });\n\n  _buildTestFor('componentWillMount');\n  _buildTestFor('componentDidMount');\n  _buildTestFor('shouldComponentUpdate');\n  _buildTestFor('componentWillUpdate');\n  _buildTestFor('componentWillReceiveProps');\n  _buildTestFor('render');\n  _buildTestFor('componentDidUpdate');\n  _buildTestFor('componentWillUnmount');\n\n  it('can resolve refs', () => {\n    class Foo extends BaseComponent<{}, {}> {\n      public root: HTMLElement;\n\n      public render() {\n        return <div ref={ this._resolveRef('root') } />;\n      }\n    }\n\n    let component = ReactTestUtils.renderIntoDocument(\n      <Foo />\n    ) as any;\n\n    expect(component.root).to.exist;\n  });\n});\n\nfunction _buildTestFor(methodName) {\n  it(`calls the error logger on ${methodName} exception`, () => {\n    let lastErrorMessage = null;\n\n    BaseComponent.onError = (errorMessage, ex) => lastErrorMessage = errorMessage;\n\n    let c = new TestComponent();\n\n    c[methodName]();\n\n    assert(lastErrorMessage !== null, 'Error callback not called');\n  });\n}"],"sourceRoot":"/src"}