{"version":3,"sources":["demo/pages/ListPage/examples/List.Grid.Example.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sBAGO,mBAAmB,CAAC,CAAA;AAC3B,QAAO,0BAA0B,CAAC,CAAA;AAMlC,IAAM,aAAa,GAAG,CAAC,CAAC;AACxB,IAAM,cAAc,GAAG,GAAG,CAAC;AAE3B;IAAqC,mCAA2C;IAM9E;QACE,iBAAO,CAAC;QAER,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAEM,gCAAM,GAAb;QAAA,iBA6BC;QA5BC,MAAM,CAAC,CACL,oBAAC,iBAAS,QACR,oBAAC,YAAI,GACH,SAAS,EAAC,oBAAoB,EAC9B,KAAK,EAAG,IAAI,CAAC,KAAK,CAAC,KAAO,EAC1B,mBAAmB,EAAG,IAAI,CAAC,oBAAsB,EACjD,aAAa,EAAG,IAAI,CAAC,cAAgB,EACrC,oBAAoB,EAAG,CAAG,EAC1B,YAAY,EAAG,UAAC,IAAI,EAAE,KAAK,IAAK,OAAA,CAC9B,qBAAC,GAAG,IACF,SAAS,EAAC,yBAAyB,GACnC,iBAAiB,GAAG,IAAM,EAC1B,KAAK,EAAG;YACN,KAAK,EAAE,CAAC,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,GAAG,GAAG;SACrC,GACD,qBAAC,GAAG,IAAC,SAAS,EAAC,0BAA0B,GACvC,qBAAC,GAAG,IAAC,SAAS,EAAC,0BAA0B,GACvC,qBAAC,GAAG,IAAC,GAAG,EAAG,IAAI,CAAC,SAAW,EAAC,SAAS,EAAC,0BAA0B,EAAG,EACnE,qBAAC,IAAI,IAAC,SAAS,EAAC,0BAA0B,GACxC,UAAS,KAAU,CACd,CACH,CACF,CACJ,CACP,EAhB+B,CAgB7B,EACH,CACQ,CACb,CAAC;IACJ,CAAC;IAEO,8CAAoB,GAA5B,UAA6B,SAAiB,EAAE,WAAW;QACzD,EAAE,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,cAAc,CAAC,CAAC;YAClE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;YACtE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC;IAC3C,CAAC;IAEO,wCAAc,GAAtB,UAAuB,SAAiB,EAAE,WAAW;QACnD,MAAM,CAAC,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC;IACzC,CAAC;IACH,sBAAC;AAAD,CA1DA,AA0DC,CA1DoC,KAAK,CAAC,SAAS,GA0DnD;AA1DY,uBAAe,kBA0D3B,CAAA","file":"demo/pages/ListPage/examples/List.Grid.Example.js","sourcesContent":["import * as React from 'react';\nimport {\n  FocusZone,\n  List\n} from '../../../../index';\nimport './List.Grid.Example.scss';\n\nexport interface IListGridExampleProps {\n  items: any[];\n}\n\nconst ROWS_PER_PAGE = 3;\nconst MAX_ROW_HEIGHT = 250;\n\nexport class ListGridExample extends React.Component<IListGridExampleProps, any> {\n  private _positions;\n  private _columnCount: number;\n  private _columnWidth: number;\n  private _rowHeight: number;\n\n  constructor() {\n    super();\n\n    this._positions = {};\n    this._getItemCountForPage = this._getItemCountForPage.bind(this);\n    this._getPageHeight = this._getPageHeight.bind(this);\n  }\n\n  public render() {\n    return (\n      <FocusZone>\n        <List\n          className='ms-ListGridExample'\n          items={ this.props.items }\n          getItemCountForPage={ this._getItemCountForPage }\n          getPageHeight={ this._getPageHeight }\n          renderedWindowsAhead={ 4 }\n          onRenderCell={ (item, index) => (\n            <div\n              className='ms-ListGridExample-tile'\n              data-is-focusable={ true }\n              style={ {\n                width: (100 / this._columnCount) + '%'\n              } }>\n                <div className='ms-ListGridExample-sizer'>\n                  <div className='msListGridExample-padder'>\n                    <img src={ item.thumbnail } className='ms-ListGridExample-image' />\n                    <span className='ms-ListGridExample-label'>\n                    { `item ${ index }` }\n                    </span>\n                  </div>\n                </div>\n            </div>\n          ) }\n        />\n      </FocusZone>\n    );\n  }\n\n  private _getItemCountForPage(itemIndex: number, surfaceRect) {\n    if (itemIndex === 0) {\n      this._columnCount = Math.ceil(surfaceRect.width / MAX_ROW_HEIGHT);\n      this._columnWidth = Math.floor(surfaceRect.width / this._columnCount);\n      this._rowHeight = this._columnWidth;\n    }\n\n    return this._columnCount * ROWS_PER_PAGE;\n  }\n\n  private _getPageHeight(itemIndex: number, surfaceRect) {\n    return this._rowHeight * ROWS_PER_PAGE;\n  }\n}"],"sourceRoot":"/src"}