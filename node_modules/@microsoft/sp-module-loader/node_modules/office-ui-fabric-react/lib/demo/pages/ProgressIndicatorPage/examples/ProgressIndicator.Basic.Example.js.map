{"version":3,"sources":["demo/pages/ProgressIndicatorPage/examples/ProgressIndicator.Basic.Example.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sBAEO,mBAAmB,CAAC,CAAA;AAC3B,sBAAsB,mCAAmC,CAAC,CAAA;AAM1D,IAAM,cAAc,GAAW,GAAG,CAAC;AACnC,IAAM,kBAAkB,GAAW,GAAG,CAAC;AACvC,IAAM,iBAAiB,GAAW,IAAI,CAAC;AAEvC;IAAmD,iDAAyD;IAK1G;QACE,iBAAO,CAAC;QAER,IAAI,CAAC,MAAM,GAAG,IAAI,aAAK,CAAC,IAAI,CAAC,CAAC;QAE9B,IAAI,CAAC,KAAK,GAAG;YACT,eAAe,EAAE,CAAC;SACrB,CAAC;QACF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/D,CAAC;IAEM,yDAAiB,GAAxB;QACE,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAEM,4DAAoB,GAA3B;QACE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAEM,8CAAM,GAAb;QACQ,gDAAe,CAAgB;QAErC,MAAM,CAAC,CACL,oBAAC,yBAAiB,GAChB,KAAK,EAAC,eAAe,EACrB,WAAW,EAAC,qBAAqB,EACjC,eAAe,EAAG,eAAiB,EAAG,CACzC,CAAC;IACJ,CAAC;IAEO,0DAAkB,GAA1B;QAAA,iBAoBC;QAnBC,iBAAiB;QACjB,IAAI,CAAC,QAAQ,CAAC;YACV,eAAe,EAAE,CAAC;SACrB,CAAC,CAAC;QAEH,kBAAkB;QAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;YACvC,IAAI,eAAe,GAAG,KAAI,CAAC,KAAK,CAAC,eAAe,GAAG,kBAAkB,CAAC;YAEtE,6CAA6C;YAC7C,EAAE,CAAC,CAAC,eAAe,IAAI,GAAG,CAAC,CAAC,CAAC;gBAC3B,eAAe,GAAG,GAAG,CAAC;gBACtB,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;gBAC1C,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAI,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;YACrE,CAAC;YACD,KAAI,CAAC,QAAQ,CAAC;gBACV,eAAe,EAAE,eAAe;aACnC,CAAC,CAAC;QACL,CAAC,EAAE,cAAc,CAAC,CAAC;IACrB,CAAC;IACH,oCAAC;AAAD,CAxDA,AAwDC,CAxDkD,KAAK,CAAC,SAAS,GAwDjE;AAxDY,qCAA6B,gCAwDzC,CAAA","file":"demo/pages/ProgressIndicatorPage/examples/ProgressIndicator.Basic.Example.js","sourcesContent":["import * as React from 'react';\nimport {\n  ProgressIndicator\n} from '../../../../index';\nimport { Async } from '../../../../utilities/Async/Async';\n\nexport interface IProgressIndicatorBasicExampleState {\n    percentComplete: number;\n}\n\nconst INTERVAL_DELAY: number = 100;\nconst INTERVAL_INCREMENT: number = .01;\nconst RESTART_WAIT_TIME: number = 2000;\n\nexport class ProgressIndicatorBasicExample extends React.Component<any, IProgressIndicatorBasicExampleState> {\n\n  private _interval: number;\n  private _async: Async;\n\n  constructor() {\n    super();\n\n    this._async = new Async(this);\n\n    this.state = {\n        percentComplete: 0\n    };\n    this._startProgressDemo = this._startProgressDemo.bind(this);\n  }\n\n  public componentDidMount() {\n    this._startProgressDemo();\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public render() {\n    let { percentComplete } = this.state;\n\n    return (\n      <ProgressIndicator\n        title='Example title'\n        description='Example description'\n        percentComplete={ percentComplete } />\n    );\n  }\n\n  private _startProgressDemo() {\n    // reset the demo\n    this.setState({\n        percentComplete: 0\n    });\n\n    // update progress\n    this._interval = this._async.setInterval(() => {\n      let percentComplete = this.state.percentComplete + INTERVAL_INCREMENT;\n\n      // once complete, set the demo to start again\n      if (percentComplete >= 1.0) {\n        percentComplete = 1.0;\n        this._async.clearInterval(this._interval);\n        this._async.setTimeout(this._startProgressDemo, RESTART_WAIT_TIME);\n      }\n      this.setState({\n          percentComplete: percentComplete\n      });\n    }, INTERVAL_DELAY);\n  }\n}\n"],"sourceRoot":"/src"}