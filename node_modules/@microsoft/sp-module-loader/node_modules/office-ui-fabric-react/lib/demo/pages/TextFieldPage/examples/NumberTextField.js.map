{"version":3,"sources":["demo/pages/TextFieldPage/examples/NumberTextField.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sBAGO,mBAAmB,CAAC,CAAA;AAC3B,QAAO,wBAAwB,CAAC,CAAA;AAWhC;IAAqC,mCAA6D;IAChG,yBAAY,KAAK;QACf,kBAAM,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEvD,IAAI,CAAC,KAAK,GAAG;YACX,KAAK,EAAE,KAAK,CAAC,YAAY;SAC1B,CAAC;IACJ,CAAC;IAEM,gCAAM,GAAb;QACE,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAC,iBAAiB,GAC9B,oBAAC,iBAAS,GACR,SAAS,EAAC,2BAA2B,EACrC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAM,EACxB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAM,EACxB,SAAS,EAAE,IAAI,CAAC,UAAW,EAC3B,iBAAiB,EAAE,IAAI,CAAC,eAAgB,EACxC,EACF,qBAAC,GAAG,IAAC,SAAS,EAAC,+BAA+B,GAC5C,oBAAC,cAAM,GAAC,OAAO,EAAE,IAAI,CAAC,QAAS,aAEtB,CACL,CACF,CACP,CAAC;IACJ,CAAC;IAEO,yCAAe,GAAvB,UAAwB,KAAa;QACnC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;cACvB,6CAA2C,KAAK,MAAG;cACnD,EAAE,CAAC;IACT,CAAC;IAEO,oCAAU,GAAlB,UAAmB,KAAa;QAC9B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACnB,OAAA,KAAK;SACN,CAAC,CAAC;IACL,CAAC;IAEO,kCAAQ,GAAhB;QACE,IAAI,CAAC,QAAQ,CAAC;YACZ,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;SAC/B,CAAC,CAAC;IACL,CAAC;IACH,sBAAC;AAAD,CAjDA,AAiDC,CAjDoC,KAAK,CAAC,SAAS,GAiDnD;AAjDY,uBAAe,kBAiD3B,CAAA","file":"demo/pages/TextFieldPage/examples/NumberTextField.js","sourcesContent":["import * as React from 'react';\nimport {\n  Button,\n  TextField\n} from '../../../../index';\nimport './NumberTextField.scss';\n\nexport interface INumberTextFieldProps {\n  label: string;\n  initialValue: string;\n}\n\nexport interface INumberTextFieldState {\n  value: string;\n}\n\nexport class NumberTextField extends React.Component<INumberTextFieldProps, INumberTextFieldState> {\n  constructor(props) {\n    super(props);\n\n    this._restore = this._restore.bind(this);\n    this._onChanged = this._onChanged.bind(this);\n    this._validateNumber = this._validateNumber.bind(this);\n\n    this.state = {\n      value: props.initialValue\n    };\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div className='NumberTextField'>\n        <TextField\n          className='NumberTextField-textField'\n          label={this.props.label}\n          value={this.state.value}\n          onChanged={this._onChanged}\n          onGetErrorMessage={this._validateNumber}\n        />\n        <div className='NumberTextField-restoreButton'>\n          <Button onClick={this._restore}>\n            Restore\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  private _validateNumber(value: string): string {\n    return isNaN(Number(value))\n      ? `The value should be a number, actual is ${value}.`\n      : '';\n  }\n\n  private _onChanged(value: string): void {\n    return this.setState({\n      value\n    });\n  }\n\n  private _restore(): void {\n    this.setState({\n      value: this.props.initialValue\n    });\n  }\n}\n"],"sourceRoot":"/src"}