{"version":3,"sources":["demo/pages/Facepile/FacepilePage.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sBAIO,wBAAwB,CAAC,CAAA;AAEhC,uCAAqC,mCAAmC,CAAC,CAAA;AACzE,0BAAsC,2BAA2B,CAAC,CAAA;AAClE,yBAAyB,+BAA+B,CAAC,CAAA;AAGzD,IAAM,wBAAwB,GAAG,OAAO,CAAC,uCAAuC,CAAC,CAAC;AAElF;IAAkC,gCAA6C;IAG7E;QACE,iBAAO,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,iCAAqB,CAAC,mBAAQ,EAAE,kBAAkB,EAAE,UAAU,CAAC,CAAC;IAC9E,CAAC;IAEM,6BAAM,GAAb;QACE,MAAM,CAAC,CACL,oBAAC,qBAAa,GACZ,KAAK,EAAC,UAAU,EAChB,aAAa,EAAC,iBAAiB,EAC/B,YAAY,EACV,oBAAC,mBAAW,GAAC,KAAK,EAAC,UAAU,EAAC,IAAI,EAAG,wBAA0B,GAC7D,oBAAC,6CAAoB,OAAG,CAE3B,EACD,gBAAgB,EACd,oBAAC,0BAAkB,GAAC,aAAa,EAAC,UAAU,EAC7C,EACD,QAAQ,EACN,qBAAC,GAAG,SACF,qBAAC,CAAC,kQAEE,EAEJ,qBAAC,EAAE,IAAC,SAAS,EAAC,YAAY,mBAAmB,EAC7C,qBAAC,CAAC,8GAEE,EAEJ,qBAAC,EAAE,IAAC,SAAS,EAAC,YAAY,iBAAiB,EAC3C,qBAAC,CAAC,wQAEE,EAEJ,qBAAC,EAAE,IAAC,SAAS,EAAC,YAAY,gBAAgB,EAC1C,qBAAC,CAAC,kHAEE,EAEJ,qBAAC,EAAE,IAAC,SAAS,EAAC,YAAY,kDAAkD,EAE5E,qBAAC,CAAC,uMAEE,EAEJ,qBAAC,EAAE,IAAC,SAAS,EAAC,YAAY,cAAc,EAExC,qBAAC,CAAC,8NAEE,CAGP,EACD,aAAa,EACX,qBAAC,GAAG,QACL,EACD,GAAG,EACD,qBAAC,GAAG,SACF,qBAAC,EAAE,SACD,qBAAC,EAAE,6HAAuH,EAC1H,qBAAC,EAAE,mEAA6D,EAChE,qBAAC,EAAE,8KAAwK,CACxK,CAER,EACD,KAAK,EACH,qBAAC,GAAG,SACF,qBAAC,EAAE,SACD,qBAAC,EAAE,6CAAuC,EAC1C,qBAAC,EAAE,2HAAqH,EACxH,qBAAC,EAAE,kJAA4I,CAC5I,CAER,EACD,OAAO,EACL,qBAAC,CAAC,IAAC,IAAI,EAAC,4FAA4F,eACrG,EACD,KAAK,EAAG,IAAI,CAAC,IAAM,EACnB,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAiB,EAChC,CACjB,CAAC;IACJ,CAAC;IACH,mBAAC;AAAD,CArFA,AAqFC,CArFiC,KAAK,CAAC,SAAS,GAqFhD;AArFY,oBAAY,eAqFxB,CAAA","file":"demo/pages/Facepile/FacepilePage.js","sourcesContent":["import * as React from 'react';\nimport {\n  ExampleCard,\n  PropertiesTableSet,\n  ComponentPage\n} from '../../components/index';\n\nimport { FacepileBasicExample } from './examples/Facepile.Basic.Example';\nimport { getPageRouteFromState } from '../../utilities/pageroute';\nimport { AppState } from '../../components/App/AppState';\nimport { IComponentDemoPageProps } from '../../components/ComponentPage/IComponentDemoPageProps';\n\nconst FacepileBasicExampleCode = require('./examples/Facepile.Basic.Example.tsx');\n\nexport class FacepilePage extends React.Component<IComponentDemoPageProps, any> {\n  private _url: string;\n\n  constructor() {\n    super();\n    this._url = getPageRouteFromState(AppState, 'Basic components', 'Facepile');\n  }\n\n  public render() {\n    return (\n      <ComponentPage\n        title='Facepile'\n        componentName='FacepileExample'\n        exampleCards={\n          <ExampleCard title='Facepile' code={ FacepileBasicExampleCode }>\n            <FacepileBasicExample />\n          </ExampleCard>\n        }\n        propertiesTables={\n          <PropertiesTableSet componentName='Facepile' />\n        }\n        overview={\n          <div>\n            <p>\n              The Facepile shows a list of faces or initials in a horizontal lockup. Each circle represents a person. Many times this component is used when sharing who has access to a specific view or file or when assigning a user to a task within a workflow.\n            </p>\n\n            <h2 className='ms-font-xl'>Adding people</h2>\n            <p>\n              The component can include an add button which can be used for quickly adding a person to the list.\n            </p>\n\n            <h2 className='ms-font-xl'>Empty state</h2>\n            <p>\n              The empty state of the Facepile should include only an add button. Another variant is to use an input field with placeholder text instructing the user to add a person. See the PeoplePicker component for the menu used to add people to the Facepile list.\n            </p>\n\n            <h2 className='ms-font-xl'>One person</h2>\n            <p>\n              When there is only one person in the Facepile, consider using their name next to the face or initials.\n            </p>\n\n            <h2 className='ms-font-xl'>Expanding the list when there is no overflow</h2>\n\n            <p>\n              When there is a need to show the Facepile expanded into a vertical list, include a downward chevron button. Clicking or tapping on the chevron would open a standard list view of personas.\n            </p>\n\n            <h2 className='ms-font-xl'>Overflow</h2>\n\n            <p>\n              When the Facepile exceeds a max number of 5 people, show a button at the end of the list indicating how many are not being shown. Clicking or tapping on the overflow would open a standard list view of personas.\n            </p>\n\n          </div>\n        }\n        bestPractices={\n          <div></div>\n        }\n        dos={\n          <div>\n            <ul>\n              <li>Use if looking for a way to represent who has access to an area and need to show that as a people representation.</li>\n              <li>Only show the Add button if a user has access to do so.</li>\n              <li>Allow a way for the user to understand who the person is. Many common ways to do this are with a tooltip or adding the ability to open up a PeopleCard Experience.</li>\n            </ul>\n          </div>\n        }\n        donts={\n          <div>\n            <ul>\n              <li>Use for things other than people.</li>\n              <li>Overwhelm users by listing every single person as a circle but truncate and provide a way to see the full list.</li>\n              <li>Donâ€™t use this control for experiences where you need to manage details of hundreds of users, you are better off using a list control.</li>\n            </ul>\n          </div>\n        }\n        related={\n          <a href='https://github.com/OfficeDev/office-ui-fabric-js/blob/master/ghdocs/components/FacePile.md'>Fabric JS</a>\n        }\n        route={ this._url }\n        isHeaderVisible={ this.props.isHeaderVisible }>\n      </ComponentPage>\n    );\n  }\n}\n"],"sourceRoot":"/src"}