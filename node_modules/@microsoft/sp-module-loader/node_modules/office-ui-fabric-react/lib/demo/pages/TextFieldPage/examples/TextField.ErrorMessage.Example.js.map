{"version":3,"sources":["demo/pages/TextFieldPage/examples/TextField.ErrorMessage.Example.tsx"],"names":[],"mappings":";;;;;;AAAA,QAAO,aAAa,CAAC,CAAA;AACrB,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sBAEO,mBAAmB,CAAC,CAAA;AAC3B,gCAAgC,mBAAmB,CAAC,CAAA;AAEpD;IAAkD,gDAAuB;IACvE,sCAAmB,KAAU;QAC3B,kBAAM,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzE,CAAC;IAEM,6CAAM,GAAb;QACE,MAAM,CAAC,CACL,qBAAC,GAAG,SACF,oBAAC,iBAAS,GACR,KAAK,EAAC,oGAAoG,EAC1G,iBAAiB,EAAG,IAAI,CAAC,gBAAkB,EAC3C,EACF,oBAAC,iBAAS,GACR,KAAK,EAAC,qGAAqG,EAC3G,iBAAiB,EAAG,IAAI,CAAC,uBAAyB,EAClD,EACF,oBAAC,iBAAS,GACR,KAAK,EAAC,oGAAoG,EAC1G,KAAK,EAAC,qEAAqE,EAC3E,iBAAiB,EAAG,IAAI,CAAC,gBAAkB,EAC3C,EACF,oBAAC,iBAAS,GACR,KAAK,EAAC,qGAAqG,EAC3G,KAAK,EAAC,kFAAkF,EACxF,iBAAiB,EAAG,IAAI,CAAC,uBAAyB,EAClD,EACF,oBAAC,iBAAS,GACR,KAAK,EAAC,mDAAmD,EACzD,KAAK,EAAC,0EAA0E,EAChF,WAAW,EAAC,wEAAwE,EACpF,iBAAiB,EAAG,IAAI,CAAC,gBAAkB,EAC3C,EACF,oBAAC,iBAAS,GACR,KAAK,EAAC,oGAAoG,EAC1G,WAAW,EAAC,8DAA8D,EAC1E,iBAAiB,EAAG,IAAI,CAAC,gBAAkB,EAC3C,sBAAsB,EAAG,IAAM,EAC/B,EACF,oBAAC,iCAAe,GACd,KAAK,EAAC,2CAA2C,EACjD,YAAY,EAAC,KAAK,EAClB,EACF,oBAAC,iCAAe,GACd,KAAK,EAAC,6CAA6C,EACnD,YAAY,EAAC,cAAc,EAC3B,CACE,CACP,CAAC;IACJ,CAAC;IAEO,uDAAgB,GAAxB,UAAyB,KAAa;QACpC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;cACnB,EAAE;cACF,iEAA+D,KAAK,CAAC,MAAM,MAAG,CAAC;IACrF,CAAC;IAEO,8DAAuB,GAA/B,UAAgC,KAAa;QAA7C,iBAKC;QAJC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO;YACzB,sCAAsC;YACtC,UAAU,CAAC,cAAM,OAAA,OAAO,CAAC,KAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAArC,CAAqC,EAAE,IAAI,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC;IACH,mCAAC;AAAD,CAjEA,AAiEC,CAjEiD,KAAK,CAAC,SAAS,GAiEhE;AAjEY,oCAA4B,+BAiExC,CAAA","file":"demo/pages/TextFieldPage/examples/TextField.ErrorMessage.Example.js","sourcesContent":["import 'es6-promise';\nimport * as React from 'react';\nimport {\n  TextField\n} from '../../../../index';\nimport { NumberTextField } from './NumberTextField';\n\nexport class TextFieldErrorMessageExample extends React.Component<{}, {}> {\n  public constructor(props: any) {\n    super(props);\n\n    this._getErrorMessage = this._getErrorMessage.bind(this);\n    this._getErrorMessagePromise = this._getErrorMessagePromise.bind(this);\n  }\n\n  public render() {\n    return (\n      <div>\n        <TextField\n          label='TextField with a string-based validator. Hint: the length of the input string must be less than 3.'\n          onGetErrorMessage={ this._getErrorMessage }\n        />\n        <TextField\n          label='TextField with a Promise-based validator. Hint: the length of the input string must be less than 3.'\n          onGetErrorMessage={ this._getErrorMessagePromise }\n        />\n        <TextField\n          label='TextField with a string-based validator. Hint: the length of the input string must be less than 3.'\n          value='It should show an error message under this error message on render.'\n          onGetErrorMessage={ this._getErrorMessage }\n        />\n        <TextField\n          label='TextField with a Promise-based validator. Hint: the length of the input string must be less than 3.'\n          value='It should show an error message under this error message 5 seconds after render.'\n          onGetErrorMessage={ this._getErrorMessagePromise }\n        />\n        <TextField\n          label='TextField has both description and error message.'\n          value='It should show description and error message on render at the same time.'\n          description='This field has description and error message both under the input box.'\n          onGetErrorMessage={ this._getErrorMessage }\n        />\n        <TextField\n          label='TextField with a string-based validator. Hint: the length of the input string must be less than 3.'\n          placeholder='Validation will start after users stop typing for 2 seconds.'\n          onGetErrorMessage={ this._getErrorMessage }\n          deferredValidationTime={ 2000 }\n        />\n        <NumberTextField\n          label='Number TextField with valid initial value'\n          initialValue='100'\n        />\n        <NumberTextField\n          label='Number TextField with invalid initial value'\n          initialValue='Not a number'\n        />\n      </div>\n    );\n  }\n\n  private _getErrorMessage(value: string): string {\n    return value.length < 3\n      ? ''\n      : `The length of the input value should less than 3, actual is ${value.length}.`;\n  }\n\n  private _getErrorMessagePromise(value: string): Promise<string> {\n    return new Promise((resolve) => {\n      // resolve the promise after 3 second.\n      setTimeout(() => resolve(this._getErrorMessage(value)), 5000);\n    });\n  }\n}\n"],"sourceRoot":"/src"}