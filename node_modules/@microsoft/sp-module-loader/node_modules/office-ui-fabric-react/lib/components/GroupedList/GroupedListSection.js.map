{"version":3,"sources":["components/GroupedList/GroupedListSection.tsx"],"names":[],"mappings":"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","file":"components/GroupedList/GroupedListSection.js","sourcesContent":["import * as React from 'react';\nimport {\n  IGroup,\n  IGroupDividerProps\n} from './GroupedList.Props';\n\nimport {\n  IDragDropContext,\n  IDragDropEvents,\n  IDragDropHelper\n} from '../../utilities/dragdrop/index';\n\nimport {\n  BaseComponent,\n  autobind\n} from '../../Utilities';\n\nimport {\n  ISelection,\n  SelectionMode\n} from '../../utilities/selection/index';\n\nimport { GroupFooter } from './GroupFooter';\nimport { GroupHeader } from './GroupHeader';\n\nimport {\n  List\n} from '../../List';\nimport {\n  IDragDropOptions\n} from './../../utilities/dragdrop/interfaces';\nimport { assign, css } from '../../Utilities';\nimport { IViewport } from '../../utilities/decorators/withViewport';\n\nexport interface IGroupedListSectionProps extends React.Props<GroupedListSection> {\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: [{ eventName: string, callback: (context: IDragDropContext, event?: any) => void }];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupDividerProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupDividerProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: any;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (\n    nestingDepth?: number,\n    item?: any,\n    index?: number\n  ) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: (props?: IGroupDividerProps, defaultRender?: (props?: IGroupDividerProps) => JSX.Element) => JSX.Element;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: (props?: IGroupDividerProps, defaultRender?: (props?: IGroupDividerProps) => JSX.Element) => JSX.Element;\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends BaseComponent<IGroupedListSectionProps, IGroupedListSectionState> {\n  public refs: {\n    [key: string]: React.ReactInstance,\n    root: HTMLElement,\n    list: List\n  };\n\n  private _subGroups: {\n    [key: string]: GroupedListSection;\n  };\n  private _dragDropKey: string;\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    this._subGroups = {};\n    this.state = {\n      isDropping: false\n    };\n  }\n\n  public componentDidMount() {\n    let { dragDropHelper } = this.props;\n\n    if (dragDropHelper) {\n      dragDropHelper.subscribe(this.refs.root, this._events, this._getGroupDragDropOptions());\n    }\n  }\n\n  public componentWillUnmount() {\n    let { dragDropHelper } = this.props;\n\n    if (dragDropHelper) {\n      dragDropHelper.unsubscribe(this.refs.root, this._dragDropKey);\n    }\n  }\n\n  public render() {\n    let {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupFooter = this._onRenderGroupFooter\n    } = this.props;\n    let renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    let isFooterVisible = group && !group.children && !group.isCollapsed && !group.isShowingAll && group.count > renderCount;\n    let hasNestedGroups = group && group.children && group.children.length > 0;\n\n    let dividerProps: IGroupDividerProps = {\n      group: group,\n      groupIndex: groupIndex,\n      groupLevel: group ? group.level : 0,\n      viewport: viewport,\n      selectionMode: selectionMode\n    };\n    let groupHeaderProps: IGroupDividerProps = assign({}, headerProps, dividerProps);\n    let groupFooterProps: IGroupDividerProps = assign({}, footerProps, dividerProps);\n\n    return (\n      <div\n        ref='root'\n        className={ css('ms-GroupedList-group', this._getDroppingClassName()) }\n        >\n        { onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader) }\n        {\n          group && group.isCollapsed ?\n            null :\n            (\n              hasNestedGroups ?\n                (\n                  <List\n                    ref='list'\n                    items={ group.children }\n                    onRenderCell={ this._renderSubGroup }\n                    getItemCountForPage={ () => 1 }\n                    />\n                ) :\n                this._onRenderGroup(renderCount)\n            )\n        }\n        { isFooterVisible && onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter) }\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    let { group } = this.props;\n\n    if (this.refs.list) {\n      this.refs.list.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        let subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          let subGroup = this.refs.list.refs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      let subGroup = this.refs['subGroup_' + String(0)] as GroupedListSection;\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  @autobind\n  private _onRenderGroupHeader(props: IGroupDividerProps) {\n    return <GroupHeader { ...props } />;\n  }\n\n  @autobind\n  private _onRenderGroupFooter(props: IGroupDividerProps) {\n    return <GroupFooter { ...props } />;\n  }\n\n  private _onRenderGroup(renderCount: number) {\n    let {\n      group,\n      items,\n      onRenderCell,\n      listProps,\n      groupNestingDepth\n    } = this.props;\n    let count = group ? group.count : items.length;\n    let startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        items={ items }\n        onRenderCell={ (item, itemIndex) => onRenderCell(groupNestingDepth, item, itemIndex) }\n        ref={ 'list' }\n        renderCount={ Math.min(count, renderCount) }\n        startIndex={ startIndex }\n        { ...listProps }\n        />\n    );\n  }\n\n  @autobind\n  private _renderSubGroup(subGroup, subGroupIndex) {\n    let {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      items,\n      headerProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport\n    } = this.props;\n\n    return (!subGroup || subGroup.count > 0) ? (\n      <GroupedListSection\n        ref={ 'subGroup_' + subGroupIndex }\n        key={ this._getGroupKey(subGroup, subGroupIndex) }\n        dragDropEvents={ dragDropEvents }\n        dragDropHelper={ dragDropHelper }\n        eventsToRegister={ eventsToRegister }\n        footerProps={ footerProps }\n        getGroupItemLimit={ getGroupItemLimit }\n        group={ subGroup }\n        groupIndex={ subGroupIndex }\n        groupNestingDepth={ groupNestingDepth }\n        headerProps={ headerProps }\n        items={ items }\n        listProps={ listProps }\n        onRenderCell={ onRenderCell }\n        selection={ selection }\n        selectionMode={ selectionMode }\n        viewport={ viewport }\n        />\n    ) : null;\n  }\n\n  private _getGroupKey(group: IGroup, groupIndex: number): string {\n    return 'group-' + (group ?\n      group.key + '-' + group.count :\n      '');\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  @autobind\n  private _getGroupDragDropOptions(): IDragDropOptions {\n    let { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    this._dragDropKey = 'group-' + (group ? group.key : String(groupIndex));\n    let options = {\n      key: this._dragDropKey,\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      canDrag: () => { return false; }, // cannot drag groups\n      canDrop: dragDropEvents.canDrop,\n      onDragStart: null,\n      updateDropState: this._updateDroppingState\n    };\n    return options;\n  }\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @private\n   * @param {boolean} newValue (new isDropping state value)\n   * @param {DragEvent} event (the event trigger dropping state change which can be dragenter, dragleave etc)\n   */\n  @autobind\n  private _updateDroppingState(newIsDropping: boolean, event: DragEvent) {\n    let { isDropping } = this.state;\n    let { dragDropEvents } = this.props;\n\n    if (!isDropping) {\n      if (dragDropEvents.onDragLeave) {\n        dragDropEvents.onDragLeave(event, null);\n      }\n    } else {\n      if (dragDropEvents.onDragEnter) {\n        dragDropEvents.onDragEnter(event, null);\n      }\n    }\n\n    if (isDropping !== newIsDropping) {\n      this.setState({ isDropping: newIsDropping });\n    }\n  }\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    let { group } = this.props;\n\n    let droppingClass = group && isDropping ? DEFAULT_DROPPING_CSS_CLASS : '';\n    return droppingClass;\n  }\n}\n"],"sourceRoot":"/src"}