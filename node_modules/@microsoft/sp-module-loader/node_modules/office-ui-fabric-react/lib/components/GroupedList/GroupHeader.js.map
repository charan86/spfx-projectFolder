{"version":3,"sources":["components/GroupedList/GroupHeader.tsx"],"names":[],"mappings":"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","file":"components/GroupedList/GroupHeader.js","sourcesContent":["import * as React from 'react';\nimport {\n  IGroupDividerProps\n} from './index';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { Check } from '../Check/Check';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { css } from '../../utilities/css';\nimport { autobind } from '../../utilities/autobind';\nimport './GroupHeader.scss';\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeader extends React.Component<IGroupDividerProps, IGroupHeaderState> {\n  constructor(props: IGroupDividerProps) {\n    super(props);\n\n    this.state = {\n      isCollapsed: this.props.group && this.props.group.isCollapsed,\n      isLoadingVisible: false\n    };\n  }\n\n  public componentWillReceiveProps(newProps) {\n    if (newProps.group) {\n      let newCollapsed = newProps.group.isCollapsed;\n      let isGroupLoading = newProps.headerProps && newProps.headerProps.isGroupLoading;\n      let newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(newProps.group);\n\n      this.setState({\n        isCollapsed: newCollapsed,\n        isLoadingVisible: newLoadingVisible\n      });\n    }\n  }\n\n  public render() {\n    let {\n      group,\n      groupLevel,\n      viewport,\n      selectionMode,\n      loadingText,\n      isCollapsedGroupSelectVisible\n    } = this.props;\n    let { isCollapsed, isLoadingVisible } = this.state;\n\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    let canSelectGroup = selectionMode === SelectionMode.multiple;\n    let isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    let isSelected = group && group.isSelected && isSelectionCheckVisible;\n\n    return group && (\n      <div\n        className={ css('ms-GroupHeader', {\n          'is-selected': isSelected\n        }) }\n        style={ viewport ? { minWidth: viewport.width } : {} }\n        onClick={ this._onHeaderClick }\n        aria-label={ group.ariaLabel || group.name }\n        data-is-focusable={ true } >\n\n        <FocusZone direction={ FocusZoneDirection.horizontal }>\n\n          { isSelectionCheckVisible ? (\n            <button\n              className='ms-GroupHeader-check'\n              data-selection-toggle={ true }\n              onClick={ this._onToggleSelectGroupClick } >\n              <Check isChecked={ isSelected } />\n            </button>\n          ) : (selectionMode !== SelectionMode.none ? GroupSpacer({ count: 1 }) : null)\n          }\n\n          { GroupSpacer({ count: groupLevel }) }\n\n          <div className='ms-GroupHeader-dropIcon'><i className='ms-Icon ms-Icon--Tag'></i></div>\n          <button className='ms-GroupHeader-expand' onClick={ this._onToggleCollapse }>\n            <i className={ css('ms-Icon ms-Icon--ChevronDown', {\n              'is-collapsed': isCollapsed\n            }) } />\n          </button>\n\n          <div className='ms-GroupHeader-title ms-font-xl'>\n            <span>{ group.name } </span>\n            <span>({ group.count }) </span>\n          </div>\n\n          <div className={ css('ms-GroupHeader-loading', { 'is-loading': isLoadingVisible }) }>\n            <Spinner label={ loadingText } />\n          </div>\n\n        </FocusZone>\n      </div>\n    );\n  }\n\n  @autobind\n  private _onToggleCollapse(ev: React.MouseEvent) {\n    let { group, onToggleCollapse, isGroupLoading } = this.props;\n    let { isCollapsed } = this.state;\n\n    let newCollapsed = !isCollapsed;\n    let newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group);\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n  @autobind\n  private _onToggleSelectGroupClick(ev: React.MouseEvent) {\n    let { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  @autobind\n  private _onHeaderClick() {\n    let { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group);\n    }\n  }\n}\n"],"sourceRoot":"/src"}