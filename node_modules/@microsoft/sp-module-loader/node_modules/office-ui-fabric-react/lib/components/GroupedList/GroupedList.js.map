{"version":3,"sources":["components/GroupedList/GroupedList.tsx"],"names":[],"mappings":"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","file":"components/GroupedList/GroupedList.js","sourcesContent":["import * as React from 'react';\nimport {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup\n} from './GroupedList.Props';\nimport {\n  GroupedListSection\n} from './GroupedListSection';\n\nimport { css } from '../../utilities/css';\nimport {\n  List\n} from '../../List';\nimport {\n  SelectionMode\n} from '../../utilities/selection/index';\nimport {\n  BaseComponent,\n  autobind,\n  assign\n} from '../../Utilities';\nimport './GroupedList.scss';\n\nexport interface IGroupedListState {\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  groups?: IGroup[];\n}\n\nexport class GroupedList extends BaseComponent<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {}\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance,\n    root: HTMLElement,\n    list: List\n  };\n\n  private _isSomeGroupExpanded: boolean;\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    this.state = {\n      lastWidth: 0,\n      groups: props.groups\n    };\n  }\n\n  public componentWillReceiveProps(newProps) {\n    let {\n      groups,\n      selectionMode\n    } = this.props;\n    let shouldForceUpdates = false;\n\n    if (newProps.groups !== groups) {\n      this.setState({ groups: newProps.groups });\n      shouldForceUpdates = true;\n    }\n\n    if (newProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      this._forceListUpdates();\n    }\n  }\n\n  public render() {\n    let {\n      className\n    } = this.props;\n    let {\n      groups\n    } = this.state;\n\n    return (\n      <div\n        ref='root'\n        className={ css('ms-GroupedList', className) }\n        data-automationid='GroupedList'\n        data-is-scrollable='false'\n        role='grid'\n        >\n        { !groups ?\n          this._renderGroup(null, 0) : (\n            <List\n              ref='list'\n              items={ groups }\n              onRenderCell={ this._renderGroup }\n              getItemCountForPage={ () => 1 }\n              />\n          )\n        }\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean) {\n    let { groups } = this.state;\n    let { groupProps } = this.props;\n    let onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n        groups[groupIndex].isCollapsed = allCollapsed;\n      }\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  @autobind\n  private _renderGroup(group, groupIndex) {\n    let {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport\n    } = this.props;\n\n    // override group header/footer props as needed\n    let dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize\n    };\n\n    let headerProps = assign({}, groupProps.headerProps, dividerProps);\n    let footerProps = assign({}, groupProps.footerProps, dividerProps);\n    let groupNestingDepth = this._getGroupNestingDepth();\n\n    return (!group || group.count > 0) ? (\n      <GroupedListSection\n        ref={ 'group_' + groupIndex }\n        key={ this._getGroupKey(group) }\n        dragDropEvents={ dragDropEvents }\n        dragDropHelper={ dragDropHelper }\n        eventsToRegister={ eventsToRegister }\n        footerProps={ footerProps }\n        getGroupItemLimit={ groupProps && groupProps.getGroupItemLimit }\n        group={ group }\n        groupIndex={ groupIndex }\n        groupNestingDepth={ groupNestingDepth }\n        headerProps={ headerProps }\n        listProps={ listProps }\n        items={ items }\n        onRenderCell={ onRenderCell }\n        onRenderGroupHeader={ groupProps.onRenderHeader }\n        onRenderGroupFooter={ groupProps.onRenderFooter }\n        selectionMode={ selectionMode }\n        selection={ selection }\n        viewport={ viewport }\n        />\n      ) : null;\n  }\n\n  @autobind\n  private _getGroupKey(group: IGroup): string {\n    return 'group-' + (group ?\n      group.key + '-' + group.count :\n      '');\n  }\n\n  private _getGroupNestingDepth(): number {\n    let { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  @autobind\n  private _onToggleCollapse(group: IGroup) {\n    let { groupProps } = this.props;\n    let onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.setState({ }, this.forceUpdate);\n    }\n  }\n\n  @autobind\n  private _onToggleSelectGroup(group: IGroup) {\n    let { groups } = this.state;\n\n    if (group) {\n      let isSelected = !group.isSelected;\n      this._selectGroup(group, isSelected);\n\n      this.setState({\n        groups: groups\n      });\n    }\n  }\n\n  private _selectGroup(group: IGroup, isSelected: boolean) {\n    let { groupProps } = this.props;\n\n    group.isSelected = isSelected;\n    if (group.children && group.children.length > 0) {\n      group.children.forEach((childGroup: IGroup) => {\n        this._selectGroup(childGroup, isSelected);\n      });\n    } else {\n      let getGroupItemLimit = groupProps && groupProps.getGroupItemLimit;\n      let groupItemLimit = getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n      let start = group.startIndex;\n      let end = group.startIndex + Math.min(group.count, groupItemLimit);\n      for (let idx = start; idx < end; idx++) {\n        this.props.selection.setIndexSelected(idx, isSelected, false /* shouldAnchor */);\n      }\n      this.setState({ }, this.forceUpdate);\n    }\n  }\n\n  private _forceListUpdates(groups?: IGroup[]) {\n    groups = groups || this.state.groups;\n\n    let groupCount = groups ? groups.length : 1;\n\n    if (this.refs.list) {\n      this.refs.list.forceUpdate();\n\n      for (let i = 0; i < groupCount; i++) {\n        let group = this.refs.list.refs['group_' + String(i)] as GroupedListSection;\n        if (group) {\n          group.forceListUpdate();\n        }\n      }\n    } else {\n      let group = this.refs['group_' + String(0)] as GroupedListSection;\n      if (group) {\n        group.forceListUpdate();\n      }\n    }\n  }\n\n  @autobind\n  private _onToggleSummarize(group: IGroup) {\n    let { groupProps } = this.props;\n    let onToggleSummarize = groupProps && groupProps.footerProps && groupProps.footerProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  }\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[]) {\n    return groups && groups.some(group => group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed);\n  }\n\n  private _updateIsSomeGroupExpanded() {\n    let { groups } = this.state;\n    let { onGroupExpandStateChanged } = this.props;\n\n    let newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n"],"sourceRoot":"/src"}