{"version":3,"sources":["components/ChoiceGroup/ChoiceGroup.tsx"],"names":[],"mappings":"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","file":"components/ChoiceGroup/ChoiceGroup.js","sourcesContent":["import * as React from 'react';\nimport { Image } from '../../Image';\nimport { IChoiceGroupOption, IChoiceGroupProps } from './ChoiceGroup.Props';\nimport { css } from '../../utilities/css';\nimport { getId } from '../../utilities/object';\nimport './ChoiceGroup.scss';\n\nexport interface IChoiceGroupState {\n  keyChecked: string;\n\n  /** Is true when the control has focus. */\n  keyFocused?: string;\n}\n\nexport class ChoiceGroup extends React.Component<IChoiceGroupProps, IChoiceGroupState> {\n  public static defaultProps = {\n    options: []\n  };\n\n  private _id: string;\n  private _descriptionId: string;\n  private _inputElement: HTMLInputElement;\n\n  constructor(props: IChoiceGroupProps) {\n    super();\n\n    this.state = {\n      keyChecked: this._getKeyChecked(props.options),\n      keyFocused: undefined\n    };\n\n    this._id = getId('ChoiceGroup');\n    this._descriptionId = getId('ChoiceGroupDescription');\n  }\n\n  public componentWillReceiveProps(newProps: IChoiceGroupProps) {\n    const newKeyChecked: string = this._getKeyChecked(newProps.options);\n    const oldKeyCheched: string = this._getKeyChecked(this.props.options);\n\n    if (newKeyChecked !== oldKeyCheched) {\n      this.setState({\n        keyChecked: newKeyChecked,\n      });\n    }\n  }\n\n  public render() {\n    let { label, options, className, required } = this.props;\n    let { keyChecked, keyFocused } = this.state;\n\n    const titleClassName = css('ms-Label', className, {\n      'is-required': required\n    });\n\n    return (\n      // Need to assign role application on containing div because JAWS doesnt call OnKeyDown without this role\n      <div role='application' className={ className }>\n        <div\n          className='ms-ChoiceFieldGroup'\n          role='radiogroup'\n          aria-labelledby={ this.props.label ? this._id + '-label' : '' }\n        >\n          <div className='ms-ChoiceFieldGroup-title'>\n            { this.props.label ? <label className={ titleClassName } id={ this._id + '-label' }>{ label }</label> : null }\n          </div>\n\n          { options.map((option) => (\n            <div\n              key={ option.key }\n              className={ css('ms-ChoiceField', {\n                  'ms-ChoiceField--image': !!option.imageSrc,\n                  'is-inFocus': option.key === keyFocused\n                })\n              }\n            >\n              <input\n                ref={ (c): HTMLInputElement => this._inputElement = c }\n                id={ `${this._id}-${option.key}` }\n                className='ms-ChoiceField-input'\n                type='radio'\n                name={ this._id }\n                disabled={ option.isDisabled || option.disabled }\n                checked={ option.key === keyChecked }\n                onChange={ this._handleInputChange.bind(this, option) }\n                onFocus={ this._onFocus.bind(this, option) }\n                onBlur={ this._onBlur.bind(this, option) }\n                aria-describedby={ `${this._descriptionId}-${option.key}` }\n              />\n              { this._renderField(option) }\n            </div>\n          )) }\n        </div>\n      </div>\n    );\n  }\n\n  public focus() {\n    if (this._inputElement) {\n      this._inputElement.focus();\n    }\n  }\n\n  private _onFocus(option: IChoiceGroupOption, ev: React.FocusEvent): void {\n    this.setState({\n      keyFocused: option.key,\n      keyChecked: this.state.keyChecked\n    });\n  }\n\n  private _onBlur(option: IChoiceGroupOption, ev: React.FocusEvent): void {\n    this.setState({\n      keyFocused: undefined,\n      keyChecked: this.state.keyChecked\n    });\n  }\n\n  private _renderField(option: IChoiceGroupOption) {\n    const { keyChecked } = this.state;\n\n    return (\n      <label\n        htmlFor={ this._id + '-' + option.key }\n        className={ css({\n          'ms-ChoiceField-field--image': !!option.imageSrc,\n          'ms-ChoiceField-field': !option.imageSrc,\n          'is-checked': option.key === keyChecked,\n          'is-disabled': option.isDisabled || option.disabled\n        }) }\n      >\n        {\n          option.imageSrc\n            ? <div className='ms-ChoiceField-innerField'>\n                <div className={ css('ms-ChoiceField-imageWrapper', { 'is-hidden': option.key === keyChecked }) }>\n                  <Image\n                    src={ option.imageSrc }\n                    width={ option.imageSize.width }\n                    height={ option.imageSize.height }\n                  />\n                </div>\n                <div className={ css('ms-ChoiceField-imageWrapper', { 'is-hidden': option.key !== keyChecked }) }>\n                  <Image\n                    src={ option.selectedImageSrc }\n                    width={ option.imageSize.width }\n                    height={ option.imageSize.height }\n                  />\n                </div>\n              </div>\n            : null\n        }\n        {\n          option.imageSrc\n            ? <div className='ms-ChoiceField-labelWrapper'>\n                <i className='ms-ChoiceField-icon ms-Icon ms-Icon--CheckMark' />\n                <span id={ `${this._descriptionId}-${option.key}` } className='ms-Label'>{ option.text }</span>\n              </div>\n            : <span id={ `${this._descriptionId}-${option.key}` } className='ms-Label'>{ option.text }</span>\n        }\n      </label>\n    );\n  }\n\n  private _handleInputChange(option: IChoiceGroupOption, evt: React.FormEvent) {\n    let { onChanged } = this.props;\n\n    this.setState({\n      keyChecked: option.key\n    });\n\n    if (onChanged) {\n      onChanged(option);\n    }\n  }\n\n  /**\n   * If all the isChecked property of options are falsy values, return undefined;\n   * Else return the key of the first option with the truthy isChecked property.\n   */\n  private _getKeyChecked(options: IChoiceGroupOption[]): string {\n    const optionsChecked = options.filter((option: IChoiceGroupOption) => {\n      return option.isChecked;\n    });\n\n    if (optionsChecked.length === 0) {\n      return undefined;\n    } else {\n      return optionsChecked[0].key;\n    }\n  }\n}\n"],"sourceRoot":"/src"}