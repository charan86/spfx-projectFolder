{"version":3,"sources":["components/pickers/Suggestions/Suggestions.tsx"],"names":[],"mappings":"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","file":"components/pickers/Suggestions/Suggestions.js","sourcesContent":["import * as React from 'react';\nimport { Button, ButtonType } from '../../../Button';\nimport { css } from '../../../utilities/css';\nimport { ISuggestionItemProps, ISuggestionsProps } from './Suggestions.Props';\nimport { BaseComponent } from '../../../common/BaseComponent';\nimport { Spinner } from '../../../Spinner';\nimport './Suggestions.scss';\n\nexport class SuggestionsItem<T> extends React.Component<ISuggestionItemProps<T>, {}> {\n  public render() {\n    let {\n      suggestionModel,\n      RenderSuggestion,\n      onClick,\n      className\n    } = this.props;\n    return (\n      <Button\n        onClick={ onClick }\n        className={ css('ms-Suggestions-item', { 'is-suggested': suggestionModel.isSelected }, className) }\n        >\n        <RenderSuggestion { ...suggestionModel.item }/>\n      </Button>\n    );\n  }\n}\n\nexport class Suggestions<T> extends BaseComponent<ISuggestionsProps<T>, {}> {\n\n  protected _searchForMoreButton: Button;\n  protected _selectedElement: HTMLDivElement;\n  private SuggestionsItemOfProperType = SuggestionsItem as new (props: ISuggestionItemProps<T>) => SuggestionsItem<T>;\n\n  constructor(suggestionsProps: ISuggestionsProps<T>) {\n    super(suggestionsProps);\n    this._getMoreResults = this._getMoreResults.bind(this);\n  }\n\n  public render() {\n    let {\n      suggestionsHeaderText,\n      searchForMoreText,\n      className,\n      moreSuggestionsAvailable,\n      noResultsFoundText,\n      suggestions,\n      isLoading,\n      loadingText\n    } = this.props;\n\n    let noResults: JSX.Element = noResultsFoundText ? <div className='ms-Suggestions-none'>\n      { noResultsFoundText }\n    </div> : null;\n\n    return (\n      <div className={ css('ms-Suggestions', className ? className : '') }>\n        { suggestionsHeaderText ?\n          (<div className='ms-Suggestions-title'>\n            { suggestionsHeaderText }\n          </div>) : (null) }\n          { isLoading && (\n            <Spinner\n              className='ms-Suggestions-spinner'\n              label={ loadingText }\n              /> ) }\n        { (!suggestions || !suggestions.length) && !isLoading  ?\n          noResults :\n          this._renderSuggestions()\n        }\n        { searchForMoreText && moreSuggestionsAvailable ?\n          (<Button\n            onClick={ this._getMoreResults.bind(this) }\n            className={ 'ms-SearchMore-button' }\n            buttonType={ ButtonType.icon }\n            icon={ 'Search' }\n            ref={ this._resolveRef('_searchForMoreButton') } >\n            { searchForMoreText }\n          </Button>) : (null)\n        }\n      </div>\n    );\n  }\n\n  public focusSearchForMoreButton() {\n    if (this._searchForMoreButton) {\n      this._searchForMoreButton.focus();\n    }\n  }\n\n  // TODO get the element to scroll into view properly regardless of direction.\n  public scrollSelected() {\n    if (this._selectedElement) {\n      this._selectedElement.scrollIntoView(false);\n    }\n  }\n\n  private _renderSuggestions(): JSX.Element {\n    let {\n      suggestions,\n      onRenderSuggestion,\n      suggestionsItemClassName } = this.props;\n    let TypedSuggestionsItem = this.SuggestionsItemOfProperType;\n\n    return (\n      <div className='ms-Suggestions-container' id='suggestion-list' role='menu'>\n        { suggestions.map((suggestion, index) =>\n          <div ref={ this._resolveRef(suggestion.isSelected ? '_selectedElement' : '') }\n            key={ index }\n            id={ 'sug-' + index }\n            role='menuitem'>\n            <TypedSuggestionsItem\n              suggestionModel={ suggestion }\n              RenderSuggestion={ onRenderSuggestion }\n              onClick={ (ev: React.MouseEvent) => this.props.onSuggestionClick(ev, suggestion.item, index) }\n              className={ suggestionsItemClassName }\n              />\n          </div>) }\n      </div>);\n  }\n\n  private _getMoreResults() {\n    if (this.props.onGetMoreResults) {\n      this.props.onGetMoreResults();\n    }\n  }\n\n}"],"sourceRoot":"/src"}