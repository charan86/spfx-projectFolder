{"version":3,"sources":["CertificateManager.js"],"names":["Object","defineProperty","exports","value","forge","require","path","child_process","os_1","node_core_library_1","sudoSync_1","CertificateStore_1","serialNumber","friendlyName","macKeychain","_certutilExePath","CertificateManager","constructor","_certificateStore","CertificateStore","ensureCertificate","canGenerateNewCertificate","terminal","certificateData","keyData","_certificateHasSubjectAltName","warningMessage","writeWarningLine","untrustCertificate","_ensureCertificateInternal","pemCertificate","pemKey","process","platform","certutilExePath","_ensureCertUtilExePath","winUntrustResult","spawnSync","status","writeErrorLine","stdout","toString","writeVerboseLine","macFindCertificateResult","output","join","outputLines","split","EOL","found","shaHash","i","length","line","shaMatch","match","snbrMatch","toLowerCase","macUntrustResult","runSudoSync","code","stderr","writeLine","certificatePath","_createDevelopmentCertificate","keys","pki","rsa","generateKeyPair","certificate","createCertificate","publicKey","now","Date","validity","notBefore","notAfter","setFullYear","getFullYear","attrs","name","setSubject","setIssuer","setExtensions","altNames","type","digitalSignature","keyEncipherment","dataEncipherment","serverAuth","sign","privateKey","md","sha256","create","pem","certificateToPem","privateKeyToPem","where","whereErr","undefined","lines","trim","_tryTrustCertificate","winTrustResult","errorLines","map","indexOf","commands","result","some","_trySetFriendlyName","basePath","dirname","fileName","basename","extname","friendlyNamePath","friendlyNameFile","FileSystem","writeFile","repairStoreResult","certificateStore","generatedCertificate","certificateName","getTime","tempDirName","__dirname","tempCertificatePath","pemFileContents","ensureFolderExists","deleteFile","certificateFromPem","getExtension"],"mappingscAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,MAAMC,yDAAQC,QAAQ,YAAR,CAAR,CAAN;AACA,MAAMC,wDAAOD,QAAQ,MAAR,CAAP,CAAN;AACA,MAAME,iEAAgBF,QAAQ,eAAR,CAAhB,CAAN;AACA,MAAMG,wDAAOH,QAAQ,IAAR,CAAP,CAAN;AACA,MAAMI,uEAAsBJ,QAAQ,8BAAR,CAAtB,CAAN;AACA,MAAMK,8DAAaL,QAAQ,YAAR,CAAb,CAAN;AACA,MAAMM,sEAAqBN,QAAQ,oBAAR,CAArB,CAAN;AACA,MAAMO,gEAAe,kCAAf,CAAN;AACA,MAAMC,gEAAe,mDAAf,CAAN;AACA,MAAMC,gEAAc,oCAAd,CAAN;AACA,IAAIC,gBAAJ;AACA;;;;;AAKA,MAAMC,kBAAN,CAAyB;AACrBC,kBAAc;AAAA;AAAA;;AACV,aAAKC,iBAAL,GAAyB,IAAIP,mBAAmBQ,gBAAvB,EAAzB;AACH;AACD;;;;;;AAMAC,sBAAkBC,yBAAlB,EAA6CC,QAA7C,EAAuD;AAAA;AAAA;;AACnD,YAAI,0DAAKJ,iBAAL,CAAuBK,eAAvB,yDAA0C,KAAKL,iBAAL,CAAuBM,OAAjE,CAAJ,EAA8E;AAAA;AAAA;;AAC1E,gBAAI,CAAC,KAAKC,6BAAL,EAAL,EAA2C;AAAA;;AACvC,oBAAIC,mEAAkB,wEAClB,wEADA,CAAJ;AADuC;AAGvC,oBAAIL,yBAAJ,EAA+B;AAAA;AAAA;;AAC3BK,sCAAkB,gEAAlB;AACH,iBAFD,MAGK;AAAA;AAAA;;AACDA,sCAAkB,kDAAlB;AACH;AARsC;AASvCJ,yBAASK,gBAAT,CAA0BD,cAA1B;AATuC;AAUvC,oBAAIL,yBAAJ,EAA+B;AAAA;AAAA;;AAC3B,yBAAKO,kBAAL,CAAwBN,QAAxB;AAD2B;AAE3B,yBAAKO,0BAAL,CAAgCP,QAAhC;AACH,iBAHD;AAAA;AAAA;AAIH,aAdD;AAAA;AAAA;AAeH,SAhBD,MAiBK;AAAA;AAAA;AAAA,oBAAID,yBAAJ,EAA+B;AAAA;AAAA;;AAChC,yBAAKQ,0BAAL,CAAgCP,QAAhC;AACH,iBAFI;AAAA;AAAA;AAEJ,aApBkD;AAqBnD,eAAO;AACHQ,4BAAgB,KAAKZ,iBAAL,CAAuBK,eADpC;AAEHQ,oBAAQ,KAAKb,iBAAL,CAAuBM;AAF5B,SAAP;AAIH;AACD;;;;;AAKAI,uBAAmBN,QAAnB,EAA6B;AAAA;AAAA;;AACzB,gBAAQU,QAAQC,QAAhB;AACI,iBAAK,OAAL;AAAA;;AACI,sBAAMC,oEAAkB,KAAKC,sBAAL,CAA4Bb,QAA5B,CAAlB,CAAN;AADJ;AAEI,oBAAI,CAACY,eAAL,EAAsB;AAAA;AAAA;;AAClB;AACA,2BAAO,KAAP;AACH,iBAHD;AAAA;AAAA;AAIA,sBAAME,qEAAmB7B,cAAc8B,SAAd,CAAwBH,eAAxB,EAAyC,CAAC,OAAD,EAAU,WAAV,EAAuB,MAAvB,EAA+BtB,YAA/B,CAAzC,CAAnB,CAAN;AANJ;AAOI,oBAAIwB,iBAAiBE,MAAjB,KAA4B,CAAhC,EAAmC;AAAA;AAAA;;AAC/BhB,6BAASiB,cAAT,CAAyB,UAASH,iBAAiBI,MAAjB,CAAwBC,QAAxB,EAAmC,EAArE;AAD+B;AAE/B,2BAAO,KAAP;AACH,iBAHD,MAIK;AAAA;AAAA;;AACDnB,6BAASoB,gBAAT,CAA0B,iDAA1B;AADC;AAED,2BAAO,IAAP;AACH;AACL,iBAAK,QAAL;AAAA;AAAA;;AACIpB,yBAASoB,gBAAT,CAA0B,8CAA1B;AACA,sBAAMC,6EAA2BpC,cAAc8B,SAAd,CAAwB,UAAxB,EAAoC,CAAC,kBAAD,EAAqB,IAArB,EAA2B,WAA3B,EAAwC,IAAxC,EAA8C,IAA9C,EAAoDvB,WAApD,CAApC,CAA3B,CAAN;AAFJ;AAGI,oBAAI6B,yBAAyBL,MAAzB,KAAoC,CAAxC,EAA2C;AAAA;AAAA;;AACvChB,6BAASiB,cAAT,CAAyB,sCAAqCI,yBAAyBC,MAAzB,CAAgCC,IAAhC,CAAqC,GAArC,CAA0C,EAAxG;AADuC;AAEvC,2BAAO,KAAP;AACH,iBAHD;AAAA;AAAA;AAIA,sBAAMC,gEAAcH,yBAAyBH,MAAzB,CAAgCC,QAAhC,GAA2CM,KAA3C,CAAiDvC,KAAKwC,GAAtD,CAAd,CAAN;AACA,oBAAIC,0DAAQ,KAAR,CAAJ;AACA,oBAAIC,4DAAU,EAAV,CAAJ;AATJ;AAUI,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,YAAYM,MAAhC,EAAwCD,GAAxC,EAA6C;AACzC,0BAAME,yDAAOP,YAAYK,CAAZ,CAAP,CAAN;AACA,0BAAMG,6DAAWD,KAAKE,KAAL,CAAW,oBAAX,CAAX,CAAN;AAFyC;AAGzC,wBAAID,QAAJ,EAAc;AAAA;AAAA;;AACVJ,kCAAUI,SAAS,CAAT,CAAV;AACH,qBAFD;AAAA;AAAA;AAGA,0BAAME,8DAAYH,KAAKE,KAAL,CAAW,gCAAX,CAAZ,CAAN;AANyC;AAOzC,wBAAI,yHAAa,CAAC,gEAAU,CAAV,2DAAgB,EAAhB,CAAD,EAAqBE,WAArB,OAAuC7C,YAApD,CAAJ,EAAsE;AAAA;AAAA;;AAClEqC,gCAAQ,IAAR;AADkE;AAElE;AACH,qBAHD;AAAA;AAAA;AAIH;AArBL;AAsBI,oBAAI,CAACA,KAAL,EAAY;AAAA;AAAA;;AACR3B,6BAASiB,cAAT,CAAwB,qCAAxB;AADQ;AAER,2BAAO,KAAP;AACH,iBAHD;AAAA;AAAA;AAtBJ;AA0BIjB,yBAASoB,gBAAT,CAA2B,8BAA6BQ,OAAQ,EAAhE;AACA,sBAAMQ,qEAAmBhD,WAAWiD,WAAX,CAAuB,CAAC,UAAD,EAAa,oBAAb,EAAmC,IAAnC,EAAyCT,OAAzC,EAAkDpC,WAAlD,CAAvB,CAAnB,CAAN;AA3BJ;AA4BI,oBAAI4C,iBAAiBE,IAAjB,KAA0B,CAA9B,EAAiC;AAAA;AAAA;;AAC7BtC,6BAASoB,gBAAT,CAA0B,yCAA1B;AAD6B;AAE7B,2BAAO,IAAP;AACH,iBAHD,MAIK;AAAA;AAAA;;AACDpB,6BAASiB,cAAT,CAAwBmB,iBAAiBG,MAAjB,CAAwBhB,IAAxB,CAA6B,GAA7B,CAAxB;AADC;AAED,2BAAO,KAAP;AACH;AACL;AAAA;AAAA;;AACI;AACAvB,yBAASwC,SAAT,CAAmB,gGACf,+FADe,GAEd,oCAAmC,KAAK5C,iBAAL,CAAuB6C,eAAgB,SAF5D,GAGd,kCAAiCnD,YAAa,IAHnD;AAFJ;AAMI,uBAAO,KAAP;AA1DR;AA4DH;AACDoD,oCAAgC;AAAA;;AAC5B,cAAMC,yDAAO7D,MAAM8D,GAAN,CAAUC,GAAV,CAAcC,eAAd,CAA8B,IAA9B,CAAP,CAAN;AACA,cAAMC,gEAAcjE,MAAM8D,GAAN,CAAUI,iBAAV,EAAd,CAAN;AAF4B;AAG5BD,oBAAYE,SAAZ,GAAwBN,KAAKM,SAA7B;AAH4B;AAI5BF,oBAAYzD,YAAZ,GAA2BA,YAA3B;AACA,cAAM4D,wDAAM,IAAIC,IAAJ,EAAN,CAAN;AAL4B;AAM5BJ,oBAAYK,QAAZ,CAAqBC,SAArB,GAAiCH,GAAjC;AACA;AAP4B;AAQ5BH,oBAAYK,QAAZ,CAAqBE,QAArB,CAA8BC,WAA9B,CAA0CR,YAAYK,QAAZ,CAAqBC,SAArB,CAA+BG,WAA/B,KAA+C,CAAzF;AACA,cAAMC,0DAAQ,CAAC;AACPC,kBAAM,YADC;AAEP7E,mBAAO;AAFA,SAAD,CAAR,CAAN;AAT4B;AAa5BkE,oBAAYY,UAAZ,CAAuBF,KAAvB;AAb4B;AAc5BV,oBAAYa,SAAZ,CAAsBH,KAAtB;AAd4B;AAe5BV,oBAAYc,aAAZ,CAA0B,CACtB;AACIH,kBAAM,gBADV;AAEII,sBAAU,CAAC;AACHC,sBAAM,CADH;AAEHlF,uBAAO;AAFJ,aAAD;AAFd,SADsB,EAQtB;AACI6E,kBAAM,UADV;AAEIM,8BAAkB,IAFtB;AAGIC,6BAAiB,IAHrB;AAIIC,8BAAkB;AAJtB,SARsB,EAanB;AACCR,kBAAM,aADP;AAECS,wBAAY;AAFb,SAbmB,EAgBnB;AACCT,kBAAM,cADP;AAEC7E,mBAAOU;AAFR,SAhBmB,CAA1B;AAqBA;AApC4B;AAqC5BwD,oBAAYqB,IAAZ,CAAiBzB,KAAK0B,UAAtB,EAAkCvF,MAAMwF,EAAN,CAASC,MAAT,CAAgBC,MAAhB,EAAlC;AACA;AACA,cAAMC,wDAAM3F,MAAM8D,GAAN,CAAU8B,gBAAV,CAA2B3B,WAA3B,CAAN,CAAN;AACA,cAAMtC,2DAAS3B,MAAM8D,GAAN,CAAU+B,eAAV,CAA0BhC,KAAK0B,UAA/B,CAAT,CAAN;AAxC4B;AAyC5B,eAAO;AACH7D,4BAAgBiE,GADb;AAEHhE,oBAAQA;AAFL,SAAP;AAIH;AACDI,2BAAuBb,QAAvB,EAAiC;AAAA;AAAA;;AAC7B,YAAI,CAACP,gBAAL,EAAuB;AAAA;;AACnB,kBAAMmF,0DAAQ3F,cAAc8B,SAAd,CAAwB,OAAxB,EAAiC,CAAC,UAAD,CAAjC,CAAR,CAAN;AACA,kBAAM8D,6DAAWD,MAAMrC,MAAN,CAAapB,QAAb,EAAX,CAAN;AAFmB;AAGnB,gBAAI0D,QAAJ,EAAc;AAAA;AAAA;;AACV7E,yBAASiB,cAAT,CAAyB,oCAAmC4D,QAAS,GAArE;AADU;AAEVpF,mCAAmBqF,SAAnB;AACH,aAHD,MAIK;AAAA;;AACD,sBAAMC,0DAAQH,MAAM1D,MAAN,CAAaC,QAAb,GAAwB6D,IAAxB,GAA+BvD,KAA/B,CAAqCvC,KAAKwC,GAA1C,CAAR,CAAN;AADC;AAEDjC,mCAAmBsF,MAAM,CAAN,EAASC,IAAT,EAAnB;AACH;AACJ,SAXD;AAAA;AAAA;AAD6B;AAa7B,eAAOvF,gBAAP;AACH;AACDwF,yBAAqBxC,eAArB,EAAsCzC,QAAtC,EAAgD;AAAA;AAAA;;AAC5C,gBAAQU,QAAQC,QAAhB;AACI,iBAAK,OAAL;AAAA;;AACI,sBAAMC,oEAAkB,KAAKC,sBAAL,CAA4Bb,QAA5B,CAAlB,CAAN;AADJ;AAEI,oBAAI,CAACY,eAAL,EAAsB;AAAA;AAAA;;AAClB;AACA,2BAAO,KAAP;AACH,iBAHD;AAAA;AAAA;AAFJ;AAMIZ,yBAASwC,SAAT,CAAmB,kGACf,iFADe,GAEf,uGAFJ;AAGA,sBAAM0C,mEAAiBjG,cAAc8B,SAAd,CAAwBH,eAAxB,EAAyC,CAAC,OAAD,EAAU,WAAV,EAAuB,MAAvB,EAA+B6B,eAA/B,CAAzC,CAAjB,CAAN;AATJ;AAUI,oBAAIyC,eAAelE,MAAf,KAA0B,CAA9B,EAAiC;AAAA;AAAA;;AAC7BhB,6BAASiB,cAAT,CAAyB,UAASiE,eAAehE,MAAf,CAAsBC,QAAtB,EAAiC,EAAnE;AACA,0BAAMgE,+DAAaD,eAAehE,MAAf,CAAsBC,QAAtB,GAAiCM,KAAjC,CAAuCvC,KAAKwC,GAA5C,EAAiD0D,GAAjD,CAAsDrD,IAAD,IAAU;AAAA;AAAA;AAAA,oCAAKiD,IAAL;AAAW,qBAA1E,CAAb,CAAN;AACA;AAH6B;AAI7B,wBAAI,qEAAehE,MAAf,KAA0B,UAA1B,0DACAmE,WAAWA,WAAWrD,MAAX,GAAoB,CAA/B,EAAkCuD,OAAlC,CAA0C,yCAA1C,IAAuF,CADvF,CAAJ,EAC8F;AAAA;AAAA;;AAC1FrF,iCAASwC,SAAT,CAAmB,8BAAnB;AACH,qBAHD,MAIK;AAAA;AAAA;;AACDxC,iCAASiB,cAAT,CAAwB,iDAAxB;AACH;AAV4B;AAW7B,2BAAO,KAAP;AACH,iBAZD,MAaK;AAAA;AAAA;;AACDjB,6BAASoB,gBAAT,CAA0B,+CAA1B;AADC;AAED,2BAAO,IAAP;AACH;AACL,iBAAK,QAAL;AAAA;AAAA;;AACIpB,yBAASwC,SAAT,CAAmB,kGACf,iFADe,GAEf,gGAFe,GAGf,8BAHJ;AAIA,sBAAM8C,8DAAW,CACb,UADa,EAEb,kBAFa,EAGb,IAHa,EAIb,IAJa,EAKb,WALa,EAMb,IANa,EAOb9F,WAPa,EAQbiD,eARa,CAAX,CAAN;AAUA,sBAAM8C,4DAASnG,WAAWiD,WAAX,CAAuBiD,QAAvB,CAAT,CAAN;AAfJ;AAgBI,oBAAIC,OAAOjD,IAAP,KAAgB,CAApB,EAAuB;AAAA;AAAA;;AACnBtC,6BAASoB,gBAAT,CAA0B,+CAA1B;AADmB;AAEnB,2BAAO,IAAP;AACH,iBAHD,MAIK;AAAA;AAAA;;AACD,wBAAImE,OAAOhD,MAAP,CAAciD,IAAd,CAAoB3G,KAAD,IAAW;AAAA;AAAA;AAAA,gCAAC,CAACA,MAAMoD,KAAN,CAAY,+CAAZ,CAAF;AAA8D,qBAA5F,CAAJ,EAAmG;AAAA;AAAA;;AAC/FjC,iCAASwC,SAAT,CAAmB,8BAAnB;AAD+F;AAE/F,+BAAO,KAAP;AACH,qBAHD,MAIK;AAAA;AAAA;;AACDxC,iCAASiB,cAAT,CAAyB,8DAA6DsE,OAAOjD,IAAK,IAA1E,GACnB,UAASiD,OAAOhD,MAAP,CAAchB,IAAd,CAAmB,GAAnB,CAAwB,EADtC;AADC;AAGD,+BAAO,KAAP;AACH;AACJ;AACL;AAAA;AAAA;;AACI;AACAvB,yBAASwC,SAAT,CAAmB,8FACf,6FADe,GAEd,+BAA8BC,eAAgB,IAFnD;AAFJ;AAKI,uBAAO,IAAP;AAhER;AAkEH;AACDgD,wBAAoBhD,eAApB,EAAqCzC,QAArC,EAA+C;AAAA;AAAA;;AAC3C,YAAIU,QAAQC,QAAR,KAAqB,OAAzB,EAAkC;AAAA;;AAC9B,kBAAMC,qEAAkB,KAAKC,sBAAL,CAA4Bb,QAA5B,CAAlB,CAAN;AAD8B;AAE9B,gBAAI,CAACY,eAAL,EAAsB;AAAA;AAAA;;AAClB;AACA,uBAAO,KAAP;AACH,aAHD;AAAA;AAAA;AAIA,kBAAM8E,8DAAW1G,KAAK2G,OAAL,CAAalD,eAAb,CAAX,CAAN;AACA,kBAAMmD,8DAAW5G,KAAK6G,QAAL,CAAcpD,eAAd,EAA+BzD,KAAK8G,OAAL,CAAarD,eAAb,CAA/B,CAAX,CAAN;AACA,kBAAMsD,sEAAmB/G,KAAKuC,IAAL,CAAUmE,QAAV,EAAqB,GAAEE,QAAS,MAAhC,CAAnB,CAAN;AACA,kBAAMI,sEAAmB,CACrB,WADqB,EAErB,4BAFqB,EAGrB,cAHqB,EAIpB,eAAczG,YAAa,GAJP,EAKrB,EALqB,EAMvBgC,IANuB,CAMlBrC,KAAKwC,GANa,CAAnB,CAAN;AAT8B;AAgB9BvC,gCAAoB8G,UAApB,CAA+BC,SAA/B,CAAyCH,gBAAzC,EAA2DC,gBAA3D;AACA,kBAAMV,8DAAW,CACb,cADa,EAEb,OAFa,EAGb,MAHa,EAIbhG,YAJa,EAKbyG,gBALa,CAAX,CAAN;AAOA,kBAAMI,uEAAoBlH,cAAc8B,SAAd,CAAwBH,eAAxB,EAAyC0E,QAAzC,CAApB,CAAN;AAxB8B;AAyB9B,gBAAIa,kBAAkBnF,MAAlB,KAA6B,CAAjC,EAAoC;AAAA;AAAA;;AAChChB,yBAASiB,cAAT,CAAyB,mBAAkBkF,kBAAkBjF,MAAlB,CAAyBC,QAAzB,EAAoC,EAA/E;AADgC;AAEhC,uBAAO,KAAP;AACH,aAHD,MAIK;AAAA;AAAA;;AACDnB,yBAASoB,gBAAT,CAA0B,oCAA1B;AADC;AAED,uBAAO,IAAP;AACH;AACJ,SAjCD,MAkCK;AAAA;AAAA;;AACD;AACA,mBAAO,IAAP;AACH;AACJ;AACDb,+BAA2BP,QAA3B,EAAqC;AAAA;;AACjC,cAAMoG,sEAAmB,KAAKxG,iBAAxB,CAAN;AACA,cAAMyG,0EAAuB,KAAK3D,6BAAL,EAAvB,CAAN;AACA,cAAMQ,yDAAM,IAAIC,IAAJ,EAAN,CAAN;AACA,cAAMmD,qEAAkBpD,IAAIqD,OAAJ,GAAcpF,QAAd,EAAlB,CAAN;AACA,cAAMqF,iEAAcxH,KAAKuC,IAAL,CAAUkF,SAAV,EAAqB,IAArB,EAA2B,MAA3B,CAAd,CAAN;AACA,cAAMC,yEAAsB1H,KAAKuC,IAAL,CAAUiF,WAAV,EAAwB,GAAEF,eAAgB,MAA1C,CAAtB,CAAN;AACA,cAAMK,qEAAkBN,qBAAqB7F,cAAvC,CAAN;AAPiC;AAQjC,YAAImG,eAAJ,EAAqB;AAAA;AAAA;;AACjBxH,gCAAoB8G,UAApB,CAA+BC,SAA/B,CAAyCQ,mBAAzC,EAA8DC,eAA9D,EAA+E;AAC3EC,oCAAoB;AADuD,aAA/E;AAGH,SAJD;AAAA;AAAA;AARiC;AAajC,YAAI,KAAK3B,oBAAL,CAA0ByB,mBAA1B,EAA+C1G,QAA/C,CAAJ,EAA8D;AAAA;AAAA;;AAC1DoG,6BAAiBnG,eAAjB,GAAmCoG,qBAAqB7F,cAAxD;AAD0D;AAE1D4F,6BAAiBlG,OAAjB,GAA2BmG,qBAAqB5F,MAAhD;AACA;AAH0D;AAI1D,gBAAI,CAAC,KAAKgF,mBAAL,CAAyBiB,mBAAzB,EAA8C1G,QAA9C,CAAL,EAA8D;AAAA;AAAA;;AAC1DA,yBAASK,gBAAT,CAA0B,iDAA1B;AACH,aAFD;AAAA;AAAA;AAGH,SAPD,MAQK;AAAA;AAAA;;AACD;AACA+F,6BAAiBnG,eAAjB,GAAmC6E,SAAnC;AAFC;AAGDsB,6BAAiBlG,OAAjB,GAA2B4E,SAA3B;AACH;AAzBgC;AA0BjC3F,4BAAoB8G,UAApB,CAA+BY,UAA/B,CAA0CH,mBAA1C;AACH;AACDvG,oCAAgC;AAAA;;AAC5B,cAAMF,qEAAkB,KAAKL,iBAAL,CAAuBK,eAAzC,CAAN;AAD4B;AAE5B,YAAI,CAACA,eAAL,EAAsB;AAAA;AAAA;;AAClB,mBAAO,KAAP;AACH,SAFD;AAAA;AAAA;AAGA,cAAM8C,iEAAcjE,MAAM8D,GAAN,CAAUkE,kBAAV,CAA6B7G,eAA7B,CAAd,CAAN;AAL4B;AAM5B,eAAO,CAAC,CAAC8C,YAAYgE,YAAZ,CAAyB,gBAAzB,CAAT;AACH;AAnToB;;AAqTzBnI,QAAQc,kBAAR,GAA6BA,kBAA7B;AACA","file":"CertificateManager.js","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst forge = require(\"node-forge\");\nconst path = require(\"path\");\nconst child_process = require(\"child_process\");\nconst os_1 = require(\"os\");\nconst node_core_library_1 = require(\"@rushstack/node-core-library\");\nconst sudoSync_1 = require(\"./sudoSync\");\nconst CertificateStore_1 = require(\"./CertificateStore\");\nconst serialNumber = '731c321744e34650a202e3ef91c3c1b0';\nconst friendlyName = 'debug-certificate-manager Development Certificate';\nconst macKeychain = '/Library/Keychains/System.keychain';\nlet _certutilExePath;\n/**\n * A utility class to handle generating, trusting, and untrustring a debug certificate.\n * Contains two public methods to `ensureCertificate` and `untrustCertificate`.\n * @public\n */\nclass CertificateManager {\n    constructor() {\n        this._certificateStore = new CertificateStore_1.CertificateStore();\n    }\n    /**\n     * Get a dev certificate from the store, or optionally, generate a new one\n     * and trust it if one doesn't exist in the store.\n     *\n     * @public\n     */\n    ensureCertificate(canGenerateNewCertificate, terminal) {\n        if (this._certificateStore.certificateData && this._certificateStore.keyData) {\n            if (!this._certificateHasSubjectAltName()) {\n                let warningMessage = ('The existing development certificate is missing the subjectAltName ' +\n                    'property and will not work with the latest versions of some browsers. ');\n                if (canGenerateNewCertificate) {\n                    warningMessage += ' Attempting to untrust the certificate and generate a new one.';\n                }\n                else {\n                    warningMessage += ' Untrust the certificate and generate a new one.';\n                }\n                terminal.writeWarningLine(warningMessage);\n                if (canGenerateNewCertificate) {\n                    this.untrustCertificate(terminal);\n                    this._ensureCertificateInternal(terminal);\n                }\n            }\n        }\n        else if (canGenerateNewCertificate) {\n            this._ensureCertificateInternal(terminal);\n        }\n        return {\n            pemCertificate: this._certificateStore.certificateData,\n            pemKey: this._certificateStore.keyData\n        };\n    }\n    /**\n     * Attempt to locate a previously generated debug certificate and untrust it.\n     *\n     * @public\n     */\n    untrustCertificate(terminal) {\n        switch (process.platform) {\n            case 'win32':\n                const certutilExePath = this._ensureCertUtilExePath(terminal);\n                if (!certutilExePath) {\n                    // Unable to find the cert utility\n                    return false;\n                }\n                const winUntrustResult = child_process.spawnSync(certutilExePath, ['-user', '-delstore', 'root', serialNumber]);\n                if (winUntrustResult.status !== 0) {\n                    terminal.writeErrorLine(`Error: ${winUntrustResult.stdout.toString()}`);\n                    return false;\n                }\n                else {\n                    terminal.writeVerboseLine('Successfully untrusted development certificate.');\n                    return true;\n                }\n            case 'darwin':\n                terminal.writeVerboseLine('Trying to find the signature of the dev cert');\n                const macFindCertificateResult = child_process.spawnSync('security', ['find-certificate', '-c', 'localhost', '-a', '-Z', macKeychain]);\n                if (macFindCertificateResult.status !== 0) {\n                    terminal.writeErrorLine(`Error finding the dev certificate: ${macFindCertificateResult.output.join(' ')}`);\n                    return false;\n                }\n                const outputLines = macFindCertificateResult.stdout.toString().split(os_1.EOL);\n                let found = false;\n                let shaHash = \"\";\n                for (let i = 0; i < outputLines.length; i++) {\n                    const line = outputLines[i];\n                    const shaMatch = line.match(/^SHA-1 hash: (.+)$/);\n                    if (shaMatch) {\n                        shaHash = shaMatch[1];\n                    }\n                    const snbrMatch = line.match(/^\\s*\"snbr\"<blob>=0x([^\\s]+).+$/);\n                    if (snbrMatch && (snbrMatch[1] || '').toLowerCase() === serialNumber) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    terminal.writeErrorLine('Unable to find the dev certificate.');\n                    return false;\n                }\n                terminal.writeVerboseLine(`Found the dev cert. SHA is ${shaHash}`);\n                const macUntrustResult = sudoSync_1.runSudoSync(['security', 'delete-certificate', '-Z', shaHash, macKeychain]);\n                if (macUntrustResult.code === 0) {\n                    terminal.writeVerboseLine('Successfully untrusted dev certificate.');\n                    return true;\n                }\n                else {\n                    terminal.writeErrorLine(macUntrustResult.stderr.join(' '));\n                    return false;\n                }\n            default:\n                // Linux + others: Have the user manually untrust the cert\n                terminal.writeLine('Automatic certificate untrust is only implemented for debug-certificate-manager on Windows ' +\n                    'and macOS. To untrust the development certificate, remove this certificate from your trusted ' +\n                    `root certification authorities: \"${this._certificateStore.certificatePath}\". The ` +\n                    `certificate has serial number \"${serialNumber}\".`);\n                return false;\n        }\n    }\n    _createDevelopmentCertificate() {\n        const keys = forge.pki.rsa.generateKeyPair(2048);\n        const certificate = forge.pki.createCertificate();\n        certificate.publicKey = keys.publicKey;\n        certificate.serialNumber = serialNumber;\n        const now = new Date();\n        certificate.validity.notBefore = now;\n        // Valid for 3 years\n        certificate.validity.notAfter.setFullYear(certificate.validity.notBefore.getFullYear() + 3);\n        const attrs = [{\n                name: 'commonName',\n                value: 'localhost'\n            }];\n        certificate.setSubject(attrs);\n        certificate.setIssuer(attrs);\n        certificate.setExtensions([\n            {\n                name: 'subjectAltName',\n                altNames: [{\n                        type: 2,\n                        value: 'localhost'\n                    }]\n            },\n            {\n                name: 'keyUsage',\n                digitalSignature: true,\n                keyEncipherment: true,\n                dataEncipherment: true\n            }, {\n                name: 'extKeyUsage',\n                serverAuth: true\n            }, {\n                name: 'friendlyName',\n                value: friendlyName\n            }\n        ]);\n        // self-sign certificate\n        certificate.sign(keys.privateKey, forge.md.sha256.create());\n        // convert a Forge certificate to PEM\n        const pem = forge.pki.certificateToPem(certificate);\n        const pemKey = forge.pki.privateKeyToPem(keys.privateKey);\n        return {\n            pemCertificate: pem,\n            pemKey: pemKey\n        };\n    }\n    _ensureCertUtilExePath(terminal) {\n        if (!_certutilExePath) {\n            const where = child_process.spawnSync('where', ['certutil']);\n            const whereErr = where.stderr.toString();\n            if (whereErr) {\n                terminal.writeErrorLine(`Error finding certUtil command: \"${whereErr}\"`);\n                _certutilExePath = undefined;\n            }\n            else {\n                const lines = where.stdout.toString().trim().split(os_1.EOL);\n                _certutilExePath = lines[0].trim();\n            }\n        }\n        return _certutilExePath;\n    }\n    _tryTrustCertificate(certificatePath, terminal) {\n        switch (process.platform) {\n            case 'win32':\n                const certutilExePath = this._ensureCertUtilExePath(terminal);\n                if (!certutilExePath) {\n                    // Unable to find the cert utility\n                    return false;\n                }\n                terminal.writeLine('Attempting to trust a dev certificate. This self-signed certificate only points to localhost ' +\n                    'and will be stored in your local user profile to be used by other instances of ' +\n                    'debug-certificate-manager. If you do not consent to trust this certificate, click \"NO\" in the dialog.');\n                const winTrustResult = child_process.spawnSync(certutilExePath, ['-user', '-addstore', 'root', certificatePath]);\n                if (winTrustResult.status !== 0) {\n                    terminal.writeErrorLine(`Error: ${winTrustResult.stdout.toString()}`);\n                    const errorLines = winTrustResult.stdout.toString().split(os_1.EOL).map((line) => line.trim());\n                    // Not sure if this is always the status code for \"cancelled\" - should confirm.\n                    if (winTrustResult.status === 2147943623 ||\n                        errorLines[errorLines.length - 1].indexOf('The operation was canceled by the user.') > 0) {\n                        terminal.writeLine('Certificate trust cancelled.');\n                    }\n                    else {\n                        terminal.writeErrorLine('Certificate trust failed with an unknown error.');\n                    }\n                    return false;\n                }\n                else {\n                    terminal.writeVerboseLine('Successfully trusted development certificate.');\n                    return true;\n                }\n            case 'darwin':\n                terminal.writeLine('Attempting to trust a dev certificate. This self-signed certificate only points to localhost ' +\n                    'and will be stored in your local user profile to be used by other instances of ' +\n                    'debug-certificate-manager. If you do not consent to trust this certificate, do not enter your ' +\n                    'root password in the prompt.');\n                const commands = [\n                    'security',\n                    'add-trusted-cert',\n                    '-d',\n                    '-r',\n                    'trustRoot',\n                    '-k',\n                    macKeychain,\n                    certificatePath\n                ];\n                const result = sudoSync_1.runSudoSync(commands);\n                if (result.code === 0) {\n                    terminal.writeVerboseLine('Successfully trusted development certificate.');\n                    return true;\n                }\n                else {\n                    if (result.stderr.some((value) => !!value.match(/The authorization was cancelled by the user\\./))) {\n                        terminal.writeLine('Certificate trust cancelled.');\n                        return false;\n                    }\n                    else {\n                        terminal.writeErrorLine(`Certificate trust failed with an unknown error. Exit code: ${result.code}. ` +\n                            `Error: ${result.stderr.join(' ')}`);\n                        return false;\n                    }\n                }\n            default:\n                // Linux + others: Have the user manually trust the cert if they want to\n                terminal.writeLine('Automatic certificate trust is only implemented for debug-certificate-manager on Windows ' +\n                    'and macOS. To trust the development certificate, add this certificate to your trusted root ' +\n                    `certification authorities: \"${certificatePath}\".`);\n                return true;\n        }\n    }\n    _trySetFriendlyName(certificatePath, terminal) {\n        if (process.platform === 'win32') {\n            const certutilExePath = this._ensureCertUtilExePath(terminal);\n            if (!certutilExePath) {\n                // Unable to find the cert utility\n                return false;\n            }\n            const basePath = path.dirname(certificatePath);\n            const fileName = path.basename(certificatePath, path.extname(certificatePath));\n            const friendlyNamePath = path.join(basePath, `${fileName}.inf`);\n            const friendlyNameFile = [\n                '[Version]',\n                'Signature = \"$Windows NT$\"',\n                '[Properties]',\n                `11 = \"{text}${friendlyName}\"`,\n                ''\n            ].join(os_1.EOL);\n            node_core_library_1.FileSystem.writeFile(friendlyNamePath, friendlyNameFile);\n            const commands = [\n                '–repairstore',\n                '–user',\n                'root',\n                serialNumber,\n                friendlyNamePath\n            ];\n            const repairStoreResult = child_process.spawnSync(certutilExePath, commands);\n            if (repairStoreResult.status !== 0) {\n                terminal.writeErrorLine(`CertUtil Error: ${repairStoreResult.stdout.toString()}`);\n                return false;\n            }\n            else {\n                terminal.writeVerboseLine('Successfully set certificate name.');\n                return true;\n            }\n        }\n        else {\n            // No equivalent concept outside of Windows\n            return true;\n        }\n    }\n    _ensureCertificateInternal(terminal) {\n        const certificateStore = this._certificateStore;\n        const generatedCertificate = this._createDevelopmentCertificate();\n        const now = new Date();\n        const certificateName = now.getTime().toString();\n        const tempDirName = path.join(__dirname, '..', 'temp');\n        const tempCertificatePath = path.join(tempDirName, `${certificateName}.pem`);\n        const pemFileContents = generatedCertificate.pemCertificate;\n        if (pemFileContents) {\n            node_core_library_1.FileSystem.writeFile(tempCertificatePath, pemFileContents, {\n                ensureFolderExists: true\n            });\n        }\n        if (this._tryTrustCertificate(tempCertificatePath, terminal)) {\n            certificateStore.certificateData = generatedCertificate.pemCertificate;\n            certificateStore.keyData = generatedCertificate.pemKey;\n            // Try to set the friendly name, and warn if we can't\n            if (!this._trySetFriendlyName(tempCertificatePath, terminal)) {\n                terminal.writeWarningLine('Unable to set the certificate\\'s friendly name.');\n            }\n        }\n        else {\n            // Clear out the existing store data, if any exists\n            certificateStore.certificateData = undefined;\n            certificateStore.keyData = undefined;\n        }\n        node_core_library_1.FileSystem.deleteFile(tempCertificatePath);\n    }\n    _certificateHasSubjectAltName() {\n        const certificateData = this._certificateStore.certificateData;\n        if (!certificateData) {\n            return false;\n        }\n        const certificate = forge.pki.certificateFromPem(certificateData);\n        return !!certificate.getExtension('subjectAltName');\n    }\n}\nexports.CertificateManager = CertificateManager;\n//# sourceMappingURL=CertificateManager.js.map"]}