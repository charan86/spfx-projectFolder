{"version":3,"sources":["Sort.js"],"names":["Object","defineProperty","exports","value","LegacyAdapters_1","require","Sort","compareByValue","x","y","undefined","sortBy","array","keySelector","comparer","LegacyAdapters","sortStable","isSorted","previous","element","isSortedBy","previousKey","key","sortMapKeys","map","keyComparer","pairs","Array","from","entries","clear","pair","set","sortSetBy","item","add","sortSet"],"mappings":"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","file":"Sort.js","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst LegacyAdapters_1 = require(\"./LegacyAdapters\");\n/**\n * Operations for sorting collections.\n *\n * @remarks\n * NOTE: Prior to Node 11.x, the `Array.sort()` algorithm is not guaranteed to be stable.  For maximum\n * compatibility, consider using {@link LegacyAdapters.sortStable} instead of `Array.sort()`.\n *\n * @public\n */\nclass Sort {\n    /**\n     * Compares `x` and `y` using the JavaScript `>` and `<` operators.  This function is suitable for usage as\n     * the callback for `array.sort()`.\n     *\n     * @remarks\n     *\n     * The JavaScript ordering is generalized so that `undefined` \\< `null` \\< all other values.\n     *\n     * @returns -1 if `x` is smaller than `y`, 1 if `x` is greater than `y`, or 0 if the values are equal.\n     *\n     * @example\n     *\n     * ```ts\n     * let array: number[] = [3, 6, 2];\n     * array.sort(Sort.compareByValue);  // [2, 3, 6]\n     * ```\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static compareByValue(x, y) {\n        if (x === y) {\n            return 0;\n        }\n        // Undefined is smaller than anything else\n        if (x === undefined) {\n            return -1;\n        }\n        if (y === undefined) {\n            return 1;\n        }\n        // Null is smaller than anything except undefined\n        if (x === null) { // eslint-disable-line @rushstack/no-null\n            return -1;\n        }\n        if (y === null) { // eslint-disable-line @rushstack/no-null\n            return 1;\n        }\n        // These comparisons always return false if either of the arguments is \"undefined\".\n        // These comparisons return nonsense for \"null\" (true for \"null > -1\", but false for \"null < 0\" and \"null > 0\")\n        if (x < y) {\n            return -1;\n        }\n        if (x > y) {\n            return 1;\n        }\n        return 0;\n    }\n    /**\n     * Sorts the array according to a key which is obtained from the array elements.\n     * The result is guaranteed to be a stable sort.\n     *\n     * @example\n     *\n     * ```ts\n     * let array: string[] = [ 'aaa', 'bb', 'c' ];\n     * Sort.sortBy(array, x => x.length);  // [ 'c', 'bb', 'aaa' ]\n     * ```\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static sortBy(array, keySelector, comparer = Sort.compareByValue) {\n        LegacyAdapters_1.LegacyAdapters.sortStable(array, (x, y) => comparer(keySelector(x), keySelector(y)));\n    }\n    /**\n     * Returns true if the array is already sorted.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isSorted(array, comparer = Sort.compareByValue) {\n        let previous = undefined;\n        for (const element of array) {\n            if (comparer(previous, element) > 0) {\n                return false;\n            }\n            previous = element;\n        }\n        return true;\n    }\n    /**\n     * Returns true if the array is already sorted by the specified key.\n     *\n     * @example\n     *\n     * ```ts\n     * let array: string[] = [ 'a', 'bb', 'ccc' ];\n     * Sort.isSortedBy(array, x => x.length); // true\n     * ```\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isSortedBy(array, keySelector, comparer = Sort.compareByValue) {\n        let previousKey = undefined;\n        for (const element of array) {\n            const key = keySelector(element);\n            if (comparer(previousKey, key) > 0) {\n                return false;\n            }\n            previousKey = key;\n        }\n        return true;\n    }\n    /**\n     * Sorts the entries in a Map object according to the map keys.\n     * The result is guaranteed to be a stable sort.\n     *\n     * @example\n     *\n     * ```ts\n     * let map: Map<string, number> = new Map<string, number>();\n     * map.set('zebra', 1);\n     * map.set('goose', 2);\n     * map.set('aardvark', 3);\n     * Sort.sortMapKeys(map);\n     * console.log(JSON.stringify(Array.from(map.keys()))); // [\"aardvark\",\"goose\",\"zebra\"]\n     * ```\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static sortMapKeys(map, keyComparer = Sort.compareByValue) {\n        const pairs = Array.from(map.entries());\n        // Sorting a map is expensive, so first check whether it's already sorted.\n        if (Sort.isSortedBy(pairs, x => x[0], keyComparer)) {\n            return;\n        }\n        Sort.sortBy(pairs, x => x[0], keyComparer);\n        map.clear();\n        for (const pair of pairs) {\n            map.set(pair[0], pair[1]);\n        }\n    }\n    /**\n     * Sorts the entries in a Set object according to the specified keys.\n     * The result is guaranteed to be a stable sort.\n     *\n     * @example\n     *\n     * ```ts\n     * let set: Set<string> = new Set<string>();\n     * set.add('aaa');\n     * set.add('bb');\n     * set.add('c');\n     * Sort.sortSetBy(set, x => x.length);\n     * console.log(Array.from(set)); // ['c', 'bb', 'aaa']\n     * ```\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static sortSetBy(set, keySelector, keyComparer = Sort.compareByValue) {\n        const array = Array.from(set);\n        // Sorting a set is expensive, so first check whether it's already sorted.\n        if (Sort.isSortedBy(array, keySelector, keyComparer)) {\n            return;\n        }\n        LegacyAdapters_1.LegacyAdapters.sortStable(array, (x, y) => keyComparer(keySelector(x), keySelector(y)));\n        set.clear();\n        for (const item of array) {\n            set.add(item);\n        }\n    }\n    /**\n     * Sorts the entries in a Set object.  The result is guaranteed to be a stable sort.\n     *\n     * @example\n     *\n     * ```ts\n     * let set: Set<string> = new Set<string>();\n     * set.add('zebra');\n     * set.add('goose');\n     * set.add('aardvark');\n     * Sort.sortSet(set);\n     * console.log(Array.from(set)); // ['aardvark', 'goose', 'zebra']\n     * ```\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static sortSet(set, comparer = Sort.compareByValue) {\n        const array = Array.from(set);\n        // Sorting a set is expensive, so first check whether it's already sorted.\n        if (Sort.isSorted(array, comparer)) {\n            return;\n        }\n        LegacyAdapters_1.LegacyAdapters.sortStable(array, (x, y) => comparer(x, y));\n        set.clear();\n        for (const item of array) {\n            set.add(item);\n        }\n    }\n}\nexports.Sort = Sort;\n//# sourceMappingURL=Sort.js.map"]}