{"version":3,"sources":["FileWriter.js"],"names":["Object","defineProperty","exports","value","fsx","require","FileWriter","constructor","fileDescriptor","_fileDescriptor","open","path","flags","openSync","_convertFlagsForNode","assign","append","exclusive","join","write","text","Error","writeSync","close","fd","undefined","closeSync"],"mappings":"AAAA;AACA;AACA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,MAAMC,MAAMC,QAAQ,UAAR,CAAZ;AACA;;;;AAIA,MAAMC,UAAN,CAAiB;AACbC,gBAAYC,cAAZ,EAA4B;AACxB,aAAKC,eAAL,GAAuBD,cAAvB;AACH;AACD;;;;;;;;AAQA,WAAOE,IAAP,CAAYC,IAAZ,EAAkBC,KAAlB,EAAyB;AACrB,eAAO,IAAIN,UAAJ,CAAeF,IAAIS,QAAJ,CAAaF,IAAb,EAAmBL,WAAWQ,oBAAX,CAAgCF,KAAhC,CAAnB,CAAf,CAAP;AACH;AACD;;;;AAIA,WAAOE,oBAAP,CAA4BF,KAA5B,EAAmC;AAC/BA,gBAAQZ,OAAOe,MAAP,CAAc,EAAEC,QAAQ,KAAV,EAAiBC,WAAW,KAA5B,EAAd,EAAmDL,KAAnD,CAAR;AACA,eAAO,CAACA,MAAMI,MAAN,GAAe,GAAf,GAAqB,GAAtB,EACHJ,MAAMK,SAAN,GAAkB,GAAlB,GAAwB,EADrB,EAEFC,IAFE,CAEG,EAFH,CAAP;AAGH;AACD;;;;;AAKAC,UAAMC,IAAN,EAAY;AACR,YAAI,CAAC,KAAKX,eAAV,EAA2B;AACvB,kBAAM,IAAIY,KAAJ,CAAW,kEAAX,CAAN;AACH;AACDjB,YAAIkB,SAAJ,CAAc,KAAKb,eAAnB,EAAoCW,IAApC;AACH;AACD;;;;AAIAG,YAAQ;AACJ,cAAMC,KAAK,KAAKf,eAAhB;AACA,YAAIe,EAAJ,EAAQ;AACJ,iBAAKf,eAAL,GAAuBgB,SAAvB;AACArB,gBAAIsB,SAAJ,CAAcF,EAAd;AACH;AACJ;AA9CY;AAgDjBtB,QAAQI,UAAR,GAAqBA,UAArB;AACA","file":"FileWriter.js","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fsx = require(\"fs-extra\");\n/**\n * API for interacting with file handles.\n * @public\n */\nclass FileWriter {\n    constructor(fileDescriptor) {\n        this._fileDescriptor = fileDescriptor;\n    }\n    /**\n     * Opens a new file handle to the file at the specified path and given mode.\n     * Behind the scenes it uses `fs.openSync()`.\n     * The behaviour of this function is platform specific.\n     * See: https://nodejs.org/docs/latest-v8.x/api/fs.html#fs_fs_open_path_flags_mode_callback\n     * @param path - The absolute or relative path to the file handle that should be opened.\n     * @param flags - The flags for opening the handle\n     */\n    static open(path, flags) {\n        return new FileWriter(fsx.openSync(path, FileWriter._convertFlagsForNode(flags)));\n    }\n    /**\n     * Helper function to convert the file writer array to a Node.js style string (e.g. \"wx\" or \"a\").\n     * @param flags - The flags that should be converted.\n     */\n    static _convertFlagsForNode(flags) {\n        flags = Object.assign({ append: false, exclusive: false }, flags);\n        return [flags.append ? 'a' : 'w',\n            flags.exclusive ? 'x' : '']\n            .join('');\n    }\n    /**\n     * Writes some text to the given file handle. Throws if the file handle has been closed.\n     * Behind the scenes it uses `fs.writeSync()`.\n     * @param text - The text to write to the file.\n     */\n    write(text) {\n        if (!this._fileDescriptor) {\n            throw new Error(`Cannot write to file, file descriptor has already been released.`);\n        }\n        fsx.writeSync(this._fileDescriptor, text);\n    }\n    /**\n     * Closes the file handle permanently. No operations can be made on this file handle after calling this.\n     * Behind the scenes it uses `fs.closeSync()` and releases the file descriptor to be re-used.\n     */\n    close() {\n        const fd = this._fileDescriptor;\n        if (fd) {\n            this._fileDescriptor = undefined;\n            fsx.closeSync(fd);\n        }\n    }\n}\nexports.FileWriter = FileWriter;\n//# sourceMappingURL=FileWriter.js.map"]}