30bd5a63925d23a2957c9cc0112ca9d0
"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.

Object.defineProperty(exports, "__esModule", { value: true });
const fsx = require("fs-extra");
/**
 * API for interacting with file handles.
 * @public
 */
class FileWriter {
    constructor(fileDescriptor) {
        this._fileDescriptor = fileDescriptor;
    }
    /**
     * Opens a new file handle to the file at the specified path and given mode.
     * Behind the scenes it uses `fs.openSync()`.
     * The behaviour of this function is platform specific.
     * See: https://nodejs.org/docs/latest-v8.x/api/fs.html#fs_fs_open_path_flags_mode_callback
     * @param path - The absolute or relative path to the file handle that should be opened.
     * @param flags - The flags for opening the handle
     */
    static open(path, flags) {
        return new FileWriter(fsx.openSync(path, FileWriter._convertFlagsForNode(flags)));
    }
    /**
     * Helper function to convert the file writer array to a Node.js style string (e.g. "wx" or "a").
     * @param flags - The flags that should be converted.
     */
    static _convertFlagsForNode(flags) {
        flags = Object.assign({ append: false, exclusive: false }, flags);
        return [flags.append ? 'a' : 'w', flags.exclusive ? 'x' : ''].join('');
    }
    /**
     * Writes some text to the given file handle. Throws if the file handle has been closed.
     * Behind the scenes it uses `fs.writeSync()`.
     * @param text - The text to write to the file.
     */
    write(text) {
        if (!this._fileDescriptor) {
            throw new Error(`Cannot write to file, file descriptor has already been released.`);
        }
        fsx.writeSync(this._fileDescriptor, text);
    }
    /**
     * Closes the file handle permanently. No operations can be made on this file handle after calling this.
     * Behind the scenes it uses `fs.closeSync()` and releases the file descriptor to be re-used.
     */
    close() {
        const fd = this._fileDescriptor;
        if (fd) {
            this._fileDescriptor = undefined;
            fsx.closeSync(fd);
        }
    }
}
exports.FileWriter = FileWriter;
//# sourceMappingURL=FileWriter.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZpbGVXcml0ZXIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmc3giLCJyZXF1aXJlIiwiRmlsZVdyaXRlciIsImNvbnN0cnVjdG9yIiwiZmlsZURlc2NyaXB0b3IiLCJfZmlsZURlc2NyaXB0b3IiLCJvcGVuIiwicGF0aCIsImZsYWdzIiwib3BlblN5bmMiLCJfY29udmVydEZsYWdzRm9yTm9kZSIsImFzc2lnbiIsImFwcGVuZCIsImV4Y2x1c2l2ZSIsImpvaW4iLCJ3cml0ZSIsInRleHQiLCJFcnJvciIsIndyaXRlU3luYyIsImNsb3NlIiwiZmQiLCJ1bmRlZmluZWQiLCJjbG9zZVN5bmMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0EsTUFBTUMsTUFBTUMsUUFBUSxVQUFSLENBQVo7QUFDQTs7OztBQUlBLE1BQU1DLFVBQU4sQ0FBaUI7QUFDYkMsZ0JBQVlDLGNBQVosRUFBNEI7QUFDeEIsYUFBS0MsZUFBTCxHQUF1QkQsY0FBdkI7QUFDSDtBQUNEOzs7Ozs7OztBQVFBLFdBQU9FLElBQVAsQ0FBWUMsSUFBWixFQUFrQkMsS0FBbEIsRUFBeUI7QUFDckIsZUFBTyxJQUFJTixVQUFKLENBQWVGLElBQUlTLFFBQUosQ0FBYUYsSUFBYixFQUFtQkwsV0FBV1Esb0JBQVgsQ0FBZ0NGLEtBQWhDLENBQW5CLENBQWYsQ0FBUDtBQUNIO0FBQ0Q7Ozs7QUFJQSxXQUFPRSxvQkFBUCxDQUE0QkYsS0FBNUIsRUFBbUM7QUFDL0JBLGdCQUFRWixPQUFPZSxNQUFQLENBQWMsRUFBRUMsUUFBUSxLQUFWLEVBQWlCQyxXQUFXLEtBQTVCLEVBQWQsRUFBbURMLEtBQW5ELENBQVI7QUFDQSxlQUFPLENBQUNBLE1BQU1JLE1BQU4sR0FBZSxHQUFmLEdBQXFCLEdBQXRCLEVBQ0hKLE1BQU1LLFNBQU4sR0FBa0IsR0FBbEIsR0FBd0IsRUFEckIsRUFFRkMsSUFGRSxDQUVHLEVBRkgsQ0FBUDtBQUdIO0FBQ0Q7Ozs7O0FBS0FDLFVBQU1DLElBQU4sRUFBWTtBQUNSLFlBQUksQ0FBQyxLQUFLWCxlQUFWLEVBQTJCO0FBQ3ZCLGtCQUFNLElBQUlZLEtBQUosQ0FBVyxrRUFBWCxDQUFOO0FBQ0g7QUFDRGpCLFlBQUlrQixTQUFKLENBQWMsS0FBS2IsZUFBbkIsRUFBb0NXLElBQXBDO0FBQ0g7QUFDRDs7OztBQUlBRyxZQUFRO0FBQ0osY0FBTUMsS0FBSyxLQUFLZixlQUFoQjtBQUNBLFlBQUllLEVBQUosRUFBUTtBQUNKLGlCQUFLZixlQUFMLEdBQXVCZ0IsU0FBdkI7QUFDQXJCLGdCQUFJc0IsU0FBSixDQUFjRixFQUFkO0FBQ0g7QUFDSjtBQTlDWTtBQWdEakJ0QixRQUFRSSxVQUFSLEdBQXFCQSxVQUFyQjtBQUNBIiwiZmlsZSI6IkZpbGVXcml0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vLyBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZnN4ID0gcmVxdWlyZShcImZzLWV4dHJhXCIpO1xuLyoqXG4gKiBBUEkgZm9yIGludGVyYWN0aW5nIHdpdGggZmlsZSBoYW5kbGVzLlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBGaWxlV3JpdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWxlRGVzY3JpcHRvcikge1xuICAgICAgICB0aGlzLl9maWxlRGVzY3JpcHRvciA9IGZpbGVEZXNjcmlwdG9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIG5ldyBmaWxlIGhhbmRsZSB0byB0aGUgZmlsZSBhdCB0aGUgc3BlY2lmaWVkIHBhdGggYW5kIGdpdmVuIG1vZGUuXG4gICAgICogQmVoaW5kIHRoZSBzY2VuZXMgaXQgdXNlcyBgZnMub3BlblN5bmMoKWAuXG4gICAgICogVGhlIGJlaGF2aW91ciBvZiB0aGlzIGZ1bmN0aW9uIGlzIHBsYXRmb3JtIHNwZWNpZmljLlxuICAgICAqIFNlZTogaHR0cHM6Ly9ub2RlanMub3JnL2RvY3MvbGF0ZXN0LXY4LngvYXBpL2ZzLmh0bWwjZnNfZnNfb3Blbl9wYXRoX2ZsYWdzX21vZGVfY2FsbGJhY2tcbiAgICAgKiBAcGFyYW0gcGF0aCAtIFRoZSBhYnNvbHV0ZSBvciByZWxhdGl2ZSBwYXRoIHRvIHRoZSBmaWxlIGhhbmRsZSB0aGF0IHNob3VsZCBiZSBvcGVuZWQuXG4gICAgICogQHBhcmFtIGZsYWdzIC0gVGhlIGZsYWdzIGZvciBvcGVuaW5nIHRoZSBoYW5kbGVcbiAgICAgKi9cbiAgICBzdGF0aWMgb3BlbihwYXRoLCBmbGFncykge1xuICAgICAgICByZXR1cm4gbmV3IEZpbGVXcml0ZXIoZnN4Lm9wZW5TeW5jKHBhdGgsIEZpbGVXcml0ZXIuX2NvbnZlcnRGbGFnc0Zvck5vZGUoZmxhZ3MpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byBjb252ZXJ0IHRoZSBmaWxlIHdyaXRlciBhcnJheSB0byBhIE5vZGUuanMgc3R5bGUgc3RyaW5nIChlLmcuIFwid3hcIiBvciBcImFcIikuXG4gICAgICogQHBhcmFtIGZsYWdzIC0gVGhlIGZsYWdzIHRoYXQgc2hvdWxkIGJlIGNvbnZlcnRlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgX2NvbnZlcnRGbGFnc0Zvck5vZGUoZmxhZ3MpIHtcbiAgICAgICAgZmxhZ3MgPSBPYmplY3QuYXNzaWduKHsgYXBwZW5kOiBmYWxzZSwgZXhjbHVzaXZlOiBmYWxzZSB9LCBmbGFncyk7XG4gICAgICAgIHJldHVybiBbZmxhZ3MuYXBwZW5kID8gJ2EnIDogJ3cnLFxuICAgICAgICAgICAgZmxhZ3MuZXhjbHVzaXZlID8gJ3gnIDogJyddXG4gICAgICAgICAgICAuam9pbignJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBzb21lIHRleHQgdG8gdGhlIGdpdmVuIGZpbGUgaGFuZGxlLiBUaHJvd3MgaWYgdGhlIGZpbGUgaGFuZGxlIGhhcyBiZWVuIGNsb3NlZC5cbiAgICAgKiBCZWhpbmQgdGhlIHNjZW5lcyBpdCB1c2VzIGBmcy53cml0ZVN5bmMoKWAuXG4gICAgICogQHBhcmFtIHRleHQgLSBUaGUgdGV4dCB0byB3cml0ZSB0byB0aGUgZmlsZS5cbiAgICAgKi9cbiAgICB3cml0ZSh0ZXh0KSB7XG4gICAgICAgIGlmICghdGhpcy5fZmlsZURlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHdyaXRlIHRvIGZpbGUsIGZpbGUgZGVzY3JpcHRvciBoYXMgYWxyZWFkeSBiZWVuIHJlbGVhc2VkLmApO1xuICAgICAgICB9XG4gICAgICAgIGZzeC53cml0ZVN5bmModGhpcy5fZmlsZURlc2NyaXB0b3IsIHRleHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIGZpbGUgaGFuZGxlIHBlcm1hbmVudGx5LiBObyBvcGVyYXRpb25zIGNhbiBiZSBtYWRlIG9uIHRoaXMgZmlsZSBoYW5kbGUgYWZ0ZXIgY2FsbGluZyB0aGlzLlxuICAgICAqIEJlaGluZCB0aGUgc2NlbmVzIGl0IHVzZXMgYGZzLmNsb3NlU3luYygpYCBhbmQgcmVsZWFzZXMgdGhlIGZpbGUgZGVzY3JpcHRvciB0byBiZSByZS11c2VkLlxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICBjb25zdCBmZCA9IHRoaXMuX2ZpbGVEZXNjcmlwdG9yO1xuICAgICAgICBpZiAoZmQpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpbGVEZXNjcmlwdG9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZnN4LmNsb3NlU3luYyhmZCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkZpbGVXcml0ZXIgPSBGaWxlV3JpdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmlsZVdyaXRlci5qcy5tYXAiXX0=