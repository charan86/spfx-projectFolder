{"version":3,"sources":["InternalError.js"],"names":["Object","defineProperty","exports","value","InternalError","Error","constructor","message","_formatMessage","__proto__","prototype","unformattedMessage","breakInDebugger","toString"],"mappings":"AAAA;AACA;AACA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA;;;;;;;;;AASA,MAAMC,aAAN,SAA4BC,KAA5B,CAAkC;AAC9B;;;;;;;AAOAC,gBAAYC,OAAZ,EAAqB;AACjB,cAAMH,cAAcI,cAAd,CAA6BD,OAA7B,CAAN;AACA;AACA;AACA;AACA;AACA,aAAKE,SAAL,GAAiBL,cAAcM,SAA/B,CANiB,CAMyB;AAC1C,aAAKC,kBAAL,GAA0BJ,OAA1B;AACA,YAAIH,cAAcQ,eAAlB,EAAmC;AAC/B;AACA;AACH;AACJ;AACD,WAAOJ,cAAP,CAAsBG,kBAAtB,EAA0C;AACtC,eAAQ,mBAAkBA,kBAAmB,6DAAtC,GACA,8DADP;AAEH;AACD;AACAE,eAAW;AACP,eAAO,KAAKN,OAAZ,CADO,CACc;AACxB;AA5B6B;AA8BlC;;;;;;;;AAQAH,cAAcQ,eAAd,GAAgC,IAAhC;AACAV,QAAQE,aAAR,GAAwBA,aAAxB;AACA","file":"InternalError.js","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An `Error` subclass that should be thrown to report an unexpected state that may indicate a software defect.\n * An application may handle this error by instructing the end user to report an issue to the application maintainers.\n *\n * @remarks\n * Do not use this class unless you intend to solicit bug reports from end users.\n *\n * @public\n */\nclass InternalError extends Error {\n    /**\n     * Constructs a new instance of the {@link InternalError} class.\n     *\n     * @param message - A message describing the error.  This will be assigned to\n     * {@link InternalError.unformattedMessage}.  The `Error.message` field will have additional boilerplate\n     * explaining that the user has encountered a software defect.\n     */\n    constructor(message) {\n        super(InternalError._formatMessage(message));\n        // Manually set the prototype, as we can no longer extend built-in classes like Error, Array, Map, etc.\n        // https://github.com/microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        //\n        // Note: the prototype must also be set on any classes which extend this one\n        this.__proto__ = InternalError.prototype; // eslint-disable-line @typescript-eslint/no-explicit-any\n        this.unformattedMessage = message;\n        if (InternalError.breakInDebugger) {\n            // eslint-disable-next-line no-debugger\n            debugger;\n        }\n    }\n    static _formatMessage(unformattedMessage) {\n        return `Internal Error: ${unformattedMessage}\\n\\nYou have encountered a software defect. Please consider`\n            + ` reporting the issue to the maintainers of this application.`;\n    }\n    /** @override */\n    toString() {\n        return this.message; // Avoid adding the \"Error:\" prefix\n    }\n}\n/**\n * If true, a JavScript `debugger;` statement will be invoked whenever the `InternalError` constructor is called.\n *\n * @remarks\n * Generally applications should not be catching and ignoring an `InternalError`.  Instead, the error should\n * be reported and typically the application will terminate.  Thus, if `InternalError` is constructed, it's\n * almost always something we want to examine in a debugger.\n */\nInternalError.breakInDebugger = true;\nexports.InternalError = InternalError;\n//# sourceMappingURL=InternalError.js.map"]}