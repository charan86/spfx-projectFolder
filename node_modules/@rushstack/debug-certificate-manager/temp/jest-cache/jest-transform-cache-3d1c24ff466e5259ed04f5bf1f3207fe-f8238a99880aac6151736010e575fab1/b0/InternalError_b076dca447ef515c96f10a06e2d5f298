f00470d3baf4e14ef4654427f5b93d2f
"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An `Error` subclass that should be thrown to report an unexpected state that may indicate a software defect.
 * An application may handle this error by instructing the end user to report an issue to the application maintainers.
 *
 * @remarks
 * Do not use this class unless you intend to solicit bug reports from end users.
 *
 * @public
 */
class InternalError extends Error {
    /**
     * Constructs a new instance of the {@link InternalError} class.
     *
     * @param message - A message describing the error.  This will be assigned to
     * {@link InternalError.unformattedMessage}.  The `Error.message` field will have additional boilerplate
     * explaining that the user has encountered a software defect.
     */
    constructor(message) {
        super(InternalError._formatMessage(message));
        // Manually set the prototype, as we can no longer extend built-in classes like Error, Array, Map, etc.
        // https://github.com/microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        //
        // Note: the prototype must also be set on any classes which extend this one
        this.__proto__ = InternalError.prototype; // eslint-disable-line @typescript-eslint/no-explicit-any
        this.unformattedMessage = message;
        if (InternalError.breakInDebugger) {
            // eslint-disable-next-line no-debugger
            debugger;
        }
    }
    static _formatMessage(unformattedMessage) {
        return `Internal Error: ${unformattedMessage}\n\nYou have encountered a software defect. Please consider` + ` reporting the issue to the maintainers of this application.`;
    }
    /** @override */
    toString() {
        return this.message; // Avoid adding the "Error:" prefix
    }
}
/**
 * If true, a JavScript `debugger;` statement will be invoked whenever the `InternalError` constructor is called.
 *
 * @remarks
 * Generally applications should not be catching and ignoring an `InternalError`.  Instead, the error should
 * be reported and typically the application will terminate.  Thus, if `InternalError` is constructed, it's
 * almost always something we want to examine in a debugger.
 */
InternalError.breakInDebugger = true;
exports.InternalError = InternalError;
//# sourceMappingURL=InternalError.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkludGVybmFsRXJyb3IuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJJbnRlcm5hbEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJfZm9ybWF0TWVzc2FnZSIsIl9fcHJvdG9fXyIsInByb3RvdHlwZSIsInVuZm9ybWF0dGVkTWVzc2FnZSIsImJyZWFrSW5EZWJ1Z2dlciIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBOzs7Ozs7Ozs7QUFTQSxNQUFNQyxhQUFOLFNBQTRCQyxLQUE1QixDQUFrQztBQUM5Qjs7Ozs7OztBQU9BQyxnQkFBWUMsT0FBWixFQUFxQjtBQUNqQixjQUFNSCxjQUFjSSxjQUFkLENBQTZCRCxPQUE3QixDQUFOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLRSxTQUFMLEdBQWlCTCxjQUFjTSxTQUEvQixDQU5pQixDQU15QjtBQUMxQyxhQUFLQyxrQkFBTCxHQUEwQkosT0FBMUI7QUFDQSxZQUFJSCxjQUFjUSxlQUFsQixFQUFtQztBQUMvQjtBQUNBO0FBQ0g7QUFDSjtBQUNELFdBQU9KLGNBQVAsQ0FBc0JHLGtCQUF0QixFQUEwQztBQUN0QyxlQUFRLG1CQUFrQkEsa0JBQW1CLDZEQUF0QyxHQUNBLDhEQURQO0FBRUg7QUFDRDtBQUNBRSxlQUFXO0FBQ1AsZUFBTyxLQUFLTixPQUFaLENBRE8sQ0FDYztBQUN4QjtBQTVCNkI7QUE4QmxDOzs7Ozs7OztBQVFBSCxjQUFjUSxlQUFkLEdBQWdDLElBQWhDO0FBQ0FWLFFBQVFFLGFBQVIsR0FBd0JBLGFBQXhCO0FBQ0EiLCJmaWxlIjoiSW50ZXJuYWxFcnJvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8vIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEFuIGBFcnJvcmAgc3ViY2xhc3MgdGhhdCBzaG91bGQgYmUgdGhyb3duIHRvIHJlcG9ydCBhbiB1bmV4cGVjdGVkIHN0YXRlIHRoYXQgbWF5IGluZGljYXRlIGEgc29mdHdhcmUgZGVmZWN0LlxuICogQW4gYXBwbGljYXRpb24gbWF5IGhhbmRsZSB0aGlzIGVycm9yIGJ5IGluc3RydWN0aW5nIHRoZSBlbmQgdXNlciB0byByZXBvcnQgYW4gaXNzdWUgdG8gdGhlIGFwcGxpY2F0aW9uIG1haW50YWluZXJzLlxuICpcbiAqIEByZW1hcmtzXG4gKiBEbyBub3QgdXNlIHRoaXMgY2xhc3MgdW5sZXNzIHlvdSBpbnRlbmQgdG8gc29saWNpdCBidWcgcmVwb3J0cyBmcm9tIGVuZCB1c2Vycy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIEludGVybmFsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUge0BsaW5rIEludGVybmFsRXJyb3J9IGNsYXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBBIG1lc3NhZ2UgZGVzY3JpYmluZyB0aGUgZXJyb3IuICBUaGlzIHdpbGwgYmUgYXNzaWduZWQgdG9cbiAgICAgKiB7QGxpbmsgSW50ZXJuYWxFcnJvci51bmZvcm1hdHRlZE1lc3NhZ2V9LiAgVGhlIGBFcnJvci5tZXNzYWdlYCBmaWVsZCB3aWxsIGhhdmUgYWRkaXRpb25hbCBib2lsZXJwbGF0ZVxuICAgICAqIGV4cGxhaW5pbmcgdGhhdCB0aGUgdXNlciBoYXMgZW5jb3VudGVyZWQgYSBzb2Z0d2FyZSBkZWZlY3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihJbnRlcm5hbEVycm9yLl9mb3JtYXRNZXNzYWdlKG1lc3NhZ2UpKTtcbiAgICAgICAgLy8gTWFudWFsbHkgc2V0IHRoZSBwcm90b3R5cGUsIGFzIHdlIGNhbiBubyBsb25nZXIgZXh0ZW5kIGJ1aWx0LWluIGNsYXNzZXMgbGlrZSBFcnJvciwgQXJyYXksIE1hcCwgZXRjLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQtd2lraS9ibG9iL21hc3Rlci9CcmVha2luZy1DaGFuZ2VzLm1kI2V4dGVuZGluZy1idWlsdC1pbnMtbGlrZS1lcnJvci1hcnJheS1hbmQtbWFwLW1heS1uby1sb25nZXItd29ya1xuICAgICAgICAvL1xuICAgICAgICAvLyBOb3RlOiB0aGUgcHJvdG90eXBlIG11c3QgYWxzbyBiZSBzZXQgb24gYW55IGNsYXNzZXMgd2hpY2ggZXh0ZW5kIHRoaXMgb25lXG4gICAgICAgIHRoaXMuX19wcm90b19fID0gSW50ZXJuYWxFcnJvci5wcm90b3R5cGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB0aGlzLnVuZm9ybWF0dGVkTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIGlmIChJbnRlcm5hbEVycm9yLmJyZWFrSW5EZWJ1Z2dlcikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyXG4gICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgX2Zvcm1hdE1lc3NhZ2UodW5mb3JtYXR0ZWRNZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBgSW50ZXJuYWwgRXJyb3I6ICR7dW5mb3JtYXR0ZWRNZXNzYWdlfVxcblxcbllvdSBoYXZlIGVuY291bnRlcmVkIGEgc29mdHdhcmUgZGVmZWN0LiBQbGVhc2UgY29uc2lkZXJgXG4gICAgICAgICAgICArIGAgcmVwb3J0aW5nIHRoZSBpc3N1ZSB0byB0aGUgbWFpbnRhaW5lcnMgb2YgdGhpcyBhcHBsaWNhdGlvbi5gO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7IC8vIEF2b2lkIGFkZGluZyB0aGUgXCJFcnJvcjpcIiBwcmVmaXhcbiAgICB9XG59XG4vKipcbiAqIElmIHRydWUsIGEgSmF2U2NyaXB0IGBkZWJ1Z2dlcjtgIHN0YXRlbWVudCB3aWxsIGJlIGludm9rZWQgd2hlbmV2ZXIgdGhlIGBJbnRlcm5hbEVycm9yYCBjb25zdHJ1Y3RvciBpcyBjYWxsZWQuXG4gKlxuICogQHJlbWFya3NcbiAqIEdlbmVyYWxseSBhcHBsaWNhdGlvbnMgc2hvdWxkIG5vdCBiZSBjYXRjaGluZyBhbmQgaWdub3JpbmcgYW4gYEludGVybmFsRXJyb3JgLiAgSW5zdGVhZCwgdGhlIGVycm9yIHNob3VsZFxuICogYmUgcmVwb3J0ZWQgYW5kIHR5cGljYWxseSB0aGUgYXBwbGljYXRpb24gd2lsbCB0ZXJtaW5hdGUuICBUaHVzLCBpZiBgSW50ZXJuYWxFcnJvcmAgaXMgY29uc3RydWN0ZWQsIGl0J3NcbiAqIGFsbW9zdCBhbHdheXMgc29tZXRoaW5nIHdlIHdhbnQgdG8gZXhhbWluZSBpbiBhIGRlYnVnZ2VyLlxuICovXG5JbnRlcm5hbEVycm9yLmJyZWFrSW5EZWJ1Z2dlciA9IHRydWU7XG5leHBvcnRzLkludGVybmFsRXJyb3IgPSBJbnRlcm5hbEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW50ZXJuYWxFcnJvci5qcy5tYXAiXX0=