48a7dcecd77834687324cd9c2052469b
"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.

Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
/**
 * Common operations for manipulating file and directory paths.
 * @remarks
 * This API is intended to eventually be a complete replacement for the NodeJS "path" API.
 * @public
 */
class Path {
  /**
   * Returns true if "childPath" is located inside the "parentFolderPath" folder
   * or one of its child folders.  Note that "parentFolderPath" is not considered to be
   * under itself.  The "childPath" can refer to any type of file system object.
   *
   * @remarks
   * The indicated file/folder objects are not required to actually exist on disk.
   * For example, "parentFolderPath" is interpreted as a folder name even if it refers to a file.
   * If the paths are relative, they will first be resolved using path.resolve().
   */
  static isUnder(childPath, parentFolderPath) {
    // If childPath is under parentPath, then relativePath will be something like
    // "../.." or "..\\..", which consists entirely of periods and slashes.
    // (Note that something like "....t" is actually a valid filename, but "...." is not.)
    const relativePath = path.relative(childPath, parentFolderPath);
    return Path._relativePathRegex.test(relativePath);
  }
  /**
   * Returns true if "childPath" is equal to "parentFolderPath", or if it is inside that folder
   * or one of its children.  The "childPath" can refer to any type of file system object.
   *
   * @remarks
   * The indicated file/folder objects are not required to actually exist on disk.
   * For example, "parentFolderPath" is interpreted as a folder name even if it refers to a file.
   * If the paths are relative, they will first be resolved using path.resolve().
   */
  static isUnderOrEqual(childPath, parentFolderPath) {
    const relativePath = path.relative(childPath, parentFolderPath);
    return relativePath === '' || Path._relativePathRegex.test(relativePath);
  }
}
Path._relativePathRegex = /^[.\/\\]+$/;
exports.Path = Path;
//# sourceMappingURL=Path.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBhdGguanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXRoIiwicmVxdWlyZSIsIlBhdGgiLCJpc1VuZGVyIiwiY2hpbGRQYXRoIiwicGFyZW50Rm9sZGVyUGF0aCIsInJlbGF0aXZlUGF0aCIsInJlbGF0aXZlIiwiX3JlbGF0aXZlUGF0aFJlZ2V4IiwidGVzdCIsImlzVW5kZXJPckVxdWFsIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBLE1BQU1DLE9BQU9DLFFBQVEsTUFBUixDQUFiO0FBQ0E7Ozs7OztBQU1BLE1BQU1DLElBQU4sQ0FBVztBQUNQOzs7Ozs7Ozs7O0FBVUEsU0FBT0MsT0FBUCxDQUFlQyxTQUFmLEVBQTBCQyxnQkFBMUIsRUFBNEM7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsVUFBTUMsZUFBZU4sS0FBS08sUUFBTCxDQUFjSCxTQUFkLEVBQXlCQyxnQkFBekIsQ0FBckI7QUFDQSxXQUFPSCxLQUFLTSxrQkFBTCxDQUF3QkMsSUFBeEIsQ0FBNkJILFlBQTdCLENBQVA7QUFDSDtBQUNEOzs7Ozs7Ozs7QUFTQSxTQUFPSSxjQUFQLENBQXNCTixTQUF0QixFQUFpQ0MsZ0JBQWpDLEVBQW1EO0FBQy9DLFVBQU1DLGVBQWVOLEtBQUtPLFFBQUwsQ0FBY0gsU0FBZCxFQUF5QkMsZ0JBQXpCLENBQXJCO0FBQ0EsV0FBT0MsaUJBQWlCLEVBQWpCLElBQXVCSixLQUFLTSxrQkFBTCxDQUF3QkMsSUFBeEIsQ0FBNkJILFlBQTdCLENBQTlCO0FBQ0g7QUE5Qk07QUFnQ1hKLEtBQUtNLGtCQUFMLEdBQTBCLFlBQTFCO0FBQ0FWLFFBQVFJLElBQVIsR0FBZUEsSUFBZjtBQUNBIiwiZmlsZSI6IlBhdGguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vLyBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuLyoqXG4gKiBDb21tb24gb3BlcmF0aW9ucyBmb3IgbWFuaXB1bGF0aW5nIGZpbGUgYW5kIGRpcmVjdG9yeSBwYXRocy5cbiAqIEByZW1hcmtzXG4gKiBUaGlzIEFQSSBpcyBpbnRlbmRlZCB0byBldmVudHVhbGx5IGJlIGEgY29tcGxldGUgcmVwbGFjZW1lbnQgZm9yIHRoZSBOb2RlSlMgXCJwYXRoXCIgQVBJLlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBQYXRoIHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgXCJjaGlsZFBhdGhcIiBpcyBsb2NhdGVkIGluc2lkZSB0aGUgXCJwYXJlbnRGb2xkZXJQYXRoXCIgZm9sZGVyXG4gICAgICogb3Igb25lIG9mIGl0cyBjaGlsZCBmb2xkZXJzLiAgTm90ZSB0aGF0IFwicGFyZW50Rm9sZGVyUGF0aFwiIGlzIG5vdCBjb25zaWRlcmVkIHRvIGJlXG4gICAgICogdW5kZXIgaXRzZWxmLiAgVGhlIFwiY2hpbGRQYXRoXCIgY2FuIHJlZmVyIHRvIGFueSB0eXBlIG9mIGZpbGUgc3lzdGVtIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhlIGluZGljYXRlZCBmaWxlL2ZvbGRlciBvYmplY3RzIGFyZSBub3QgcmVxdWlyZWQgdG8gYWN0dWFsbHkgZXhpc3Qgb24gZGlzay5cbiAgICAgKiBGb3IgZXhhbXBsZSwgXCJwYXJlbnRGb2xkZXJQYXRoXCIgaXMgaW50ZXJwcmV0ZWQgYXMgYSBmb2xkZXIgbmFtZSBldmVuIGlmIGl0IHJlZmVycyB0byBhIGZpbGUuXG4gICAgICogSWYgdGhlIHBhdGhzIGFyZSByZWxhdGl2ZSwgdGhleSB3aWxsIGZpcnN0IGJlIHJlc29sdmVkIHVzaW5nIHBhdGgucmVzb2x2ZSgpLlxuICAgICAqL1xuICAgIHN0YXRpYyBpc1VuZGVyKGNoaWxkUGF0aCwgcGFyZW50Rm9sZGVyUGF0aCkge1xuICAgICAgICAvLyBJZiBjaGlsZFBhdGggaXMgdW5kZXIgcGFyZW50UGF0aCwgdGhlbiByZWxhdGl2ZVBhdGggd2lsbCBiZSBzb21ldGhpbmcgbGlrZVxuICAgICAgICAvLyBcIi4uLy4uXCIgb3IgXCIuLlxcXFwuLlwiLCB3aGljaCBjb25zaXN0cyBlbnRpcmVseSBvZiBwZXJpb2RzIGFuZCBzbGFzaGVzLlxuICAgICAgICAvLyAoTm90ZSB0aGF0IHNvbWV0aGluZyBsaWtlIFwiLi4uLnRcIiBpcyBhY3R1YWxseSBhIHZhbGlkIGZpbGVuYW1lLCBidXQgXCIuLi4uXCIgaXMgbm90LilcbiAgICAgICAgY29uc3QgcmVsYXRpdmVQYXRoID0gcGF0aC5yZWxhdGl2ZShjaGlsZFBhdGgsIHBhcmVudEZvbGRlclBhdGgpO1xuICAgICAgICByZXR1cm4gUGF0aC5fcmVsYXRpdmVQYXRoUmVnZXgudGVzdChyZWxhdGl2ZVBhdGgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgXCJjaGlsZFBhdGhcIiBpcyBlcXVhbCB0byBcInBhcmVudEZvbGRlclBhdGhcIiwgb3IgaWYgaXQgaXMgaW5zaWRlIHRoYXQgZm9sZGVyXG4gICAgICogb3Igb25lIG9mIGl0cyBjaGlsZHJlbi4gIFRoZSBcImNoaWxkUGF0aFwiIGNhbiByZWZlciB0byBhbnkgdHlwZSBvZiBmaWxlIHN5c3RlbSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoZSBpbmRpY2F0ZWQgZmlsZS9mb2xkZXIgb2JqZWN0cyBhcmUgbm90IHJlcXVpcmVkIHRvIGFjdHVhbGx5IGV4aXN0IG9uIGRpc2suXG4gICAgICogRm9yIGV4YW1wbGUsIFwicGFyZW50Rm9sZGVyUGF0aFwiIGlzIGludGVycHJldGVkIGFzIGEgZm9sZGVyIG5hbWUgZXZlbiBpZiBpdCByZWZlcnMgdG8gYSBmaWxlLlxuICAgICAqIElmIHRoZSBwYXRocyBhcmUgcmVsYXRpdmUsIHRoZXkgd2lsbCBmaXJzdCBiZSByZXNvbHZlZCB1c2luZyBwYXRoLnJlc29sdmUoKS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNVbmRlck9yRXF1YWwoY2hpbGRQYXRoLCBwYXJlbnRGb2xkZXJQYXRoKSB7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IHBhdGgucmVsYXRpdmUoY2hpbGRQYXRoLCBwYXJlbnRGb2xkZXJQYXRoKTtcbiAgICAgICAgcmV0dXJuIHJlbGF0aXZlUGF0aCA9PT0gJycgfHwgUGF0aC5fcmVsYXRpdmVQYXRoUmVnZXgudGVzdChyZWxhdGl2ZVBhdGgpO1xuICAgIH1cbn1cblBhdGguX3JlbGF0aXZlUGF0aFJlZ2V4ID0gL15bLlxcL1xcXFxdKyQvO1xuZXhwb3J0cy5QYXRoID0gUGF0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBhdGguanMubWFwIl19