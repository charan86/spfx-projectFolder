cdae3d19637fa4b33092aff8cfc052b6
"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.

Object.defineProperty(exports, "__esModule", { value: true });
const ITerminalProvider_1 = require("./ITerminalProvider");
const StringBuilder_1 = require("../StringBuilder");
const Text_1 = require("../Text");
/**
 * Terminal provider that stores written data in buffers separated by severity.
 * This terminal provider is designed to be used when code that prints to a terminal
 * is being unit tested.
 *
 * @beta
 */
class StringBufferTerminalProvider {
    constructor(supportsColor = false) {
        this._standardBuffer = new StringBuilder_1.StringBuilder();
        this._verboseBuffer = new StringBuilder_1.StringBuilder();
        this._warningBuffer = new StringBuilder_1.StringBuilder();
        this._errorBuffer = new StringBuilder_1.StringBuilder();
        this._supportsColor = supportsColor;
    }
    /**
     * {@inheritDoc ITerminalProvider.write}
     */
    write(data, severity) {
        switch (severity) {
            case ITerminalProvider_1.TerminalProviderSeverity.warning:
                {
                    this._warningBuffer.append(data);
                    break;
                }
            case ITerminalProvider_1.TerminalProviderSeverity.error:
                {
                    this._errorBuffer.append(data);
                    break;
                }
            case ITerminalProvider_1.TerminalProviderSeverity.verbose:
                {
                    this._verboseBuffer.append(data);
                    break;
                }
            case ITerminalProvider_1.TerminalProviderSeverity.log:
            default:
                {
                    this._standardBuffer.append(data);
                    break;
                }
        }
    }
    /**
     * {@inheritDoc ITerminalProvider.eolCharacter}
     */
    get eolCharacter() {
        return '[n]';
    }
    /**
     * {@inheritDoc ITerminalProvider.supportsColor}
     */
    get supportsColor() {
        return this._supportsColor;
    }
    /**
     * Get everything that has been written at log-level severity.
     */
    getOutput() {
        return this._normalizeOutput(this._standardBuffer.toString());
    }
    /**
     * Get everything that has been written at verbose-level severity.
     */
    getVerbose() {
        return this._normalizeOutput(this._verboseBuffer.toString());
    }
    /**
     * Get everything that has been written at error-level severity.
     */
    getErrorOutput() {
        return this._normalizeOutput(this._errorBuffer.toString());
    }
    /**
     * Get everything that has been written at warning-level severity.
     */
    getWarningOutput() {
        return this._normalizeOutput(this._warningBuffer.toString());
    }
    _normalizeOutput(s) {
        return Text_1.Text.convertToLf(s).replace(/\u001b/g, '[x]') // eslint-disable-line no-control-regex
        .replace(/\n/g, '[-n-]').replace(/\r/g, '[-r-]');
    }
}
exports.StringBufferTerminalProvider = StringBufferTerminalProvider;
//# sourceMappingURL=StringBufferTerminalProvider.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN0cmluZ0J1ZmZlclRlcm1pbmFsUHJvdmlkZXIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJJVGVybWluYWxQcm92aWRlcl8xIiwicmVxdWlyZSIsIlN0cmluZ0J1aWxkZXJfMSIsIlRleHRfMSIsIlN0cmluZ0J1ZmZlclRlcm1pbmFsUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsInN1cHBvcnRzQ29sb3IiLCJfc3RhbmRhcmRCdWZmZXIiLCJTdHJpbmdCdWlsZGVyIiwiX3ZlcmJvc2VCdWZmZXIiLCJfd2FybmluZ0J1ZmZlciIsIl9lcnJvckJ1ZmZlciIsIl9zdXBwb3J0c0NvbG9yIiwid3JpdGUiLCJkYXRhIiwic2V2ZXJpdHkiLCJUZXJtaW5hbFByb3ZpZGVyU2V2ZXJpdHkiLCJ3YXJuaW5nIiwiYXBwZW5kIiwiZXJyb3IiLCJ2ZXJib3NlIiwibG9nIiwiZW9sQ2hhcmFjdGVyIiwiZ2V0T3V0cHV0IiwiX25vcm1hbGl6ZU91dHB1dCIsInRvU3RyaW5nIiwiZ2V0VmVyYm9zZSIsImdldEVycm9yT3V0cHV0IiwiZ2V0V2FybmluZ091dHB1dCIsInMiLCJUZXh0IiwiY29udmVydFRvTGYiLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBLE1BQU1DLHNCQUFzQkMsUUFBUSxxQkFBUixDQUE1QjtBQUNBLE1BQU1DLGtCQUFrQkQsUUFBUSxrQkFBUixDQUF4QjtBQUNBLE1BQU1FLFNBQVNGLFFBQVEsU0FBUixDQUFmO0FBQ0E7Ozs7Ozs7QUFPQSxNQUFNRyw0QkFBTixDQUFtQztBQUMvQkMsZ0JBQVlDLGdCQUFnQixLQUE1QixFQUFtQztBQUMvQixhQUFLQyxlQUFMLEdBQXVCLElBQUlMLGdCQUFnQk0sYUFBcEIsRUFBdkI7QUFDQSxhQUFLQyxjQUFMLEdBQXNCLElBQUlQLGdCQUFnQk0sYUFBcEIsRUFBdEI7QUFDQSxhQUFLRSxjQUFMLEdBQXNCLElBQUlSLGdCQUFnQk0sYUFBcEIsRUFBdEI7QUFDQSxhQUFLRyxZQUFMLEdBQW9CLElBQUlULGdCQUFnQk0sYUFBcEIsRUFBcEI7QUFDQSxhQUFLSSxjQUFMLEdBQXNCTixhQUF0QjtBQUNIO0FBQ0Q7OztBQUdBTyxVQUFNQyxJQUFOLEVBQVlDLFFBQVosRUFBc0I7QUFDbEIsZ0JBQVFBLFFBQVI7QUFDSSxpQkFBS2Ysb0JBQW9CZ0Isd0JBQXBCLENBQTZDQyxPQUFsRDtBQUEyRDtBQUN2RCx5QkFBS1AsY0FBTCxDQUFvQlEsTUFBcEIsQ0FBMkJKLElBQTNCO0FBQ0E7QUFDSDtBQUNELGlCQUFLZCxvQkFBb0JnQix3QkFBcEIsQ0FBNkNHLEtBQWxEO0FBQXlEO0FBQ3JELHlCQUFLUixZQUFMLENBQWtCTyxNQUFsQixDQUF5QkosSUFBekI7QUFDQTtBQUNIO0FBQ0QsaUJBQUtkLG9CQUFvQmdCLHdCQUFwQixDQUE2Q0ksT0FBbEQ7QUFBMkQ7QUFDdkQseUJBQUtYLGNBQUwsQ0FBb0JTLE1BQXBCLENBQTJCSixJQUEzQjtBQUNBO0FBQ0g7QUFDRCxpQkFBS2Qsb0JBQW9CZ0Isd0JBQXBCLENBQTZDSyxHQUFsRDtBQUNBO0FBQVM7QUFDTCx5QkFBS2QsZUFBTCxDQUFxQlcsTUFBckIsQ0FBNEJKLElBQTVCO0FBQ0E7QUFDSDtBQWpCTDtBQW1CSDtBQUNEOzs7QUFHQSxRQUFJUSxZQUFKLEdBQW1CO0FBQ2YsZUFBTyxLQUFQO0FBQ0g7QUFDRDs7O0FBR0EsUUFBSWhCLGFBQUosR0FBb0I7QUFDaEIsZUFBTyxLQUFLTSxjQUFaO0FBQ0g7QUFDRDs7O0FBR0FXLGdCQUFZO0FBQ1IsZUFBTyxLQUFLQyxnQkFBTCxDQUFzQixLQUFLakIsZUFBTCxDQUFxQmtCLFFBQXJCLEVBQXRCLENBQVA7QUFDSDtBQUNEOzs7QUFHQUMsaUJBQWE7QUFDVCxlQUFPLEtBQUtGLGdCQUFMLENBQXNCLEtBQUtmLGNBQUwsQ0FBb0JnQixRQUFwQixFQUF0QixDQUFQO0FBQ0g7QUFDRDs7O0FBR0FFLHFCQUFpQjtBQUNiLGVBQU8sS0FBS0gsZ0JBQUwsQ0FBc0IsS0FBS2IsWUFBTCxDQUFrQmMsUUFBbEIsRUFBdEIsQ0FBUDtBQUNIO0FBQ0Q7OztBQUdBRyx1QkFBbUI7QUFDZixlQUFPLEtBQUtKLGdCQUFMLENBQXNCLEtBQUtkLGNBQUwsQ0FBb0JlLFFBQXBCLEVBQXRCLENBQVA7QUFDSDtBQUNERCxxQkFBaUJLLENBQWpCLEVBQW9CO0FBQ2hCLGVBQU8xQixPQUFPMkIsSUFBUCxDQUFZQyxXQUFaLENBQXdCRixDQUF4QixFQUNGRyxPQURFLENBQ00sU0FETixFQUNpQixLQURqQixFQUN3QjtBQUR4QixTQUVGQSxPQUZFLENBRU0sS0FGTixFQUVhLE9BRmIsRUFHRkEsT0FIRSxDQUdNLEtBSE4sRUFHYSxPQUhiLENBQVA7QUFJSDtBQXpFOEI7QUEyRW5DbEMsUUFBUU0sNEJBQVIsR0FBdUNBLDRCQUF2QztBQUNBIiwiZmlsZSI6IlN0cmluZ0J1ZmZlclRlcm1pbmFsUHJvdmlkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vLyBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgSVRlcm1pbmFsUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL0lUZXJtaW5hbFByb3ZpZGVyXCIpO1xuY29uc3QgU3RyaW5nQnVpbGRlcl8xID0gcmVxdWlyZShcIi4uL1N0cmluZ0J1aWxkZXJcIik7XG5jb25zdCBUZXh0XzEgPSByZXF1aXJlKFwiLi4vVGV4dFwiKTtcbi8qKlxuICogVGVybWluYWwgcHJvdmlkZXIgdGhhdCBzdG9yZXMgd3JpdHRlbiBkYXRhIGluIGJ1ZmZlcnMgc2VwYXJhdGVkIGJ5IHNldmVyaXR5LlxuICogVGhpcyB0ZXJtaW5hbCBwcm92aWRlciBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIHdoZW4gY29kZSB0aGF0IHByaW50cyB0byBhIHRlcm1pbmFsXG4gKiBpcyBiZWluZyB1bml0IHRlc3RlZC5cbiAqXG4gKiBAYmV0YVxuICovXG5jbGFzcyBTdHJpbmdCdWZmZXJUZXJtaW5hbFByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzdXBwb3J0c0NvbG9yID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5fc3RhbmRhcmRCdWZmZXIgPSBuZXcgU3RyaW5nQnVpbGRlcl8xLlN0cmluZ0J1aWxkZXIoKTtcbiAgICAgICAgdGhpcy5fdmVyYm9zZUJ1ZmZlciA9IG5ldyBTdHJpbmdCdWlsZGVyXzEuU3RyaW5nQnVpbGRlcigpO1xuICAgICAgICB0aGlzLl93YXJuaW5nQnVmZmVyID0gbmV3IFN0cmluZ0J1aWxkZXJfMS5TdHJpbmdCdWlsZGVyKCk7XG4gICAgICAgIHRoaXMuX2Vycm9yQnVmZmVyID0gbmV3IFN0cmluZ0J1aWxkZXJfMS5TdHJpbmdCdWlsZGVyKCk7XG4gICAgICAgIHRoaXMuX3N1cHBvcnRzQ29sb3IgPSBzdXBwb3J0c0NvbG9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGluaGVyaXREb2MgSVRlcm1pbmFsUHJvdmlkZXIud3JpdGV9XG4gICAgICovXG4gICAgd3JpdGUoZGF0YSwgc2V2ZXJpdHkpIHtcbiAgICAgICAgc3dpdGNoIChzZXZlcml0eSkge1xuICAgICAgICAgICAgY2FzZSBJVGVybWluYWxQcm92aWRlcl8xLlRlcm1pbmFsUHJvdmlkZXJTZXZlcml0eS53YXJuaW5nOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2FybmluZ0J1ZmZlci5hcHBlbmQoZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIElUZXJtaW5hbFByb3ZpZGVyXzEuVGVybWluYWxQcm92aWRlclNldmVyaXR5LmVycm9yOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyb3JCdWZmZXIuYXBwZW5kKGRhdGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJVGVybWluYWxQcm92aWRlcl8xLlRlcm1pbmFsUHJvdmlkZXJTZXZlcml0eS52ZXJib3NlOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmVyYm9zZUJ1ZmZlci5hcHBlbmQoZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIElUZXJtaW5hbFByb3ZpZGVyXzEuVGVybWluYWxQcm92aWRlclNldmVyaXR5LmxvZzpcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFuZGFyZEJ1ZmZlci5hcHBlbmQoZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICoge0Bpbmhlcml0RG9jIElUZXJtaW5hbFByb3ZpZGVyLmVvbENoYXJhY3Rlcn1cbiAgICAgKi9cbiAgICBnZXQgZW9sQ2hhcmFjdGVyKCkge1xuICAgICAgICByZXR1cm4gJ1tuXSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAaW5oZXJpdERvYyBJVGVybWluYWxQcm92aWRlci5zdXBwb3J0c0NvbG9yfVxuICAgICAqL1xuICAgIGdldCBzdXBwb3J0c0NvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3VwcG9ydHNDb2xvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGV2ZXJ5dGhpbmcgdGhhdCBoYXMgYmVlbiB3cml0dGVuIGF0IGxvZy1sZXZlbCBzZXZlcml0eS5cbiAgICAgKi9cbiAgICBnZXRPdXRwdXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxpemVPdXRwdXQodGhpcy5fc3RhbmRhcmRCdWZmZXIudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBldmVyeXRoaW5nIHRoYXQgaGFzIGJlZW4gd3JpdHRlbiBhdCB2ZXJib3NlLWxldmVsIHNldmVyaXR5LlxuICAgICAqL1xuICAgIGdldFZlcmJvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxpemVPdXRwdXQodGhpcy5fdmVyYm9zZUJ1ZmZlci50b1N0cmluZygpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGV2ZXJ5dGhpbmcgdGhhdCBoYXMgYmVlbiB3cml0dGVuIGF0IGVycm9yLWxldmVsIHNldmVyaXR5LlxuICAgICAqL1xuICAgIGdldEVycm9yT3V0cHV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplT3V0cHV0KHRoaXMuX2Vycm9yQnVmZmVyLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgZXZlcnl0aGluZyB0aGF0IGhhcyBiZWVuIHdyaXR0ZW4gYXQgd2FybmluZy1sZXZlbCBzZXZlcml0eS5cbiAgICAgKi9cbiAgICBnZXRXYXJuaW5nT3V0cHV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplT3V0cHV0KHRoaXMuX3dhcm5pbmdCdWZmZXIudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIF9ub3JtYWxpemVPdXRwdXQocykge1xuICAgICAgICByZXR1cm4gVGV4dF8xLlRleHQuY29udmVydFRvTGYocylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHUwMDFiL2csICdbeF0nKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXG4vZywgJ1stbi1dJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHIvZywgJ1stci1dJyk7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJpbmdCdWZmZXJUZXJtaW5hbFByb3ZpZGVyID0gU3RyaW5nQnVmZmVyVGVybWluYWxQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0cmluZ0J1ZmZlclRlcm1pbmFsUHJvdmlkZXIuanMubWFwIl19