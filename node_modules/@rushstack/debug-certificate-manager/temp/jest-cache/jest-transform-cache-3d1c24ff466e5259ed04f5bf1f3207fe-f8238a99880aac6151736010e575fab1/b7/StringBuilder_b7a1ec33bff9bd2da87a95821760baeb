9335c091934ce251002dc447c829176a
"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This class allows a large text string to be constructed incrementally by appending small chunks.  The final
 * string can be obtained by calling StringBuilder.toString().
 *
 * @remarks
 * A naive approach might use the `+=` operator to append strings:  This would have the downside of copying
 * the entire string each time a chunk is appended, resulting in `O(n^2)` bytes of memory being allocated
 * (and later freed by the garbage  collector), and many of the allocations could be very large objects.
 * StringBuilder avoids this overhead by accumulating the chunks in an array, and efficiently joining them
 * when `getText()` is finally called.
 *
 * @public
 */
class StringBuilder {
    constructor() {
        this._chunks = [];
    }
    /** {@inheritDoc IStringBuilder.append} */
    append(text) {
        this._chunks.push(text);
    }
    /** {@inheritDoc IStringBuilder.toString} */
    toString() {
        if (this._chunks.length === 0) {
            return '';
        }
        if (this._chunks.length > 1) {
            const joined = this._chunks.join('');
            this._chunks.length = 1;
            this._chunks[0] = joined;
        }
        return this._chunks[0];
    }
}
exports.StringBuilder = StringBuilder;
//# sourceMappingURL=StringBuilder.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN0cmluZ0J1aWxkZXIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTdHJpbmdCdWlsZGVyIiwiY29uc3RydWN0b3IiLCJfY2h1bmtzIiwiYXBwZW5kIiwidGV4dCIsInB1c2giLCJ0b1N0cmluZyIsImxlbmd0aCIsImpvaW5lZCIsImpvaW4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUFhQSxNQUFNQyxhQUFOLENBQW9CO0FBQ2hCQyxrQkFBYztBQUNWLGFBQUtDLE9BQUwsR0FBZSxFQUFmO0FBQ0g7QUFDRDtBQUNBQyxXQUFPQyxJQUFQLEVBQWE7QUFDVCxhQUFLRixPQUFMLENBQWFHLElBQWIsQ0FBa0JELElBQWxCO0FBQ0g7QUFDRDtBQUNBRSxlQUFXO0FBQ1AsWUFBSSxLQUFLSixPQUFMLENBQWFLLE1BQWIsS0FBd0IsQ0FBNUIsRUFBK0I7QUFDM0IsbUJBQU8sRUFBUDtBQUNIO0FBQ0QsWUFBSSxLQUFLTCxPQUFMLENBQWFLLE1BQWIsR0FBc0IsQ0FBMUIsRUFBNkI7QUFDekIsa0JBQU1DLFNBQVMsS0FBS04sT0FBTCxDQUFhTyxJQUFiLENBQWtCLEVBQWxCLENBQWY7QUFDQSxpQkFBS1AsT0FBTCxDQUFhSyxNQUFiLEdBQXNCLENBQXRCO0FBQ0EsaUJBQUtMLE9BQUwsQ0FBYSxDQUFiLElBQWtCTSxNQUFsQjtBQUNIO0FBQ0QsZUFBTyxLQUFLTixPQUFMLENBQWEsQ0FBYixDQUFQO0FBQ0g7QUFuQmU7QUFxQnBCSixRQUFRRSxhQUFSLEdBQXdCQSxhQUF4QjtBQUNBIiwiZmlsZSI6IlN0cmluZ0J1aWxkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vLyBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBUaGlzIGNsYXNzIGFsbG93cyBhIGxhcmdlIHRleHQgc3RyaW5nIHRvIGJlIGNvbnN0cnVjdGVkIGluY3JlbWVudGFsbHkgYnkgYXBwZW5kaW5nIHNtYWxsIGNodW5rcy4gIFRoZSBmaW5hbFxuICogc3RyaW5nIGNhbiBiZSBvYnRhaW5lZCBieSBjYWxsaW5nIFN0cmluZ0J1aWxkZXIudG9TdHJpbmcoKS5cbiAqXG4gKiBAcmVtYXJrc1xuICogQSBuYWl2ZSBhcHByb2FjaCBtaWdodCB1c2UgdGhlIGArPWAgb3BlcmF0b3IgdG8gYXBwZW5kIHN0cmluZ3M6ICBUaGlzIHdvdWxkIGhhdmUgdGhlIGRvd25zaWRlIG9mIGNvcHlpbmdcbiAqIHRoZSBlbnRpcmUgc3RyaW5nIGVhY2ggdGltZSBhIGNodW5rIGlzIGFwcGVuZGVkLCByZXN1bHRpbmcgaW4gYE8obl4yKWAgYnl0ZXMgb2YgbWVtb3J5IGJlaW5nIGFsbG9jYXRlZFxuICogKGFuZCBsYXRlciBmcmVlZCBieSB0aGUgZ2FyYmFnZSAgY29sbGVjdG9yKSwgYW5kIG1hbnkgb2YgdGhlIGFsbG9jYXRpb25zIGNvdWxkIGJlIHZlcnkgbGFyZ2Ugb2JqZWN0cy5cbiAqIFN0cmluZ0J1aWxkZXIgYXZvaWRzIHRoaXMgb3ZlcmhlYWQgYnkgYWNjdW11bGF0aW5nIHRoZSBjaHVua3MgaW4gYW4gYXJyYXksIGFuZCBlZmZpY2llbnRseSBqb2luaW5nIHRoZW1cbiAqIHdoZW4gYGdldFRleHQoKWAgaXMgZmluYWxseSBjYWxsZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBTdHJpbmdCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fY2h1bmtzID0gW107XG4gICAgfVxuICAgIC8qKiB7QGluaGVyaXREb2MgSVN0cmluZ0J1aWxkZXIuYXBwZW5kfSAqL1xuICAgIGFwcGVuZCh0ZXh0KSB7XG4gICAgICAgIHRoaXMuX2NodW5rcy5wdXNoKHRleHQpO1xuICAgIH1cbiAgICAvKioge0Bpbmhlcml0RG9jIElTdHJpbmdCdWlsZGVyLnRvU3RyaW5nfSAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBpZiAodGhpcy5fY2h1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jaHVua3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3Qgam9pbmVkID0gdGhpcy5fY2h1bmtzLmpvaW4oJycpO1xuICAgICAgICAgICAgdGhpcy5fY2h1bmtzLmxlbmd0aCA9IDE7XG4gICAgICAgICAgICB0aGlzLl9jaHVua3NbMF0gPSBqb2luZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NodW5rc1swXTtcbiAgICB9XG59XG5leHBvcnRzLlN0cmluZ0J1aWxkZXIgPSBTdHJpbmdCdWlsZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RyaW5nQnVpbGRlci5qcy5tYXAiXX0=