{"version":3,"sources":["StringBuilder.js"],"names":["Object","defineProperty","exports","value","StringBuilder","constructor","_chunks","append","text","push","toString","length","joined","join"],"mappings":"AAAA;AACA;AACA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA;;;;;;;;;;;;;AAaA,MAAMC,aAAN,CAAoB;AAChBC,kBAAc;AACV,aAAKC,OAAL,GAAe,EAAf;AACH;AACD;AACAC,WAAOC,IAAP,EAAa;AACT,aAAKF,OAAL,CAAaG,IAAb,CAAkBD,IAAlB;AACH;AACD;AACAE,eAAW;AACP,YAAI,KAAKJ,OAAL,CAAaK,MAAb,KAAwB,CAA5B,EAA+B;AAC3B,mBAAO,EAAP;AACH;AACD,YAAI,KAAKL,OAAL,CAAaK,MAAb,GAAsB,CAA1B,EAA6B;AACzB,kBAAMC,SAAS,KAAKN,OAAL,CAAaO,IAAb,CAAkB,EAAlB,CAAf;AACA,iBAAKP,OAAL,CAAaK,MAAb,GAAsB,CAAtB;AACA,iBAAKL,OAAL,CAAa,CAAb,IAAkBM,MAAlB;AACH;AACD,eAAO,KAAKN,OAAL,CAAa,CAAb,CAAP;AACH;AAnBe;AAqBpBJ,QAAQE,aAAR,GAAwBA,aAAxB;AACA","file":"StringBuilder.js","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This class allows a large text string to be constructed incrementally by appending small chunks.  The final\n * string can be obtained by calling StringBuilder.toString().\n *\n * @remarks\n * A naive approach might use the `+=` operator to append strings:  This would have the downside of copying\n * the entire string each time a chunk is appended, resulting in `O(n^2)` bytes of memory being allocated\n * (and later freed by the garbage  collector), and many of the allocations could be very large objects.\n * StringBuilder avoids this overhead by accumulating the chunks in an array, and efficiently joining them\n * when `getText()` is finally called.\n *\n * @public\n */\nclass StringBuilder {\n    constructor() {\n        this._chunks = [];\n    }\n    /** {@inheritDoc IStringBuilder.append} */\n    append(text) {\n        this._chunks.push(text);\n    }\n    /** {@inheritDoc IStringBuilder.toString} */\n    toString() {\n        if (this._chunks.length === 0) {\n            return '';\n        }\n        if (this._chunks.length > 1) {\n            const joined = this._chunks.join('');\n            this._chunks.length = 1;\n            this._chunks[0] = joined;\n        }\n        return this._chunks[0];\n    }\n}\nexports.StringBuilder = StringBuilder;\n//# sourceMappingURL=StringBuilder.js.map"]}