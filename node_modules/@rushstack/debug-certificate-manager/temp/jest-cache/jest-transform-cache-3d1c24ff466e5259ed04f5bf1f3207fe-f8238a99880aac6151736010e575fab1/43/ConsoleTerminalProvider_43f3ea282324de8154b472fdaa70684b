1cd06eb298a049a6e02d65e20bd0d782
"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.

Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = require("os");
const safe_1 = require("colors/safe");
const ITerminalProvider_1 = require("./ITerminalProvider");
/**
 * Terminal provider that prints to STDOUT (for log- and verbose-level messages) and
 * STDERR (for warning- and error-level messsages).
 *
 * @beta
 */
class ConsoleTerminalProvider {
    constructor(options = {}) {
        /**
         * If true, verbose-level messages should be written to the console.
         */
        this.verboseEnabled = false;
        this.verboseEnabled = !!options.verboseEnabled;
    }
    /**
     * {@inheritDoc ITerminalProvider.write}
     */
    write(data, severity) {
        switch (severity) {
            case ITerminalProvider_1.TerminalProviderSeverity.warning:
            case ITerminalProvider_1.TerminalProviderSeverity.error:
                {
                    process.stderr.write(data);
                    break;
                }
            case ITerminalProvider_1.TerminalProviderSeverity.verbose:
                {
                    if (this.verboseEnabled) {
                        process.stdout.write(data);
                    }
                    break;
                }
            case ITerminalProvider_1.TerminalProviderSeverity.log:
            default:
                {
                    process.stdout.write(data);
                    break;
                }
        }
    }
    /**
     * {@inheritDoc ITerminalProvider.eolCharacter}
     */
    get eolCharacter() {
        return os_1.EOL;
    }
    /**
     * {@inheritDoc ITerminalProvider.supportsColor}
     */
    get supportsColor() {
        return safe_1.enabled;
    }
}
exports.ConsoleTerminalProvider = ConsoleTerminalProvider;
//# sourceMappingURL=ConsoleTerminalProvider.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbnNvbGVUZXJtaW5hbFByb3ZpZGVyLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwib3NfMSIsInJlcXVpcmUiLCJzYWZlXzEiLCJJVGVybWluYWxQcm92aWRlcl8xIiwiQ29uc29sZVRlcm1pbmFsUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJ2ZXJib3NlRW5hYmxlZCIsIndyaXRlIiwiZGF0YSIsInNldmVyaXR5IiwiVGVybWluYWxQcm92aWRlclNldmVyaXR5Iiwid2FybmluZyIsImVycm9yIiwicHJvY2VzcyIsInN0ZGVyciIsInZlcmJvc2UiLCJzdGRvdXQiLCJsb2ciLCJlb2xDaGFyYWN0ZXIiLCJFT0wiLCJzdXBwb3J0c0NvbG9yIiwiZW5hYmxlZCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQSxNQUFNQyxPQUFPQyxRQUFRLElBQVIsQ0FBYjtBQUNBLE1BQU1DLFNBQVNELFFBQVEsYUFBUixDQUFmO0FBQ0EsTUFBTUUsc0JBQXNCRixRQUFRLHFCQUFSLENBQTVCO0FBQ0E7Ozs7OztBQU1BLE1BQU1HLHVCQUFOLENBQThCO0FBQzFCQyxnQkFBWUMsVUFBVSxFQUF0QixFQUEwQjtBQUN0Qjs7O0FBR0EsYUFBS0MsY0FBTCxHQUFzQixLQUF0QjtBQUNBLGFBQUtBLGNBQUwsR0FBc0IsQ0FBQyxDQUFDRCxRQUFRQyxjQUFoQztBQUNIO0FBQ0Q7OztBQUdBQyxVQUFNQyxJQUFOLEVBQVlDLFFBQVosRUFBc0I7QUFDbEIsZ0JBQVFBLFFBQVI7QUFDSSxpQkFBS1Asb0JBQW9CUSx3QkFBcEIsQ0FBNkNDLE9BQWxEO0FBQ0EsaUJBQUtULG9CQUFvQlEsd0JBQXBCLENBQTZDRSxLQUFsRDtBQUF5RDtBQUNyREMsNEJBQVFDLE1BQVIsQ0FBZVAsS0FBZixDQUFxQkMsSUFBckI7QUFDQTtBQUNIO0FBQ0QsaUJBQUtOLG9CQUFvQlEsd0JBQXBCLENBQTZDSyxPQUFsRDtBQUEyRDtBQUN2RCx3QkFBSSxLQUFLVCxjQUFULEVBQXlCO0FBQ3JCTyxnQ0FBUUcsTUFBUixDQUFlVCxLQUFmLENBQXFCQyxJQUFyQjtBQUNIO0FBQ0Q7QUFDSDtBQUNELGlCQUFLTixvQkFBb0JRLHdCQUFwQixDQUE2Q08sR0FBbEQ7QUFDQTtBQUFTO0FBQ0xKLDRCQUFRRyxNQUFSLENBQWVULEtBQWYsQ0FBcUJDLElBQXJCO0FBQ0E7QUFDSDtBQWhCTDtBQWtCSDtBQUNEOzs7QUFHQSxRQUFJVSxZQUFKLEdBQW1CO0FBQ2YsZUFBT25CLEtBQUtvQixHQUFaO0FBQ0g7QUFDRDs7O0FBR0EsUUFBSUMsYUFBSixHQUFvQjtBQUNoQixlQUFPbkIsT0FBT29CLE9BQWQ7QUFDSDtBQTFDeUI7QUE0QzlCeEIsUUFBUU0sdUJBQVIsR0FBa0NBLHVCQUFsQztBQUNBIiwiZmlsZSI6IkNvbnNvbGVUZXJtaW5hbFByb3ZpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLy8gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG9zXzEgPSByZXF1aXJlKFwib3NcIik7XG5jb25zdCBzYWZlXzEgPSByZXF1aXJlKFwiY29sb3JzL3NhZmVcIik7XG5jb25zdCBJVGVybWluYWxQcm92aWRlcl8xID0gcmVxdWlyZShcIi4vSVRlcm1pbmFsUHJvdmlkZXJcIik7XG4vKipcbiAqIFRlcm1pbmFsIHByb3ZpZGVyIHRoYXQgcHJpbnRzIHRvIFNURE9VVCAoZm9yIGxvZy0gYW5kIHZlcmJvc2UtbGV2ZWwgbWVzc2FnZXMpIGFuZFxuICogU1RERVJSIChmb3Igd2FybmluZy0gYW5kIGVycm9yLWxldmVsIG1lc3NzYWdlcykuXG4gKlxuICogQGJldGFcbiAqL1xuY2xhc3MgQ29uc29sZVRlcm1pbmFsUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdHJ1ZSwgdmVyYm9zZS1sZXZlbCBtZXNzYWdlcyBzaG91bGQgYmUgd3JpdHRlbiB0byB0aGUgY29uc29sZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmVyYm9zZUVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy52ZXJib3NlRW5hYmxlZCA9ICEhb3B0aW9ucy52ZXJib3NlRW5hYmxlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0Bpbmhlcml0RG9jIElUZXJtaW5hbFByb3ZpZGVyLndyaXRlfVxuICAgICAqL1xuICAgIHdyaXRlKGRhdGEsIHNldmVyaXR5KSB7XG4gICAgICAgIHN3aXRjaCAoc2V2ZXJpdHkpIHtcbiAgICAgICAgICAgIGNhc2UgSVRlcm1pbmFsUHJvdmlkZXJfMS5UZXJtaW5hbFByb3ZpZGVyU2V2ZXJpdHkud2FybmluZzpcbiAgICAgICAgICAgIGNhc2UgSVRlcm1pbmFsUHJvdmlkZXJfMS5UZXJtaW5hbFByb3ZpZGVyU2V2ZXJpdHkuZXJyb3I6IHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShkYXRhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSVRlcm1pbmFsUHJvdmlkZXJfMS5UZXJtaW5hbFByb3ZpZGVyU2V2ZXJpdHkudmVyYm9zZToge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZlcmJvc2VFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSVRlcm1pbmFsUHJvdmlkZXJfMS5UZXJtaW5hbFByb3ZpZGVyU2V2ZXJpdHkubG9nOlxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGRhdGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAaW5oZXJpdERvYyBJVGVybWluYWxQcm92aWRlci5lb2xDaGFyYWN0ZXJ9XG4gICAgICovXG4gICAgZ2V0IGVvbENoYXJhY3RlcigpIHtcbiAgICAgICAgcmV0dXJuIG9zXzEuRU9MO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGluaGVyaXREb2MgSVRlcm1pbmFsUHJvdmlkZXIuc3VwcG9ydHNDb2xvcn1cbiAgICAgKi9cbiAgICBnZXQgc3VwcG9ydHNDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHNhZmVfMS5lbmFibGVkO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29uc29sZVRlcm1pbmFsUHJvdmlkZXIgPSBDb25zb2xlVGVybWluYWxQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnNvbGVUZXJtaW5hbFByb3ZpZGVyLmpzLm1hcCJdfQ==