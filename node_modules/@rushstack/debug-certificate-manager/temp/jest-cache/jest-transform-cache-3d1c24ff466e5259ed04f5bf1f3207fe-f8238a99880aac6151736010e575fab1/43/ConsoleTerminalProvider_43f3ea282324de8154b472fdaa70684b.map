{"version":3,"sources":["ConsoleTerminalProvider.js"],"names":["Object","defineProperty","exports","value","os_1","require","safe_1","ITerminalProvider_1","ConsoleTerminalProvider","constructor","options","verboseEnabled","write","data","severity","TerminalProviderSeverity","warning","error","process","stderr","verbose","stdout","log","eolCharacter","EOL","supportsColor","enabled"],"mappings":"AAAA;AACA;AACA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,MAAMC,OAAOC,QAAQ,IAAR,CAAb;AACA,MAAMC,SAASD,QAAQ,aAAR,CAAf;AACA,MAAME,sBAAsBF,QAAQ,qBAAR,CAA5B;AACA;;;;;;AAMA,MAAMG,uBAAN,CAA8B;AAC1BC,gBAAYC,UAAU,EAAtB,EAA0B;AACtB;;;AAGA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKA,cAAL,GAAsB,CAAC,CAACD,QAAQC,cAAhC;AACH;AACD;;;AAGAC,UAAMC,IAAN,EAAYC,QAAZ,EAAsB;AAClB,gBAAQA,QAAR;AACI,iBAAKP,oBAAoBQ,wBAApB,CAA6CC,OAAlD;AACA,iBAAKT,oBAAoBQ,wBAApB,CAA6CE,KAAlD;AAAyD;AACrDC,4BAAQC,MAAR,CAAeP,KAAf,CAAqBC,IAArB;AACA;AACH;AACD,iBAAKN,oBAAoBQ,wBAApB,CAA6CK,OAAlD;AAA2D;AACvD,wBAAI,KAAKT,cAAT,EAAyB;AACrBO,gCAAQG,MAAR,CAAeT,KAAf,CAAqBC,IAArB;AACH;AACD;AACH;AACD,iBAAKN,oBAAoBQ,wBAApB,CAA6CO,GAAlD;AACA;AAAS;AACLJ,4BAAQG,MAAR,CAAeT,KAAf,CAAqBC,IAArB;AACA;AACH;AAhBL;AAkBH;AACD;;;AAGA,QAAIU,YAAJ,GAAmB;AACf,eAAOnB,KAAKoB,GAAZ;AACH;AACD;;;AAGA,QAAIC,aAAJ,GAAoB;AAChB,eAAOnB,OAAOoB,OAAd;AACH;AA1CyB;AA4C9BxB,QAAQM,uBAAR,GAAkCA,uBAAlC;AACA","file":"ConsoleTerminalProvider.js","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os_1 = require(\"os\");\nconst safe_1 = require(\"colors/safe\");\nconst ITerminalProvider_1 = require(\"./ITerminalProvider\");\n/**\n * Terminal provider that prints to STDOUT (for log- and verbose-level messages) and\n * STDERR (for warning- and error-level messsages).\n *\n * @beta\n */\nclass ConsoleTerminalProvider {\n    constructor(options = {}) {\n        /**\n         * If true, verbose-level messages should be written to the console.\n         */\n        this.verboseEnabled = false;\n        this.verboseEnabled = !!options.verboseEnabled;\n    }\n    /**\n     * {@inheritDoc ITerminalProvider.write}\n     */\n    write(data, severity) {\n        switch (severity) {\n            case ITerminalProvider_1.TerminalProviderSeverity.warning:\n            case ITerminalProvider_1.TerminalProviderSeverity.error: {\n                process.stderr.write(data);\n                break;\n            }\n            case ITerminalProvider_1.TerminalProviderSeverity.verbose: {\n                if (this.verboseEnabled) {\n                    process.stdout.write(data);\n                }\n                break;\n            }\n            case ITerminalProvider_1.TerminalProviderSeverity.log:\n            default: {\n                process.stdout.write(data);\n                break;\n            }\n        }\n    }\n    /**\n     * {@inheritDoc ITerminalProvider.eolCharacter}\n     */\n    get eolCharacter() {\n        return os_1.EOL;\n    }\n    /**\n     * {@inheritDoc ITerminalProvider.supportsColor}\n     */\n    get supportsColor() {\n        return safe_1.enabled;\n    }\n}\nexports.ConsoleTerminalProvider = ConsoleTerminalProvider;\n//# sourceMappingURL=ConsoleTerminalProvider.js.map"]}