7b046acd1ca6de4fdc25d94a0b4177b2
"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.

Object.defineProperty(exports, "__esModule", { value: true });
const ProtectableMapView_1 = require("./ProtectableMapView");
/**
 * The ProtectableMap provides an easy way for an API to expose a `Map<K, V>` property
 * while intercepting and validating any write operations that are performed by
 * consumers of the API.
 *
 * @remarks
 * The ProtectableMap itself is intended to be a private object that only its owner
 * can access directly.  Any operations performed directly on the ProtectableMap will
 * bypass the hooks and any validation they perform.  The public property that is exposed
 * to API consumers should return {@link ProtectableMap.protectedView} instead.
 *
 * For example, suppose you want to share your `Map<string, number>` data structure,
 * but you want to enforce that the key must always be an upper case string:
 * You could use the onSet() hook to validate the keys and throw an exception
 * if the key is not uppercase.
 *
 * @public
 */
class ProtectableMap {
    constructor(parameters) {
        this._protectedView = new ProtectableMapView_1.ProtectableMapView(this, parameters);
    }
    /**
     * The owner of the protectable map should return this object via its public API.
     */
    get protectedView() {
        return this._protectedView;
    }
    // ---------------------------------------------------------------------------
    // lib.es2015.collections contract - write operations
    /**
     * Removes all entries from the map.
     * This operation does NOT invoke the ProtectableMap onClear() hook.
     */
    clear() {
        this._protectedView._clearUnprotected();
    }
    /**
     * Removes the specified key from the map.
     * This operation does NOT invoke the ProtectableMap onDelete() hook.
     */
    delete(key) {
        return this._protectedView._deleteUnprotected(key);
    }
    /**
     * Sets a value for the specified key.
     * This operation does NOT invoke the ProtectableMap onSet() hook.
     */
    set(key, value) {
        this._protectedView._setUnprotected(key, value);
        return this;
    }
    // ---------------------------------------------------------------------------
    // lib.es2015.collections contract - read operations
    /**
     * Performs an operation for each (key, value) entries in the map.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    forEach(callbackfn, thisArg) {
        this._protectedView.forEach(callbackfn);
    }
    /**
     * Retrieves the value for the specified key.
     * @returns undefined if the value is undefined OR if the key is missing;
     * otherwise returns the value associated with the key.
     */
    get(key) {
        return this._protectedView.get(key);
    }
    /**
     * Returns true if the specified key belongs to the map.
     */
    has(key) {
        return this._protectedView.has(key);
    }
    /**
     * Returns the number of (key, value) entries in the map.
     */
    get size() {
        return this._protectedView.size;
    }
}
exports.ProtectableMap = ProtectableMap;
//# sourceMappingURL=ProtectableMap.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlByb3RlY3RhYmxlTWFwLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUHJvdGVjdGFibGVNYXBWaWV3XzEiLCJyZXF1aXJlIiwiUHJvdGVjdGFibGVNYXAiLCJjb25zdHJ1Y3RvciIsInBhcmFtZXRlcnMiLCJfcHJvdGVjdGVkVmlldyIsIlByb3RlY3RhYmxlTWFwVmlldyIsInByb3RlY3RlZFZpZXciLCJjbGVhciIsIl9jbGVhclVucHJvdGVjdGVkIiwiZGVsZXRlIiwia2V5IiwiX2RlbGV0ZVVucHJvdGVjdGVkIiwic2V0IiwiX3NldFVucHJvdGVjdGVkIiwiZm9yRWFjaCIsImNhbGxiYWNrZm4iLCJ0aGlzQXJnIiwiZ2V0IiwiaGFzIiwic2l6ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQSxNQUFNQyx1QkFBdUJDLFFBQVEsc0JBQVIsQ0FBN0I7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLE1BQU1DLGNBQU4sQ0FBcUI7QUFDakJDLGdCQUFZQyxVQUFaLEVBQXdCO0FBQ3BCLGFBQUtDLGNBQUwsR0FBc0IsSUFBSUwscUJBQXFCTSxrQkFBekIsQ0FBNEMsSUFBNUMsRUFBa0RGLFVBQWxELENBQXRCO0FBQ0g7QUFDRDs7O0FBR0EsUUFBSUcsYUFBSixHQUFvQjtBQUNoQixlQUFPLEtBQUtGLGNBQVo7QUFDSDtBQUNEO0FBQ0E7QUFDQTs7OztBQUlBRyxZQUFRO0FBQ0osYUFBS0gsY0FBTCxDQUFvQkksaUJBQXBCO0FBQ0g7QUFDRDs7OztBQUlBQyxXQUFPQyxHQUFQLEVBQVk7QUFDUixlQUFPLEtBQUtOLGNBQUwsQ0FBb0JPLGtCQUFwQixDQUF1Q0QsR0FBdkMsQ0FBUDtBQUNIO0FBQ0Q7Ozs7QUFJQUUsUUFBSUYsR0FBSixFQUFTWixLQUFULEVBQWdCO0FBQ1osYUFBS00sY0FBTCxDQUFvQlMsZUFBcEIsQ0FBb0NILEdBQXBDLEVBQXlDWixLQUF6QztBQUNBLGVBQU8sSUFBUDtBQUNIO0FBQ0Q7QUFDQTtBQUNBOzs7QUFHQTtBQUNBZ0IsWUFBUUMsVUFBUixFQUFvQkMsT0FBcEIsRUFBNkI7QUFDekIsYUFBS1osY0FBTCxDQUFvQlUsT0FBcEIsQ0FBNEJDLFVBQTVCO0FBQ0g7QUFDRDs7Ozs7QUFLQUUsUUFBSVAsR0FBSixFQUFTO0FBQ0wsZUFBTyxLQUFLTixjQUFMLENBQW9CYSxHQUFwQixDQUF3QlAsR0FBeEIsQ0FBUDtBQUNIO0FBQ0Q7OztBQUdBUSxRQUFJUixHQUFKLEVBQVM7QUFDTCxlQUFPLEtBQUtOLGNBQUwsQ0FBb0JjLEdBQXBCLENBQXdCUixHQUF4QixDQUFQO0FBQ0g7QUFDRDs7O0FBR0EsUUFBSVMsSUFBSixHQUFXO0FBQ1AsZUFBTyxLQUFLZixjQUFMLENBQW9CZSxJQUEzQjtBQUNIO0FBOURnQjtBQWdFckJ0QixRQUFRSSxjQUFSLEdBQXlCQSxjQUF6QjtBQUNBIiwiZmlsZSI6IlByb3RlY3RhYmxlTWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLy8gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IFByb3RlY3RhYmxlTWFwVmlld18xID0gcmVxdWlyZShcIi4vUHJvdGVjdGFibGVNYXBWaWV3XCIpO1xuLyoqXG4gKiBUaGUgUHJvdGVjdGFibGVNYXAgcHJvdmlkZXMgYW4gZWFzeSB3YXkgZm9yIGFuIEFQSSB0byBleHBvc2UgYSBgTWFwPEssIFY+YCBwcm9wZXJ0eVxuICogd2hpbGUgaW50ZXJjZXB0aW5nIGFuZCB2YWxpZGF0aW5nIGFueSB3cml0ZSBvcGVyYXRpb25zIHRoYXQgYXJlIHBlcmZvcm1lZCBieVxuICogY29uc3VtZXJzIG9mIHRoZSBBUEkuXG4gKlxuICogQHJlbWFya3NcbiAqIFRoZSBQcm90ZWN0YWJsZU1hcCBpdHNlbGYgaXMgaW50ZW5kZWQgdG8gYmUgYSBwcml2YXRlIG9iamVjdCB0aGF0IG9ubHkgaXRzIG93bmVyXG4gKiBjYW4gYWNjZXNzIGRpcmVjdGx5LiAgQW55IG9wZXJhdGlvbnMgcGVyZm9ybWVkIGRpcmVjdGx5IG9uIHRoZSBQcm90ZWN0YWJsZU1hcCB3aWxsXG4gKiBieXBhc3MgdGhlIGhvb2tzIGFuZCBhbnkgdmFsaWRhdGlvbiB0aGV5IHBlcmZvcm0uICBUaGUgcHVibGljIHByb3BlcnR5IHRoYXQgaXMgZXhwb3NlZFxuICogdG8gQVBJIGNvbnN1bWVycyBzaG91bGQgcmV0dXJuIHtAbGluayBQcm90ZWN0YWJsZU1hcC5wcm90ZWN0ZWRWaWV3fSBpbnN0ZWFkLlxuICpcbiAqIEZvciBleGFtcGxlLCBzdXBwb3NlIHlvdSB3YW50IHRvIHNoYXJlIHlvdXIgYE1hcDxzdHJpbmcsIG51bWJlcj5gIGRhdGEgc3RydWN0dXJlLFxuICogYnV0IHlvdSB3YW50IHRvIGVuZm9yY2UgdGhhdCB0aGUga2V5IG11c3QgYWx3YXlzIGJlIGFuIHVwcGVyIGNhc2Ugc3RyaW5nOlxuICogWW91IGNvdWxkIHVzZSB0aGUgb25TZXQoKSBob29rIHRvIHZhbGlkYXRlIHRoZSBrZXlzIGFuZCB0aHJvdyBhbiBleGNlcHRpb25cbiAqIGlmIHRoZSBrZXkgaXMgbm90IHVwcGVyY2FzZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFByb3RlY3RhYmxlTWFwIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHRoaXMuX3Byb3RlY3RlZFZpZXcgPSBuZXcgUHJvdGVjdGFibGVNYXBWaWV3XzEuUHJvdGVjdGFibGVNYXBWaWV3KHRoaXMsIHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgb3duZXIgb2YgdGhlIHByb3RlY3RhYmxlIG1hcCBzaG91bGQgcmV0dXJuIHRoaXMgb2JqZWN0IHZpYSBpdHMgcHVibGljIEFQSS5cbiAgICAgKi9cbiAgICBnZXQgcHJvdGVjdGVkVmlldygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3RlY3RlZFZpZXc7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIGxpYi5lczIwMTUuY29sbGVjdGlvbnMgY29udHJhY3QgLSB3cml0ZSBvcGVyYXRpb25zXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICogVGhpcyBvcGVyYXRpb24gZG9lcyBOT1QgaW52b2tlIHRoZSBQcm90ZWN0YWJsZU1hcCBvbkNsZWFyKCkgaG9vay5cbiAgICAgKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5fcHJvdGVjdGVkVmlldy5fY2xlYXJVbnByb3RlY3RlZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQga2V5IGZyb20gdGhlIG1hcC5cbiAgICAgKiBUaGlzIG9wZXJhdGlvbiBkb2VzIE5PVCBpbnZva2UgdGhlIFByb3RlY3RhYmxlTWFwIG9uRGVsZXRlKCkgaG9vay5cbiAgICAgKi9cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm90ZWN0ZWRWaWV3Ll9kZWxldGVVbnByb3RlY3RlZChrZXkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgZm9yIHRoZSBzcGVjaWZpZWQga2V5LlxuICAgICAqIFRoaXMgb3BlcmF0aW9uIGRvZXMgTk9UIGludm9rZSB0aGUgUHJvdGVjdGFibGVNYXAgb25TZXQoKSBob29rLlxuICAgICAqL1xuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3Byb3RlY3RlZFZpZXcuX3NldFVucHJvdGVjdGVkKGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gbGliLmVzMjAxNS5jb2xsZWN0aW9ucyBjb250cmFjdCAtIHJlYWQgb3BlcmF0aW9uc1xuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFuIG9wZXJhdGlvbiBmb3IgZWFjaCAoa2V5LCB2YWx1ZSkgZW50cmllcyBpbiB0aGUgbWFwLlxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnKSB7XG4gICAgICAgIHRoaXMuX3Byb3RlY3RlZFZpZXcuZm9yRWFjaChjYWxsYmFja2ZuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBmb3IgdGhlIHNwZWNpZmllZCBrZXkuXG4gICAgICogQHJldHVybnMgdW5kZWZpbmVkIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQgT1IgaWYgdGhlIGtleSBpcyBtaXNzaW5nO1xuICAgICAqIG90aGVyd2lzZSByZXR1cm5zIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGtleS5cbiAgICAgKi9cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm90ZWN0ZWRWaWV3LmdldChrZXkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCBrZXkgYmVsb25ncyB0byB0aGUgbWFwLlxuICAgICAqL1xuICAgIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3RlY3RlZFZpZXcuaGFzKGtleSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiAoa2V5LCB2YWx1ZSkgZW50cmllcyBpbiB0aGUgbWFwLlxuICAgICAqL1xuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdGVjdGVkVmlldy5zaXplO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvdGVjdGFibGVNYXAgPSBQcm90ZWN0YWJsZU1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb3RlY3RhYmxlTWFwLmpzLm1hcCJdfQ==