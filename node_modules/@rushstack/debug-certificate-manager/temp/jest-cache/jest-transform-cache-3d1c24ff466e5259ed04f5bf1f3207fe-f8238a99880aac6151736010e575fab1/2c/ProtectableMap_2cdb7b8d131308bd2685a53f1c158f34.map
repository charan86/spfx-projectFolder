{"version":3,"sources":["ProtectableMap.js"],"names":["Object","defineProperty","exports","value","ProtectableMapView_1","require","ProtectableMap","constructor","parameters","_protectedView","ProtectableMapView","protectedView","clear","_clearUnprotected","delete","key","_deleteUnprotected","set","_setUnprotected","forEach","callbackfn","thisArg","get","has","size"],"mappings":"AAAA;AACA;AACA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,MAAMC,uBAAuBC,QAAQ,sBAAR,CAA7B;AACA;;;;;;;;;;;;;;;;;;AAkBA,MAAMC,cAAN,CAAqB;AACjBC,gBAAYC,UAAZ,EAAwB;AACpB,aAAKC,cAAL,GAAsB,IAAIL,qBAAqBM,kBAAzB,CAA4C,IAA5C,EAAkDF,UAAlD,CAAtB;AACH;AACD;;;AAGA,QAAIG,aAAJ,GAAoB;AAChB,eAAO,KAAKF,cAAZ;AACH;AACD;AACA;AACA;;;;AAIAG,YAAQ;AACJ,aAAKH,cAAL,CAAoBI,iBAApB;AACH;AACD;;;;AAIAC,WAAOC,GAAP,EAAY;AACR,eAAO,KAAKN,cAAL,CAAoBO,kBAApB,CAAuCD,GAAvC,CAAP;AACH;AACD;;;;AAIAE,QAAIF,GAAJ,EAASZ,KAAT,EAAgB;AACZ,aAAKM,cAAL,CAAoBS,eAApB,CAAoCH,GAApC,EAAyCZ,KAAzC;AACA,eAAO,IAAP;AACH;AACD;AACA;AACA;;;AAGA;AACAgB,YAAQC,UAAR,EAAoBC,OAApB,EAA6B;AACzB,aAAKZ,cAAL,CAAoBU,OAApB,CAA4BC,UAA5B;AACH;AACD;;;;;AAKAE,QAAIP,GAAJ,EAAS;AACL,eAAO,KAAKN,cAAL,CAAoBa,GAApB,CAAwBP,GAAxB,CAAP;AACH;AACD;;;AAGAQ,QAAIR,GAAJ,EAAS;AACL,eAAO,KAAKN,cAAL,CAAoBc,GAApB,CAAwBR,GAAxB,CAAP;AACH;AACD;;;AAGA,QAAIS,IAAJ,GAAW;AACP,eAAO,KAAKf,cAAL,CAAoBe,IAA3B;AACH;AA9DgB;AAgErBtB,QAAQI,cAAR,GAAyBA,cAAzB;AACA","file":"ProtectableMap.js","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ProtectableMapView_1 = require(\"./ProtectableMapView\");\n/**\n * The ProtectableMap provides an easy way for an API to expose a `Map<K, V>` property\n * while intercepting and validating any write operations that are performed by\n * consumers of the API.\n *\n * @remarks\n * The ProtectableMap itself is intended to be a private object that only its owner\n * can access directly.  Any operations performed directly on the ProtectableMap will\n * bypass the hooks and any validation they perform.  The public property that is exposed\n * to API consumers should return {@link ProtectableMap.protectedView} instead.\n *\n * For example, suppose you want to share your `Map<string, number>` data structure,\n * but you want to enforce that the key must always be an upper case string:\n * You could use the onSet() hook to validate the keys and throw an exception\n * if the key is not uppercase.\n *\n * @public\n */\nclass ProtectableMap {\n    constructor(parameters) {\n        this._protectedView = new ProtectableMapView_1.ProtectableMapView(this, parameters);\n    }\n    /**\n     * The owner of the protectable map should return this object via its public API.\n     */\n    get protectedView() {\n        return this._protectedView;\n    }\n    // ---------------------------------------------------------------------------\n    // lib.es2015.collections contract - write operations\n    /**\n     * Removes all entries from the map.\n     * This operation does NOT invoke the ProtectableMap onClear() hook.\n     */\n    clear() {\n        this._protectedView._clearUnprotected();\n    }\n    /**\n     * Removes the specified key from the map.\n     * This operation does NOT invoke the ProtectableMap onDelete() hook.\n     */\n    delete(key) {\n        return this._protectedView._deleteUnprotected(key);\n    }\n    /**\n     * Sets a value for the specified key.\n     * This operation does NOT invoke the ProtectableMap onSet() hook.\n     */\n    set(key, value) {\n        this._protectedView._setUnprotected(key, value);\n        return this;\n    }\n    // ---------------------------------------------------------------------------\n    // lib.es2015.collections contract - read operations\n    /**\n     * Performs an operation for each (key, value) entries in the map.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    forEach(callbackfn, thisArg) {\n        this._protectedView.forEach(callbackfn);\n    }\n    /**\n     * Retrieves the value for the specified key.\n     * @returns undefined if the value is undefined OR if the key is missing;\n     * otherwise returns the value associated with the key.\n     */\n    get(key) {\n        return this._protectedView.get(key);\n    }\n    /**\n     * Returns true if the specified key belongs to the map.\n     */\n    has(key) {\n        return this._protectedView.has(key);\n    }\n    /**\n     * Returns the number of (key, value) entries in the map.\n     */\n    get size() {\n        return this._protectedView.size;\n    }\n}\nexports.ProtectableMap = ProtectableMap;\n//# sourceMappingURL=ProtectableMap.js.map"]}