{"version":3,"sources":["Terminal.js"],"names":["Object","defineProperty","exports","value","ITerminalProvider_1","require","Colors_1","Terminal","constructor","provider","_providers","Set","add","registerProvider","unregisterProvider","has","delete","write","messageParts","_writeSegmentsToProviders","TerminalProviderSeverity","log","writeLine","eolSequence","writeWarning","map","part","assign","Colors","_normalizeStringOrColorableSequence","foregroundColor","ColorValue","Yellow","warning","writeWarningLine","writeError","Red","error","writeErrorLine","writeVerbose","verbose","writeVerboseLine","segments","severity","withColorText","withoutColorText","withColorLines","withoutColorLines","forEach","eol","eolCharacter","textToWrite","supportsColor","_serializeFormattableTextSegments","join","withColor","lines","segmentsToJoin","lastSegmentWasEol","i","length","segment","isEol","push","startColorCodes","endColorCodes","Black","Green","Blue","Magenta","Cyan","White","Gray","backgroundColor","textAttributes","textAttribute","TextAttribute","Bold","Dim","Underline","Blink","InvertColor","Hidden","j","code","toString","text"],"mappings":"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","file":"Terminal.js","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ITerminalProvider_1 = require(\"./ITerminalProvider\");\nconst Colors_1 = require(\"./Colors\");\n/**\n * This class facilitates writing to a console.\n *\n * @beta\n */\nclass Terminal {\n    constructor(provider) {\n        this._providers = new Set();\n        this._providers.add(provider);\n    }\n    /**\n     * Subscribe a new terminal provider.\n     */\n    registerProvider(provider) {\n        this._providers.add(provider);\n    }\n    /**\n     * Unsubscribe a terminal provider. If the provider isn't subscribed, this function does nothing.\n     */\n    unregisterProvider(provider) {\n        if (this._providers.has(provider)) {\n            this._providers.delete(provider);\n        }\n    }\n    /**\n     * Write a generic message to the terminal\n     */\n    write(...messageParts) {\n        this._writeSegmentsToProviders(messageParts, ITerminalProvider_1.TerminalProviderSeverity.log);\n    }\n    /**\n     * Write a generic message to the terminal, followed by a newline\n     */\n    writeLine(...messageParts) {\n        this.write(...messageParts, Colors_1.eolSequence);\n    }\n    /**\n     * Write a warning message to the console with yellow text.\n     *\n     * @remarks\n     * The yellow color takes precedence over any other foreground colors set.\n     */\n    writeWarning(...messageParts) {\n        this._writeSegmentsToProviders(messageParts.map((part) => (Object.assign({}, Colors_1.Colors._normalizeStringOrColorableSequence(part), { foregroundColor: Colors_1.ColorValue.Yellow }))), ITerminalProvider_1.TerminalProviderSeverity.warning);\n    }\n    /**\n     * Write a warning message to the console with yellow text, followed by a newline.\n     *\n     * @remarks\n     * The yellow color takes precedence over any other foreground colors set.\n     */\n    writeWarningLine(...messageParts) {\n        this._writeSegmentsToProviders([\n            ...messageParts.map((part) => (Object.assign({}, Colors_1.Colors._normalizeStringOrColorableSequence(part), { foregroundColor: Colors_1.ColorValue.Yellow }))),\n            Colors_1.eolSequence\n        ], ITerminalProvider_1.TerminalProviderSeverity.warning);\n    }\n    /**\n     * Write an error message to the console with red text.\n     *\n     * @remarks\n     * The red color takes precedence over any other foreground colors set.\n     */\n    writeError(...messageParts) {\n        this._writeSegmentsToProviders(messageParts.map((part) => (Object.assign({}, Colors_1.Colors._normalizeStringOrColorableSequence(part), { foregroundColor: Colors_1.ColorValue.Red }))), ITerminalProvider_1.TerminalProviderSeverity.error);\n    }\n    /**\n     * Write an error message to the console with red text, followed by a newline.\n     *\n     * @remarks\n     * The red color takes precedence over any other foreground colors set.\n     */\n    writeErrorLine(...messageParts) {\n        this._writeSegmentsToProviders([\n            ...messageParts.map((part) => (Object.assign({}, Colors_1.Colors._normalizeStringOrColorableSequence(part), { foregroundColor: Colors_1.ColorValue.Red }))),\n            Colors_1.eolSequence\n        ], ITerminalProvider_1.TerminalProviderSeverity.error);\n    }\n    /**\n     * Write a verbose-level message.\n     */\n    writeVerbose(...messageParts) {\n        this._writeSegmentsToProviders(messageParts, ITerminalProvider_1.TerminalProviderSeverity.verbose);\n    }\n    /**\n     * Write a verbose-level message followed by a newline.\n     */\n    writeVerboseLine(...messageParts) {\n        this.writeVerbose(...messageParts, Colors_1.eolSequence);\n    }\n    _writeSegmentsToProviders(segments, severity) {\n        const withColorText = {};\n        const withoutColorText = {};\n        let withColorLines;\n        let withoutColorLines;\n        this._providers.forEach((provider) => {\n            const eol = provider.eolCharacter;\n            let textToWrite;\n            if (provider.supportsColor) {\n                if (!withColorLines) {\n                    withColorLines = this._serializeFormattableTextSegments(segments, true);\n                }\n                if (!withColorText[eol]) {\n                    withColorText[eol] = withColorLines.join(eol);\n                }\n                textToWrite = withColorText[eol];\n            }\n            else {\n                if (!withoutColorLines) {\n                    withoutColorLines = this._serializeFormattableTextSegments(segments, false);\n                }\n                if (!withoutColorText[eol]) {\n                    withoutColorText[eol] = withoutColorLines.join(eol);\n                }\n                textToWrite = withoutColorText[eol];\n            }\n            provider.write(textToWrite, severity);\n        });\n    }\n    _serializeFormattableTextSegments(segments, withColor) {\n        const lines = [];\n        let segmentsToJoin = [];\n        let lastSegmentWasEol = false;\n        for (let i = 0; i < segments.length; i++) {\n            const segment = Colors_1.Colors._normalizeStringOrColorableSequence(segments[i]);\n            lastSegmentWasEol = !!segment.isEol;\n            if (lastSegmentWasEol) {\n                lines.push(segmentsToJoin.join(''));\n                segmentsToJoin = [];\n            }\n            else {\n                if (withColor) {\n                    const startColorCodes = [];\n                    const endColorCodes = [];\n                    switch (segment.foregroundColor) {\n                        case Colors_1.ColorValue.Black: {\n                            startColorCodes.push(30);\n                            endColorCodes.push(39);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Red: {\n                            startColorCodes.push(31);\n                            endColorCodes.push(39);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Green: {\n                            startColorCodes.push(32);\n                            endColorCodes.push(39);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Yellow: {\n                            startColorCodes.push(33);\n                            endColorCodes.push(39);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Blue: {\n                            startColorCodes.push(34);\n                            endColorCodes.push(39);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Magenta: {\n                            startColorCodes.push(35);\n                            endColorCodes.push(39);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Cyan: {\n                            startColorCodes.push(36);\n                            endColorCodes.push(39);\n                            break;\n                        }\n                        case Colors_1.ColorValue.White: {\n                            startColorCodes.push(37);\n                            endColorCodes.push(39);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Gray: {\n                            startColorCodes.push(90);\n                            endColorCodes.push(39);\n                            break;\n                        }\n                    }\n                    switch (segment.backgroundColor) {\n                        case Colors_1.ColorValue.Black: {\n                            startColorCodes.push(40);\n                            endColorCodes.push(49);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Red: {\n                            startColorCodes.push(41);\n                            endColorCodes.push(49);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Green: {\n                            startColorCodes.push(42);\n                            endColorCodes.push(49);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Yellow: {\n                            startColorCodes.push(43);\n                            endColorCodes.push(49);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Blue: {\n                            startColorCodes.push(44);\n                            endColorCodes.push(49);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Magenta: {\n                            startColorCodes.push(45);\n                            endColorCodes.push(49);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Cyan: {\n                            startColorCodes.push(46);\n                            endColorCodes.push(49);\n                            break;\n                        }\n                        case Colors_1.ColorValue.White: {\n                            startColorCodes.push(47);\n                            endColorCodes.push(49);\n                            break;\n                        }\n                        case Colors_1.ColorValue.Gray: {\n                            startColorCodes.push(100);\n                            endColorCodes.push(49);\n                            break;\n                        }\n                    }\n                    if (segment.textAttributes) {\n                        for (const textAttribute of segment.textAttributes) {\n                            switch (textAttribute) {\n                                case Colors_1.TextAttribute.Bold: {\n                                    startColorCodes.push(1);\n                                    endColorCodes.push(21);\n                                    break;\n                                }\n                                case Colors_1.TextAttribute.Dim: {\n                                    startColorCodes.push(2);\n                                    endColorCodes.push(22);\n                                    break;\n                                }\n                                case Colors_1.TextAttribute.Underline: {\n                                    startColorCodes.push(4);\n                                    endColorCodes.push(24);\n                                    break;\n                                }\n                                case Colors_1.TextAttribute.Blink: {\n                                    startColorCodes.push(5);\n                                    endColorCodes.push(25);\n                                    break;\n                                }\n                                case Colors_1.TextAttribute.InvertColor: {\n                                    startColorCodes.push(7);\n                                    endColorCodes.push(27);\n                                    break;\n                                }\n                                case Colors_1.TextAttribute.Hidden: {\n                                    startColorCodes.push(8);\n                                    endColorCodes.push(28);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    for (let j = 0; j < startColorCodes.length; j++) {\n                        const code = startColorCodes[j];\n                        segmentsToJoin.push(...[\n                            '\\u001b[',\n                            code.toString(),\n                            'm'\n                        ]);\n                    }\n                    segmentsToJoin.push(segment.text);\n                    for (let j = endColorCodes.length - 1; j >= 0; j--) {\n                        const code = endColorCodes[j];\n                        segmentsToJoin.push(...[\n                            '\\u001b[',\n                            code.toString(),\n                            'm'\n                        ]);\n                    }\n                }\n                else {\n                    segmentsToJoin.push(segment.text);\n                }\n            }\n        }\n        if (segmentsToJoin.length > 0) {\n            lines.push(segmentsToJoin.join(''));\n        }\n        if (lastSegmentWasEol) {\n            lines.push('');\n        }\n        return lines;\n    }\n}\nexports.Terminal = Terminal;\n//# sourceMappingURL=Terminal.js.map"]}