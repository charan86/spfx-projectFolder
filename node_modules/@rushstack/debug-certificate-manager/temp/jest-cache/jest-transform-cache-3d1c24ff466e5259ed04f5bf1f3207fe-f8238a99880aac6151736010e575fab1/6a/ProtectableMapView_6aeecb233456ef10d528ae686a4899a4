55fe5acf67ef1e6beefe6edda1dac3f9
"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The internal wrapper used by ProtectableMap.  It extends the real `Map<K, V>` base class,
 * but hooks the destructive operations (clear/delete/set) to give the owner a chance
 * to block them.
 *
 * NOTE: This is not a public API.
 */
class ProtectableMapView extends Map {
    constructor(owner, parameters) {
        super();
        this._owner = owner;
        this._parameters = parameters;
    }
    clear() {
        if (this._parameters.onClear) {
            this._parameters.onClear(this._owner);
        }
        super.clear();
    }
    delete(key) {
        if (this._parameters.onDelete) {
            this._parameters.onDelete(this._owner, key);
        }
        return super.delete(key);
    }
    set(key, value) {
        let modifiedValue = value;
        if (this._parameters.onSet) {
            modifiedValue = this._parameters.onSet(this._owner, key, modifiedValue);
        }
        super.set(key, modifiedValue);
        return this;
    }
    // INTERNAL USAGE ONLY
    _clearUnprotected() {
        super.clear();
    }
    // INTERNAL USAGE ONLY
    _deleteUnprotected(key) {
        return super.delete(key);
    }
    // INTERNAL USAGE ONLY
    _setUnprotected(key, value) {
        super.set(key, value);
    }
}
exports.ProtectableMapView = ProtectableMapView;
//# sourceMappingURL=ProtectableMapView.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlByb3RlY3RhYmxlTWFwVmlldy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlByb3RlY3RhYmxlTWFwVmlldyIsIk1hcCIsImNvbnN0cnVjdG9yIiwib3duZXIiLCJwYXJhbWV0ZXJzIiwiX293bmVyIiwiX3BhcmFtZXRlcnMiLCJjbGVhciIsIm9uQ2xlYXIiLCJkZWxldGUiLCJrZXkiLCJvbkRlbGV0ZSIsInNldCIsIm1vZGlmaWVkVmFsdWUiLCJvblNldCIsIl9jbGVhclVucHJvdGVjdGVkIiwiX2RlbGV0ZVVucHJvdGVjdGVkIiwiX3NldFVucHJvdGVjdGVkIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBOzs7Ozs7O0FBT0EsTUFBTUMsa0JBQU4sU0FBaUNDLEdBQWpDLENBQXFDO0FBQ2pDQyxnQkFBWUMsS0FBWixFQUFtQkMsVUFBbkIsRUFBK0I7QUFDM0I7QUFDQSxhQUFLQyxNQUFMLEdBQWNGLEtBQWQ7QUFDQSxhQUFLRyxXQUFMLEdBQW1CRixVQUFuQjtBQUNIO0FBQ0RHLFlBQVE7QUFDSixZQUFJLEtBQUtELFdBQUwsQ0FBaUJFLE9BQXJCLEVBQThCO0FBQzFCLGlCQUFLRixXQUFMLENBQWlCRSxPQUFqQixDQUF5QixLQUFLSCxNQUE5QjtBQUNIO0FBQ0QsY0FBTUUsS0FBTjtBQUNIO0FBQ0RFLFdBQU9DLEdBQVAsRUFBWTtBQUNSLFlBQUksS0FBS0osV0FBTCxDQUFpQkssUUFBckIsRUFBK0I7QUFDM0IsaUJBQUtMLFdBQUwsQ0FBaUJLLFFBQWpCLENBQTBCLEtBQUtOLE1BQS9CLEVBQXVDSyxHQUF2QztBQUNIO0FBQ0QsZUFBTyxNQUFNRCxNQUFOLENBQWFDLEdBQWIsQ0FBUDtBQUNIO0FBQ0RFLFFBQUlGLEdBQUosRUFBU1gsS0FBVCxFQUFnQjtBQUNaLFlBQUljLGdCQUFnQmQsS0FBcEI7QUFDQSxZQUFJLEtBQUtPLFdBQUwsQ0FBaUJRLEtBQXJCLEVBQTRCO0FBQ3hCRCw0QkFBZ0IsS0FBS1AsV0FBTCxDQUFpQlEsS0FBakIsQ0FBdUIsS0FBS1QsTUFBNUIsRUFBb0NLLEdBQXBDLEVBQXlDRyxhQUF6QyxDQUFoQjtBQUNIO0FBQ0QsY0FBTUQsR0FBTixDQUFVRixHQUFWLEVBQWVHLGFBQWY7QUFDQSxlQUFPLElBQVA7QUFDSDtBQUNEO0FBQ0FFLHdCQUFvQjtBQUNoQixjQUFNUixLQUFOO0FBQ0g7QUFDRDtBQUNBUyx1QkFBbUJOLEdBQW5CLEVBQXdCO0FBQ3BCLGVBQU8sTUFBTUQsTUFBTixDQUFhQyxHQUFiLENBQVA7QUFDSDtBQUNEO0FBQ0FPLG9CQUFnQlAsR0FBaEIsRUFBcUJYLEtBQXJCLEVBQTRCO0FBQ3hCLGNBQU1hLEdBQU4sQ0FBVUYsR0FBVixFQUFlWCxLQUFmO0FBQ0g7QUFyQ2dDO0FBdUNyQ0QsUUFBUUUsa0JBQVIsR0FBNkJBLGtCQUE3QjtBQUNBIiwiZmlsZSI6IlByb3RlY3RhYmxlTWFwVmlldy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8vIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIFRoZSBpbnRlcm5hbCB3cmFwcGVyIHVzZWQgYnkgUHJvdGVjdGFibGVNYXAuICBJdCBleHRlbmRzIHRoZSByZWFsIGBNYXA8SywgVj5gIGJhc2UgY2xhc3MsXG4gKiBidXQgaG9va3MgdGhlIGRlc3RydWN0aXZlIG9wZXJhdGlvbnMgKGNsZWFyL2RlbGV0ZS9zZXQpIHRvIGdpdmUgdGhlIG93bmVyIGEgY2hhbmNlXG4gKiB0byBibG9jayB0aGVtLlxuICpcbiAqIE5PVEU6IFRoaXMgaXMgbm90IGEgcHVibGljIEFQSS5cbiAqL1xuY2xhc3MgUHJvdGVjdGFibGVNYXBWaWV3IGV4dGVuZHMgTWFwIHtcbiAgICBjb25zdHJ1Y3Rvcihvd25lciwgcGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9vd25lciA9IG93bmVyO1xuICAgICAgICB0aGlzLl9wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wYXJhbWV0ZXJzLm9uQ2xlYXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmFtZXRlcnMub25DbGVhcih0aGlzLl9vd25lcik7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuY2xlYXIoKTtcbiAgICB9XG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICBpZiAodGhpcy5fcGFyYW1ldGVycy5vbkRlbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVycy5vbkRlbGV0ZSh0aGlzLl9vd25lciwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuZGVsZXRlKGtleSk7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIGxldCBtb2RpZmllZFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9wYXJhbWV0ZXJzLm9uU2V0KSB7XG4gICAgICAgICAgICBtb2RpZmllZFZhbHVlID0gdGhpcy5fcGFyYW1ldGVycy5vblNldCh0aGlzLl9vd25lciwga2V5LCBtb2RpZmllZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5zZXQoa2V5LCBtb2RpZmllZFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIElOVEVSTkFMIFVTQUdFIE9OTFlcbiAgICBfY2xlYXJVbnByb3RlY3RlZCgpIHtcbiAgICAgICAgc3VwZXIuY2xlYXIoKTtcbiAgICB9XG4gICAgLy8gSU5URVJOQUwgVVNBR0UgT05MWVxuICAgIF9kZWxldGVVbnByb3RlY3RlZChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICAvLyBJTlRFUk5BTCBVU0FHRSBPTkxZXG4gICAgX3NldFVucHJvdGVjdGVkKGtleSwgdmFsdWUpIHtcbiAgICAgICAgc3VwZXIuc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvdGVjdGFibGVNYXBWaWV3ID0gUHJvdGVjdGFibGVNYXBWaWV3O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJvdGVjdGFibGVNYXBWaWV3LmpzLm1hcCJdfQ==