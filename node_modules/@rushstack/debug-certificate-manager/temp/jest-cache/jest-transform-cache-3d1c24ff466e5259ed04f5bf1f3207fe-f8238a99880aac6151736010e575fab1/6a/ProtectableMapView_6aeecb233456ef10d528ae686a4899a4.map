{"version":3,"sources":["ProtectableMapView.js"],"names":["Object","defineProperty","exports","value","ProtectableMapView","Map","constructor","owner","parameters","_owner","_parameters","clear","onClear","delete","key","onDelete","set","modifiedValue","onSet","_clearUnprotected","_deleteUnprotected","_setUnprotected"],"mappings":"AAAA;AACA;AACA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA;;;;;;;AAOA,MAAMC,kBAAN,SAAiCC,GAAjC,CAAqC;AACjCC,gBAAYC,KAAZ,EAAmBC,UAAnB,EAA+B;AAC3B;AACA,aAAKC,MAAL,GAAcF,KAAd;AACA,aAAKG,WAAL,GAAmBF,UAAnB;AACH;AACDG,YAAQ;AACJ,YAAI,KAAKD,WAAL,CAAiBE,OAArB,EAA8B;AAC1B,iBAAKF,WAAL,CAAiBE,OAAjB,CAAyB,KAAKH,MAA9B;AACH;AACD,cAAME,KAAN;AACH;AACDE,WAAOC,GAAP,EAAY;AACR,YAAI,KAAKJ,WAAL,CAAiBK,QAArB,EAA+B;AAC3B,iBAAKL,WAAL,CAAiBK,QAAjB,CAA0B,KAAKN,MAA/B,EAAuCK,GAAvC;AACH;AACD,eAAO,MAAMD,MAAN,CAAaC,GAAb,CAAP;AACH;AACDE,QAAIF,GAAJ,EAASX,KAAT,EAAgB;AACZ,YAAIc,gBAAgBd,KAApB;AACA,YAAI,KAAKO,WAAL,CAAiBQ,KAArB,EAA4B;AACxBD,4BAAgB,KAAKP,WAAL,CAAiBQ,KAAjB,CAAuB,KAAKT,MAA5B,EAAoCK,GAApC,EAAyCG,aAAzC,CAAhB;AACH;AACD,cAAMD,GAAN,CAAUF,GAAV,EAAeG,aAAf;AACA,eAAO,IAAP;AACH;AACD;AACAE,wBAAoB;AAChB,cAAMR,KAAN;AACH;AACD;AACAS,uBAAmBN,GAAnB,EAAwB;AACpB,eAAO,MAAMD,MAAN,CAAaC,GAAb,CAAP;AACH;AACD;AACAO,oBAAgBP,GAAhB,EAAqBX,KAArB,EAA4B;AACxB,cAAMa,GAAN,CAAUF,GAAV,EAAeX,KAAf;AACH;AArCgC;AAuCrCD,QAAQE,kBAAR,GAA6BA,kBAA7B;AACA","file":"ProtectableMapView.js","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The internal wrapper used by ProtectableMap.  It extends the real `Map<K, V>` base class,\n * but hooks the destructive operations (clear/delete/set) to give the owner a chance\n * to block them.\n *\n * NOTE: This is not a public API.\n */\nclass ProtectableMapView extends Map {\n    constructor(owner, parameters) {\n        super();\n        this._owner = owner;\n        this._parameters = parameters;\n    }\n    clear() {\n        if (this._parameters.onClear) {\n            this._parameters.onClear(this._owner);\n        }\n        super.clear();\n    }\n    delete(key) {\n        if (this._parameters.onDelete) {\n            this._parameters.onDelete(this._owner, key);\n        }\n        return super.delete(key);\n    }\n    set(key, value) {\n        let modifiedValue = value;\n        if (this._parameters.onSet) {\n            modifiedValue = this._parameters.onSet(this._owner, key, modifiedValue);\n        }\n        super.set(key, modifiedValue);\n        return this;\n    }\n    // INTERNAL USAGE ONLY\n    _clearUnprotected() {\n        super.clear();\n    }\n    // INTERNAL USAGE ONLY\n    _deleteUnprotected(key) {\n        return super.delete(key);\n    }\n    // INTERNAL USAGE ONLY\n    _setUnprotected(key, value) {\n        super.set(key, value);\n    }\n}\nexports.ProtectableMapView = ProtectableMapView;\n//# sourceMappingURL=ProtectableMapView.js.map"]}